<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Kms\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CreateSecretRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateSecretRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'automatic_rotation' => 'bool',
        'description' => 'string',
        'encryption_key' => 'string',
        'extended_config' => 'string',
        'project_name' => 'string',
        'rotation_interval' => 'string',
        'secret_name' => 'string',
        'secret_type' => 'string',
        'secret_value' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'automatic_rotation' => null,
        'description' => null,
        'encryption_key' => null,
        'extended_config' => null,
        'project_name' => null,
        'rotation_interval' => null,
        'secret_name' => null,
        'secret_type' => null,
        'secret_value' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'automatic_rotation' => 'AutomaticRotation',
        'description' => 'Description',
        'encryption_key' => 'EncryptionKey',
        'extended_config' => 'ExtendedConfig',
        'project_name' => 'ProjectName',
        'rotation_interval' => 'RotationInterval',
        'secret_name' => 'SecretName',
        'secret_type' => 'SecretType',
        'secret_value' => 'SecretValue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'automatic_rotation' => 'setAutomaticRotation',
        'description' => 'setDescription',
        'encryption_key' => 'setEncryptionKey',
        'extended_config' => 'setExtendedConfig',
        'project_name' => 'setProjectName',
        'rotation_interval' => 'setRotationInterval',
        'secret_name' => 'setSecretName',
        'secret_type' => 'setSecretType',
        'secret_value' => 'setSecretValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'automatic_rotation' => 'getAutomaticRotation',
        'description' => 'getDescription',
        'encryption_key' => 'getEncryptionKey',
        'extended_config' => 'getExtendedConfig',
        'project_name' => 'getProjectName',
        'rotation_interval' => 'getRotationInterval',
        'secret_name' => 'getSecretName',
        'secret_type' => 'getSecretType',
        'secret_value' => 'getSecretValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SECRET_TYPE_GENERIC = 'Generic';
    const SECRET_TYPE_IAM = 'IAM';
    const SECRET_TYPE_RDS = 'RDS';
    const SECRET_TYPE_REDIS = 'Redis';
    const SECRET_TYPE_ECS = 'ECS';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecretTypeAllowableValues()
    {
        return [
            self::SECRET_TYPE_GENERIC,
            self::SECRET_TYPE_IAM,
            self::SECRET_TYPE_RDS,
            self::SECRET_TYPE_REDIS,
            self::SECRET_TYPE_ECS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['automatic_rotation'] = isset($data['automatic_rotation']) ? $data['automatic_rotation'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['encryption_key'] = isset($data['encryption_key']) ? $data['encryption_key'] : null;
        $this->container['extended_config'] = isset($data['extended_config']) ? $data['extended_config'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['rotation_interval'] = isset($data['rotation_interval']) ? $data['rotation_interval'] : null;
        $this->container['secret_name'] = isset($data['secret_name']) ? $data['secret_name'] : null;
        $this->container['secret_type'] = isset($data['secret_type']) ? $data['secret_type'] : null;
        $this->container['secret_value'] = isset($data['secret_value']) ? $data['secret_value'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['secret_name'] === null) {
            $invalidProperties[] = "'secret_name' can't be null";
        }
        if ($this->container['secret_type'] === null) {
            $invalidProperties[] = "'secret_type' can't be null";
        }
        $allowedValues = $this->getSecretTypeAllowableValues();
        if (!is_null($this->container['secret_type']) && !in_array($this->container['secret_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'secret_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['secret_value'] === null) {
            $invalidProperties[] = "'secret_value' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets automatic_rotation
     *
     * @return bool
     */
    public function getAutomaticRotation()
    {
        return $this->container['automatic_rotation'];
    }

    /**
     * Sets automatic_rotation
     *
     * @param bool $automatic_rotation automatic_rotation
     *
     * @return $this
     */
    public function setAutomaticRotation($automatic_rotation)
    {
        $this->container['automatic_rotation'] = $automatic_rotation;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets encryption_key
     *
     * @return string
     */
    public function getEncryptionKey()
    {
        return $this->container['encryption_key'];
    }

    /**
     * Sets encryption_key
     *
     * @param string $encryption_key encryption_key
     *
     * @return $this
     */
    public function setEncryptionKey($encryption_key)
    {
        $this->container['encryption_key'] = $encryption_key;

        return $this;
    }

    /**
     * Gets extended_config
     *
     * @return string
     */
    public function getExtendedConfig()
    {
        return $this->container['extended_config'];
    }

    /**
     * Sets extended_config
     *
     * @param string $extended_config extended_config
     *
     * @return $this
     */
    public function setExtendedConfig($extended_config)
    {
        $this->container['extended_config'] = $extended_config;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets rotation_interval
     *
     * @return string
     */
    public function getRotationInterval()
    {
        return $this->container['rotation_interval'];
    }

    /**
     * Sets rotation_interval
     *
     * @param string $rotation_interval rotation_interval
     *
     * @return $this
     */
    public function setRotationInterval($rotation_interval)
    {
        $this->container['rotation_interval'] = $rotation_interval;

        return $this;
    }

    /**
     * Gets secret_name
     *
     * @return string
     */
    public function getSecretName()
    {
        return $this->container['secret_name'];
    }

    /**
     * Sets secret_name
     *
     * @param string $secret_name secret_name
     *
     * @return $this
     */
    public function setSecretName($secret_name)
    {
        $this->container['secret_name'] = $secret_name;

        return $this;
    }

    /**
     * Gets secret_type
     *
     * @return string
     */
    public function getSecretType()
    {
        return $this->container['secret_type'];
    }

    /**
     * Sets secret_type
     *
     * @param string $secret_type secret_type
     *
     * @return $this
     */
    public function setSecretType($secret_type)
    {
        $allowedValues = $this->getSecretTypeAllowableValues();
        if (!in_array($secret_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'secret_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['secret_type'] = $secret_type;

        return $this;
    }

    /**
     * Gets secret_value
     *
     * @return string
     */
    public function getSecretValue()
    {
        return $this->container['secret_value'];
    }

    /**
     * Sets secret_value
     *
     * @param string $secret_value secret_value
     *
     * @return $this
     */
    public function setSecretValue($secret_value)
    {
        $this->container['secret_value'] = $secret_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

