<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Escloud\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class InstanceConfigurationForCreateInstanceInOneStepInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InstanceConfigurationForCreateInstanceInOneStepInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'admin_password' => 'string',
        'auto_renew' => 'bool',
        'charge_type' => 'string',
        'configuration_code' => 'string',
        'deletion_protection' => 'bool',
        'enable_https' => 'bool',
        'enable_pure_master' => 'bool',
        'instance_name' => 'string',
        'network_specs' => '\Volcengine\Escloud\Model\NetworkSpecForCreateInstanceInOneStepInput[]',
        'node_specs_assigns' => '\Volcengine\Escloud\Model\NodeSpecsAssignForCreateInstanceInOneStepInput[]',
        'period' => 'int',
        'project_name' => 'string',
        'region_id' => 'string',
        'subnet' => '\Volcengine\Escloud\Model\SubnetForCreateInstanceInOneStepInput',
        'vpc' => '\Volcengine\Escloud\Model\VPCForCreateInstanceInOneStepInput',
        'version' => 'string',
        'zone_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'admin_password' => null,
        'auto_renew' => null,
        'charge_type' => null,
        'configuration_code' => null,
        'deletion_protection' => null,
        'enable_https' => null,
        'enable_pure_master' => null,
        'instance_name' => null,
        'network_specs' => null,
        'node_specs_assigns' => null,
        'period' => 'int32',
        'project_name' => null,
        'region_id' => null,
        'subnet' => null,
        'vpc' => null,
        'version' => null,
        'zone_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'admin_password' => 'AdminPassword',
        'auto_renew' => 'AutoRenew',
        'charge_type' => 'ChargeType',
        'configuration_code' => 'ConfigurationCode',
        'deletion_protection' => 'DeletionProtection',
        'enable_https' => 'EnableHttps',
        'enable_pure_master' => 'EnablePureMaster',
        'instance_name' => 'InstanceName',
        'network_specs' => 'NetworkSpecs',
        'node_specs_assigns' => 'NodeSpecsAssigns',
        'period' => 'Period',
        'project_name' => 'ProjectName',
        'region_id' => 'RegionId',
        'subnet' => 'Subnet',
        'vpc' => 'VPC',
        'version' => 'Version',
        'zone_id' => 'ZoneId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'admin_password' => 'setAdminPassword',
        'auto_renew' => 'setAutoRenew',
        'charge_type' => 'setChargeType',
        'configuration_code' => 'setConfigurationCode',
        'deletion_protection' => 'setDeletionProtection',
        'enable_https' => 'setEnableHttps',
        'enable_pure_master' => 'setEnablePureMaster',
        'instance_name' => 'setInstanceName',
        'network_specs' => 'setNetworkSpecs',
        'node_specs_assigns' => 'setNodeSpecsAssigns',
        'period' => 'setPeriod',
        'project_name' => 'setProjectName',
        'region_id' => 'setRegionId',
        'subnet' => 'setSubnet',
        'vpc' => 'setVpc',
        'version' => 'setVersion',
        'zone_id' => 'setZoneId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'admin_password' => 'getAdminPassword',
        'auto_renew' => 'getAutoRenew',
        'charge_type' => 'getChargeType',
        'configuration_code' => 'getConfigurationCode',
        'deletion_protection' => 'getDeletionProtection',
        'enable_https' => 'getEnableHttps',
        'enable_pure_master' => 'getEnablePureMaster',
        'instance_name' => 'getInstanceName',
        'network_specs' => 'getNetworkSpecs',
        'node_specs_assigns' => 'getNodeSpecsAssigns',
        'period' => 'getPeriod',
        'project_name' => 'getProjectName',
        'region_id' => 'getRegionId',
        'subnet' => 'getSubnet',
        'vpc' => 'getVpc',
        'version' => 'getVersion',
        'zone_id' => 'getZoneId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CHARGE_TYPE_PRE_PAID = 'PrePaid';
    const CHARGE_TYPE_POST_PAID = 'PostPaid';
    const VERSION_V6_7 = 'V6_7';
    const VERSION_V7_10 = 'V7_10';
    const VERSION_V7_TLS = 'V7_TLS';
    const VERSION_V7_BYTE = 'V7_BYTE';
    const VERSION_OPEN_SEARCH_2_9 = 'OPEN_SEARCH_2_9';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChargeTypeAllowableValues()
    {
        return [
            self::CHARGE_TYPE_PRE_PAID,
            self::CHARGE_TYPE_POST_PAID,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVersionAllowableValues()
    {
        return [
            self::VERSION_V6_7,
            self::VERSION_V7_10,
            self::VERSION_V7_TLS,
            self::VERSION_V7_BYTE,
            self::VERSION_OPEN_SEARCH_2_9,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['admin_password'] = isset($data['admin_password']) ? $data['admin_password'] : null;
        $this->container['auto_renew'] = isset($data['auto_renew']) ? $data['auto_renew'] : null;
        $this->container['charge_type'] = isset($data['charge_type']) ? $data['charge_type'] : null;
        $this->container['configuration_code'] = isset($data['configuration_code']) ? $data['configuration_code'] : null;
        $this->container['deletion_protection'] = isset($data['deletion_protection']) ? $data['deletion_protection'] : null;
        $this->container['enable_https'] = isset($data['enable_https']) ? $data['enable_https'] : null;
        $this->container['enable_pure_master'] = isset($data['enable_pure_master']) ? $data['enable_pure_master'] : null;
        $this->container['instance_name'] = isset($data['instance_name']) ? $data['instance_name'] : null;
        $this->container['network_specs'] = isset($data['network_specs']) ? $data['network_specs'] : null;
        $this->container['node_specs_assigns'] = isset($data['node_specs_assigns']) ? $data['node_specs_assigns'] : null;
        $this->container['period'] = isset($data['period']) ? $data['period'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['region_id'] = isset($data['region_id']) ? $data['region_id'] : null;
        $this->container['subnet'] = isset($data['subnet']) ? $data['subnet'] : null;
        $this->container['vpc'] = isset($data['vpc']) ? $data['vpc'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['zone_id'] = isset($data['zone_id']) ? $data['zone_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getChargeTypeAllowableValues();
        if (!is_null($this->container['charge_type']) && !in_array($this->container['charge_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'charge_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVersionAllowableValues();
        if (!is_null($this->container['version']) && !in_array($this->container['version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'version', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets admin_password
     *
     * @return string
     */
    public function getAdminPassword()
    {
        return $this->container['admin_password'];
    }

    /**
     * Sets admin_password
     *
     * @param string $admin_password admin_password
     *
     * @return $this
     */
    public function setAdminPassword($admin_password)
    {
        $this->container['admin_password'] = $admin_password;

        return $this;
    }

    /**
     * Gets auto_renew
     *
     * @return bool
     */
    public function getAutoRenew()
    {
        return $this->container['auto_renew'];
    }

    /**
     * Sets auto_renew
     *
     * @param bool $auto_renew auto_renew
     *
     * @return $this
     */
    public function setAutoRenew($auto_renew)
    {
        $this->container['auto_renew'] = $auto_renew;

        return $this;
    }

    /**
     * Gets charge_type
     *
     * @return string
     */
    public function getChargeType()
    {
        return $this->container['charge_type'];
    }

    /**
     * Sets charge_type
     *
     * @param string $charge_type charge_type
     *
     * @return $this
     */
    public function setChargeType($charge_type)
    {
        $allowedValues = $this->getChargeTypeAllowableValues();
        if (!is_null($charge_type) && !in_array($charge_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'charge_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['charge_type'] = $charge_type;

        return $this;
    }

    /**
     * Gets configuration_code
     *
     * @return string
     */
    public function getConfigurationCode()
    {
        return $this->container['configuration_code'];
    }

    /**
     * Sets configuration_code
     *
     * @param string $configuration_code configuration_code
     *
     * @return $this
     */
    public function setConfigurationCode($configuration_code)
    {
        $this->container['configuration_code'] = $configuration_code;

        return $this;
    }

    /**
     * Gets deletion_protection
     *
     * @return bool
     */
    public function getDeletionProtection()
    {
        return $this->container['deletion_protection'];
    }

    /**
     * Sets deletion_protection
     *
     * @param bool $deletion_protection deletion_protection
     *
     * @return $this
     */
    public function setDeletionProtection($deletion_protection)
    {
        $this->container['deletion_protection'] = $deletion_protection;

        return $this;
    }

    /**
     * Gets enable_https
     *
     * @return bool
     */
    public function getEnableHttps()
    {
        return $this->container['enable_https'];
    }

    /**
     * Sets enable_https
     *
     * @param bool $enable_https enable_https
     *
     * @return $this
     */
    public function setEnableHttps($enable_https)
    {
        $this->container['enable_https'] = $enable_https;

        return $this;
    }

    /**
     * Gets enable_pure_master
     *
     * @return bool
     */
    public function getEnablePureMaster()
    {
        return $this->container['enable_pure_master'];
    }

    /**
     * Sets enable_pure_master
     *
     * @param bool $enable_pure_master enable_pure_master
     *
     * @return $this
     */
    public function setEnablePureMaster($enable_pure_master)
    {
        $this->container['enable_pure_master'] = $enable_pure_master;

        return $this;
    }

    /**
     * Gets instance_name
     *
     * @return string
     */
    public function getInstanceName()
    {
        return $this->container['instance_name'];
    }

    /**
     * Sets instance_name
     *
     * @param string $instance_name instance_name
     *
     * @return $this
     */
    public function setInstanceName($instance_name)
    {
        $this->container['instance_name'] = $instance_name;

        return $this;
    }

    /**
     * Gets network_specs
     *
     * @return \Volcengine\Escloud\Model\NetworkSpecForCreateInstanceInOneStepInput[]
     */
    public function getNetworkSpecs()
    {
        return $this->container['network_specs'];
    }

    /**
     * Sets network_specs
     *
     * @param \Volcengine\Escloud\Model\NetworkSpecForCreateInstanceInOneStepInput[] $network_specs network_specs
     *
     * @return $this
     */
    public function setNetworkSpecs($network_specs)
    {
        $this->container['network_specs'] = $network_specs;

        return $this;
    }

    /**
     * Gets node_specs_assigns
     *
     * @return \Volcengine\Escloud\Model\NodeSpecsAssignForCreateInstanceInOneStepInput[]
     */
    public function getNodeSpecsAssigns()
    {
        return $this->container['node_specs_assigns'];
    }

    /**
     * Sets node_specs_assigns
     *
     * @param \Volcengine\Escloud\Model\NodeSpecsAssignForCreateInstanceInOneStepInput[] $node_specs_assigns node_specs_assigns
     *
     * @return $this
     */
    public function setNodeSpecsAssigns($node_specs_assigns)
    {
        $this->container['node_specs_assigns'] = $node_specs_assigns;

        return $this;
    }

    /**
     * Gets period
     *
     * @return int
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param int $period period
     *
     * @return $this
     */
    public function setPeriod($period)
    {
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets region_id
     *
     * @return string
     */
    public function getRegionId()
    {
        return $this->container['region_id'];
    }

    /**
     * Sets region_id
     *
     * @param string $region_id region_id
     *
     * @return $this
     */
    public function setRegionId($region_id)
    {
        $this->container['region_id'] = $region_id;

        return $this;
    }

    /**
     * Gets subnet
     *
     * @return \Volcengine\Escloud\Model\SubnetForCreateInstanceInOneStepInput
     */
    public function getSubnet()
    {
        return $this->container['subnet'];
    }

    /**
     * Sets subnet
     *
     * @param \Volcengine\Escloud\Model\SubnetForCreateInstanceInOneStepInput $subnet subnet
     *
     * @return $this
     */
    public function setSubnet($subnet)
    {
        $this->container['subnet'] = $subnet;

        return $this;
    }

    /**
     * Gets vpc
     *
     * @return \Volcengine\Escloud\Model\VPCForCreateInstanceInOneStepInput
     */
    public function getVpc()
    {
        return $this->container['vpc'];
    }

    /**
     * Sets vpc
     *
     * @param \Volcengine\Escloud\Model\VPCForCreateInstanceInOneStepInput $vpc vpc
     *
     * @return $this
     */
    public function setVpc($vpc)
    {
        $this->container['vpc'] = $vpc;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $allowedValues = $this->getVersionAllowableValues();
        if (!is_null($version) && !in_array($version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'version', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets zone_id
     *
     * @return string
     */
    public function getZoneId()
    {
        return $this->container['zone_id'];
    }

    /**
     * Sets zone_id
     *
     * @param string $zone_id zone_id
     *
     * @return $this
     */
    public function setZoneId($zone_id)
    {
        $this->container['zone_id'] = $zone_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

