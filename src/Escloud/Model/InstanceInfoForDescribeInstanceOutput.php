<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Escloud\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class InstanceInfoForDescribeInstanceOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InstanceInfoForDescribeInstanceOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cerebro_enabled' => 'bool',
        'cerebro_private_domain' => 'string',
        'cerebro_public_domain' => 'string',
        'charge_enabled' => 'bool',
        'cluster_id' => 'string',
        'create_time' => 'string',
        'deletion_protection' => 'bool',
        'es_eip' => 'string',
        'es_eip_id' => 'string',
        'es_private_endpoint' => 'string',
        'es_private_ip_whitelist' => 'string',
        'es_public_endpoint' => 'string',
        'es_public_ip_whitelist' => 'string',
        'enable_es_private_domain_public' => 'bool',
        'enable_es_private_network' => 'bool',
        'enable_es_public_network' => 'bool',
        'enable_kibana_private_domain_public' => 'bool',
        'enable_kibana_private_network' => 'bool',
        'enable_kibana_public_network' => 'bool',
        'expire_date' => 'string',
        'instance_configuration' => '\Volcengine\Escloud\Model\InstanceConfigurationForDescribeInstanceOutput',
        'instance_id' => 'string',
        'kibana_config' => '\Volcengine\Escloud\Model\KibanaConfigForDescribeInstanceOutput',
        'kibana_eip' => 'string',
        'kibana_eip_id' => 'string',
        'kibana_private_domain' => 'string',
        'kibana_private_ip_whitelist' => 'string',
        'kibana_public_domain' => 'string',
        'kibana_public_ip_whitelist' => 'string',
        'main_zone_id' => 'string',
        'maintenance_day' => 'string[]',
        'maintenance_time' => 'string',
        'resource_tags' => '\Volcengine\Escloud\Model\ResourceTagForDescribeInstanceOutput[]',
        'status' => 'string',
        'sub_instances' => '\Volcengine\Escloud\Model\SubInstanceForDescribeInstanceOutput[]',
        'support_cold_node' => 'bool',
        'total_nodes' => 'int',
        'transfer_info' => '\Volcengine\Escloud\Model\TransferInfoForDescribeInstanceOutput',
        'user_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cerebro_enabled' => null,
        'cerebro_private_domain' => null,
        'cerebro_public_domain' => null,
        'charge_enabled' => null,
        'cluster_id' => null,
        'create_time' => null,
        'deletion_protection' => null,
        'es_eip' => null,
        'es_eip_id' => null,
        'es_private_endpoint' => null,
        'es_private_ip_whitelist' => null,
        'es_public_endpoint' => null,
        'es_public_ip_whitelist' => null,
        'enable_es_private_domain_public' => null,
        'enable_es_private_network' => null,
        'enable_es_public_network' => null,
        'enable_kibana_private_domain_public' => null,
        'enable_kibana_private_network' => null,
        'enable_kibana_public_network' => null,
        'expire_date' => null,
        'instance_configuration' => null,
        'instance_id' => null,
        'kibana_config' => null,
        'kibana_eip' => null,
        'kibana_eip_id' => null,
        'kibana_private_domain' => null,
        'kibana_private_ip_whitelist' => null,
        'kibana_public_domain' => null,
        'kibana_public_ip_whitelist' => null,
        'main_zone_id' => null,
        'maintenance_day' => null,
        'maintenance_time' => null,
        'resource_tags' => null,
        'status' => null,
        'sub_instances' => null,
        'support_cold_node' => null,
        'total_nodes' => 'int32',
        'transfer_info' => null,
        'user_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cerebro_enabled' => 'CerebroEnabled',
        'cerebro_private_domain' => 'CerebroPrivateDomain',
        'cerebro_public_domain' => 'CerebroPublicDomain',
        'charge_enabled' => 'ChargeEnabled',
        'cluster_id' => 'ClusterId',
        'create_time' => 'CreateTime',
        'deletion_protection' => 'DeletionProtection',
        'es_eip' => 'ESEip',
        'es_eip_id' => 'ESEipId',
        'es_private_endpoint' => 'ESPrivateEndpoint',
        'es_private_ip_whitelist' => 'ESPrivateIpWhitelist',
        'es_public_endpoint' => 'ESPublicEndpoint',
        'es_public_ip_whitelist' => 'ESPublicIpWhitelist',
        'enable_es_private_domain_public' => 'EnableESPrivateDomainPublic',
        'enable_es_private_network' => 'EnableESPrivateNetwork',
        'enable_es_public_network' => 'EnableESPublicNetwork',
        'enable_kibana_private_domain_public' => 'EnableKibanaPrivateDomainPublic',
        'enable_kibana_private_network' => 'EnableKibanaPrivateNetwork',
        'enable_kibana_public_network' => 'EnableKibanaPublicNetwork',
        'expire_date' => 'ExpireDate',
        'instance_configuration' => 'InstanceConfiguration',
        'instance_id' => 'InstanceId',
        'kibana_config' => 'KibanaConfig',
        'kibana_eip' => 'KibanaEip',
        'kibana_eip_id' => 'KibanaEipId',
        'kibana_private_domain' => 'KibanaPrivateDomain',
        'kibana_private_ip_whitelist' => 'KibanaPrivateIpWhitelist',
        'kibana_public_domain' => 'KibanaPublicDomain',
        'kibana_public_ip_whitelist' => 'KibanaPublicIpWhitelist',
        'main_zone_id' => 'MainZoneId',
        'maintenance_day' => 'MaintenanceDay',
        'maintenance_time' => 'MaintenanceTime',
        'resource_tags' => 'ResourceTags',
        'status' => 'Status',
        'sub_instances' => 'SubInstances',
        'support_cold_node' => 'SupportColdNode',
        'total_nodes' => 'TotalNodes',
        'transfer_info' => 'TransferInfo',
        'user_id' => 'UserId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cerebro_enabled' => 'setCerebroEnabled',
        'cerebro_private_domain' => 'setCerebroPrivateDomain',
        'cerebro_public_domain' => 'setCerebroPublicDomain',
        'charge_enabled' => 'setChargeEnabled',
        'cluster_id' => 'setClusterId',
        'create_time' => 'setCreateTime',
        'deletion_protection' => 'setDeletionProtection',
        'es_eip' => 'setEsEip',
        'es_eip_id' => 'setEsEipId',
        'es_private_endpoint' => 'setEsPrivateEndpoint',
        'es_private_ip_whitelist' => 'setEsPrivateIpWhitelist',
        'es_public_endpoint' => 'setEsPublicEndpoint',
        'es_public_ip_whitelist' => 'setEsPublicIpWhitelist',
        'enable_es_private_domain_public' => 'setEnableEsPrivateDomainPublic',
        'enable_es_private_network' => 'setEnableEsPrivateNetwork',
        'enable_es_public_network' => 'setEnableEsPublicNetwork',
        'enable_kibana_private_domain_public' => 'setEnableKibanaPrivateDomainPublic',
        'enable_kibana_private_network' => 'setEnableKibanaPrivateNetwork',
        'enable_kibana_public_network' => 'setEnableKibanaPublicNetwork',
        'expire_date' => 'setExpireDate',
        'instance_configuration' => 'setInstanceConfiguration',
        'instance_id' => 'setInstanceId',
        'kibana_config' => 'setKibanaConfig',
        'kibana_eip' => 'setKibanaEip',
        'kibana_eip_id' => 'setKibanaEipId',
        'kibana_private_domain' => 'setKibanaPrivateDomain',
        'kibana_private_ip_whitelist' => 'setKibanaPrivateIpWhitelist',
        'kibana_public_domain' => 'setKibanaPublicDomain',
        'kibana_public_ip_whitelist' => 'setKibanaPublicIpWhitelist',
        'main_zone_id' => 'setMainZoneId',
        'maintenance_day' => 'setMaintenanceDay',
        'maintenance_time' => 'setMaintenanceTime',
        'resource_tags' => 'setResourceTags',
        'status' => 'setStatus',
        'sub_instances' => 'setSubInstances',
        'support_cold_node' => 'setSupportColdNode',
        'total_nodes' => 'setTotalNodes',
        'transfer_info' => 'setTransferInfo',
        'user_id' => 'setUserId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cerebro_enabled' => 'getCerebroEnabled',
        'cerebro_private_domain' => 'getCerebroPrivateDomain',
        'cerebro_public_domain' => 'getCerebroPublicDomain',
        'charge_enabled' => 'getChargeEnabled',
        'cluster_id' => 'getClusterId',
        'create_time' => 'getCreateTime',
        'deletion_protection' => 'getDeletionProtection',
        'es_eip' => 'getEsEip',
        'es_eip_id' => 'getEsEipId',
        'es_private_endpoint' => 'getEsPrivateEndpoint',
        'es_private_ip_whitelist' => 'getEsPrivateIpWhitelist',
        'es_public_endpoint' => 'getEsPublicEndpoint',
        'es_public_ip_whitelist' => 'getEsPublicIpWhitelist',
        'enable_es_private_domain_public' => 'getEnableEsPrivateDomainPublic',
        'enable_es_private_network' => 'getEnableEsPrivateNetwork',
        'enable_es_public_network' => 'getEnableEsPublicNetwork',
        'enable_kibana_private_domain_public' => 'getEnableKibanaPrivateDomainPublic',
        'enable_kibana_private_network' => 'getEnableKibanaPrivateNetwork',
        'enable_kibana_public_network' => 'getEnableKibanaPublicNetwork',
        'expire_date' => 'getExpireDate',
        'instance_configuration' => 'getInstanceConfiguration',
        'instance_id' => 'getInstanceId',
        'kibana_config' => 'getKibanaConfig',
        'kibana_eip' => 'getKibanaEip',
        'kibana_eip_id' => 'getKibanaEipId',
        'kibana_private_domain' => 'getKibanaPrivateDomain',
        'kibana_private_ip_whitelist' => 'getKibanaPrivateIpWhitelist',
        'kibana_public_domain' => 'getKibanaPublicDomain',
        'kibana_public_ip_whitelist' => 'getKibanaPublicIpWhitelist',
        'main_zone_id' => 'getMainZoneId',
        'maintenance_day' => 'getMaintenanceDay',
        'maintenance_time' => 'getMaintenanceTime',
        'resource_tags' => 'getResourceTags',
        'status' => 'getStatus',
        'sub_instances' => 'getSubInstances',
        'support_cold_node' => 'getSupportColdNode',
        'total_nodes' => 'getTotalNodes',
        'transfer_info' => 'getTransferInfo',
        'user_id' => 'getUserId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_INIT = 'Init';
    const STATUS_WAITING_PAID = 'WaitingPaid';
    const STATUS_WAIT_CREATE = 'WaitCreate';
    const STATUS_CREATING = 'Creating';
    const STATUS_RUNNING = 'Running';
    const STATUS_RESTARTING = 'Restarting';
    const STATUS_UPDATING = 'Updating';
    const STATUS_WAIT_SCALE = 'WaitScale';
    const STATUS_SCALING = 'Scaling';
    const STATUS_RESTORING = 'Restoring';
    const STATUS_UPGRADING = 'Upgrading';
    const STATUS_CLOSING = 'Closing';
    const STATUS_CLOSED = 'Closed';
    const STATUS_RECLAIMING = 'Reclaiming';
    const STATUS_RESUMING = 'Resuming';
    const STATUS_WAIT_RELEASE = 'WaitRelease';
    const STATUS_RELEASING = 'Releasing';
    const STATUS_RELEASED = 'Released';
    const STATUS_DELETED = 'Deleted';
    const STATUS_DESTROYING = 'Destroying';
    const STATUS_DESTROYED = 'Destroyed';
    const STATUS_CREATE_FAILED = 'CreateFailed';
    const STATUS_TASK_FAILED = 'TaskFailed';
    const STATUS_ERROR = 'Error';
    const STATUS_WARN = 'Warn';
    const STATUS_UNKNOWN = 'Unknown';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_INIT,
            self::STATUS_WAITING_PAID,
            self::STATUS_WAIT_CREATE,
            self::STATUS_CREATING,
            self::STATUS_RUNNING,
            self::STATUS_RESTARTING,
            self::STATUS_UPDATING,
            self::STATUS_WAIT_SCALE,
            self::STATUS_SCALING,
            self::STATUS_RESTORING,
            self::STATUS_UPGRADING,
            self::STATUS_CLOSING,
            self::STATUS_CLOSED,
            self::STATUS_RECLAIMING,
            self::STATUS_RESUMING,
            self::STATUS_WAIT_RELEASE,
            self::STATUS_RELEASING,
            self::STATUS_RELEASED,
            self::STATUS_DELETED,
            self::STATUS_DESTROYING,
            self::STATUS_DESTROYED,
            self::STATUS_CREATE_FAILED,
            self::STATUS_TASK_FAILED,
            self::STATUS_ERROR,
            self::STATUS_WARN,
            self::STATUS_UNKNOWN,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cerebro_enabled'] = isset($data['cerebro_enabled']) ? $data['cerebro_enabled'] : null;
        $this->container['cerebro_private_domain'] = isset($data['cerebro_private_domain']) ? $data['cerebro_private_domain'] : null;
        $this->container['cerebro_public_domain'] = isset($data['cerebro_public_domain']) ? $data['cerebro_public_domain'] : null;
        $this->container['charge_enabled'] = isset($data['charge_enabled']) ? $data['charge_enabled'] : null;
        $this->container['cluster_id'] = isset($data['cluster_id']) ? $data['cluster_id'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['deletion_protection'] = isset($data['deletion_protection']) ? $data['deletion_protection'] : null;
        $this->container['es_eip'] = isset($data['es_eip']) ? $data['es_eip'] : null;
        $this->container['es_eip_id'] = isset($data['es_eip_id']) ? $data['es_eip_id'] : null;
        $this->container['es_private_endpoint'] = isset($data['es_private_endpoint']) ? $data['es_private_endpoint'] : null;
        $this->container['es_private_ip_whitelist'] = isset($data['es_private_ip_whitelist']) ? $data['es_private_ip_whitelist'] : null;
        $this->container['es_public_endpoint'] = isset($data['es_public_endpoint']) ? $data['es_public_endpoint'] : null;
        $this->container['es_public_ip_whitelist'] = isset($data['es_public_ip_whitelist']) ? $data['es_public_ip_whitelist'] : null;
        $this->container['enable_es_private_domain_public'] = isset($data['enable_es_private_domain_public']) ? $data['enable_es_private_domain_public'] : null;
        $this->container['enable_es_private_network'] = isset($data['enable_es_private_network']) ? $data['enable_es_private_network'] : null;
        $this->container['enable_es_public_network'] = isset($data['enable_es_public_network']) ? $data['enable_es_public_network'] : null;
        $this->container['enable_kibana_private_domain_public'] = isset($data['enable_kibana_private_domain_public']) ? $data['enable_kibana_private_domain_public'] : null;
        $this->container['enable_kibana_private_network'] = isset($data['enable_kibana_private_network']) ? $data['enable_kibana_private_network'] : null;
        $this->container['enable_kibana_public_network'] = isset($data['enable_kibana_public_network']) ? $data['enable_kibana_public_network'] : null;
        $this->container['expire_date'] = isset($data['expire_date']) ? $data['expire_date'] : null;
        $this->container['instance_configuration'] = isset($data['instance_configuration']) ? $data['instance_configuration'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['kibana_config'] = isset($data['kibana_config']) ? $data['kibana_config'] : null;
        $this->container['kibana_eip'] = isset($data['kibana_eip']) ? $data['kibana_eip'] : null;
        $this->container['kibana_eip_id'] = isset($data['kibana_eip_id']) ? $data['kibana_eip_id'] : null;
        $this->container['kibana_private_domain'] = isset($data['kibana_private_domain']) ? $data['kibana_private_domain'] : null;
        $this->container['kibana_private_ip_whitelist'] = isset($data['kibana_private_ip_whitelist']) ? $data['kibana_private_ip_whitelist'] : null;
        $this->container['kibana_public_domain'] = isset($data['kibana_public_domain']) ? $data['kibana_public_domain'] : null;
        $this->container['kibana_public_ip_whitelist'] = isset($data['kibana_public_ip_whitelist']) ? $data['kibana_public_ip_whitelist'] : null;
        $this->container['main_zone_id'] = isset($data['main_zone_id']) ? $data['main_zone_id'] : null;
        $this->container['maintenance_day'] = isset($data['maintenance_day']) ? $data['maintenance_day'] : null;
        $this->container['maintenance_time'] = isset($data['maintenance_time']) ? $data['maintenance_time'] : null;
        $this->container['resource_tags'] = isset($data['resource_tags']) ? $data['resource_tags'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['sub_instances'] = isset($data['sub_instances']) ? $data['sub_instances'] : null;
        $this->container['support_cold_node'] = isset($data['support_cold_node']) ? $data['support_cold_node'] : null;
        $this->container['total_nodes'] = isset($data['total_nodes']) ? $data['total_nodes'] : null;
        $this->container['transfer_info'] = isset($data['transfer_info']) ? $data['transfer_info'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cerebro_enabled
     *
     * @return bool
     */
    public function getCerebroEnabled()
    {
        return $this->container['cerebro_enabled'];
    }

    /**
     * Sets cerebro_enabled
     *
     * @param bool $cerebro_enabled cerebro_enabled
     *
     * @return $this
     */
    public function setCerebroEnabled($cerebro_enabled)
    {
        $this->container['cerebro_enabled'] = $cerebro_enabled;

        return $this;
    }

    /**
     * Gets cerebro_private_domain
     *
     * @return string
     */
    public function getCerebroPrivateDomain()
    {
        return $this->container['cerebro_private_domain'];
    }

    /**
     * Sets cerebro_private_domain
     *
     * @param string $cerebro_private_domain cerebro_private_domain
     *
     * @return $this
     */
    public function setCerebroPrivateDomain($cerebro_private_domain)
    {
        $this->container['cerebro_private_domain'] = $cerebro_private_domain;

        return $this;
    }

    /**
     * Gets cerebro_public_domain
     *
     * @return string
     */
    public function getCerebroPublicDomain()
    {
        return $this->container['cerebro_public_domain'];
    }

    /**
     * Sets cerebro_public_domain
     *
     * @param string $cerebro_public_domain cerebro_public_domain
     *
     * @return $this
     */
    public function setCerebroPublicDomain($cerebro_public_domain)
    {
        $this->container['cerebro_public_domain'] = $cerebro_public_domain;

        return $this;
    }

    /**
     * Gets charge_enabled
     *
     * @return bool
     */
    public function getChargeEnabled()
    {
        return $this->container['charge_enabled'];
    }

    /**
     * Sets charge_enabled
     *
     * @param bool $charge_enabled charge_enabled
     *
     * @return $this
     */
    public function setChargeEnabled($charge_enabled)
    {
        $this->container['charge_enabled'] = $charge_enabled;

        return $this;
    }

    /**
     * Gets cluster_id
     *
     * @return string
     */
    public function getClusterId()
    {
        return $this->container['cluster_id'];
    }

    /**
     * Sets cluster_id
     *
     * @param string $cluster_id cluster_id
     *
     * @return $this
     */
    public function setClusterId($cluster_id)
    {
        $this->container['cluster_id'] = $cluster_id;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets deletion_protection
     *
     * @return bool
     */
    public function getDeletionProtection()
    {
        return $this->container['deletion_protection'];
    }

    /**
     * Sets deletion_protection
     *
     * @param bool $deletion_protection deletion_protection
     *
     * @return $this
     */
    public function setDeletionProtection($deletion_protection)
    {
        $this->container['deletion_protection'] = $deletion_protection;

        return $this;
    }

    /**
     * Gets es_eip
     *
     * @return string
     */
    public function getEsEip()
    {
        return $this->container['es_eip'];
    }

    /**
     * Sets es_eip
     *
     * @param string $es_eip es_eip
     *
     * @return $this
     */
    public function setEsEip($es_eip)
    {
        $this->container['es_eip'] = $es_eip;

        return $this;
    }

    /**
     * Gets es_eip_id
     *
     * @return string
     */
    public function getEsEipId()
    {
        return $this->container['es_eip_id'];
    }

    /**
     * Sets es_eip_id
     *
     * @param string $es_eip_id es_eip_id
     *
     * @return $this
     */
    public function setEsEipId($es_eip_id)
    {
        $this->container['es_eip_id'] = $es_eip_id;

        return $this;
    }

    /**
     * Gets es_private_endpoint
     *
     * @return string
     */
    public function getEsPrivateEndpoint()
    {
        return $this->container['es_private_endpoint'];
    }

    /**
     * Sets es_private_endpoint
     *
     * @param string $es_private_endpoint es_private_endpoint
     *
     * @return $this
     */
    public function setEsPrivateEndpoint($es_private_endpoint)
    {
        $this->container['es_private_endpoint'] = $es_private_endpoint;

        return $this;
    }

    /**
     * Gets es_private_ip_whitelist
     *
     * @return string
     */
    public function getEsPrivateIpWhitelist()
    {
        return $this->container['es_private_ip_whitelist'];
    }

    /**
     * Sets es_private_ip_whitelist
     *
     * @param string $es_private_ip_whitelist es_private_ip_whitelist
     *
     * @return $this
     */
    public function setEsPrivateIpWhitelist($es_private_ip_whitelist)
    {
        $this->container['es_private_ip_whitelist'] = $es_private_ip_whitelist;

        return $this;
    }

    /**
     * Gets es_public_endpoint
     *
     * @return string
     */
    public function getEsPublicEndpoint()
    {
        return $this->container['es_public_endpoint'];
    }

    /**
     * Sets es_public_endpoint
     *
     * @param string $es_public_endpoint es_public_endpoint
     *
     * @return $this
     */
    public function setEsPublicEndpoint($es_public_endpoint)
    {
        $this->container['es_public_endpoint'] = $es_public_endpoint;

        return $this;
    }

    /**
     * Gets es_public_ip_whitelist
     *
     * @return string
     */
    public function getEsPublicIpWhitelist()
    {
        return $this->container['es_public_ip_whitelist'];
    }

    /**
     * Sets es_public_ip_whitelist
     *
     * @param string $es_public_ip_whitelist es_public_ip_whitelist
     *
     * @return $this
     */
    public function setEsPublicIpWhitelist($es_public_ip_whitelist)
    {
        $this->container['es_public_ip_whitelist'] = $es_public_ip_whitelist;

        return $this;
    }

    /**
     * Gets enable_es_private_domain_public
     *
     * @return bool
     */
    public function getEnableEsPrivateDomainPublic()
    {
        return $this->container['enable_es_private_domain_public'];
    }

    /**
     * Sets enable_es_private_domain_public
     *
     * @param bool $enable_es_private_domain_public enable_es_private_domain_public
     *
     * @return $this
     */
    public function setEnableEsPrivateDomainPublic($enable_es_private_domain_public)
    {
        $this->container['enable_es_private_domain_public'] = $enable_es_private_domain_public;

        return $this;
    }

    /**
     * Gets enable_es_private_network
     *
     * @return bool
     */
    public function getEnableEsPrivateNetwork()
    {
        return $this->container['enable_es_private_network'];
    }

    /**
     * Sets enable_es_private_network
     *
     * @param bool $enable_es_private_network enable_es_private_network
     *
     * @return $this
     */
    public function setEnableEsPrivateNetwork($enable_es_private_network)
    {
        $this->container['enable_es_private_network'] = $enable_es_private_network;

        return $this;
    }

    /**
     * Gets enable_es_public_network
     *
     * @return bool
     */
    public function getEnableEsPublicNetwork()
    {
        return $this->container['enable_es_public_network'];
    }

    /**
     * Sets enable_es_public_network
     *
     * @param bool $enable_es_public_network enable_es_public_network
     *
     * @return $this
     */
    public function setEnableEsPublicNetwork($enable_es_public_network)
    {
        $this->container['enable_es_public_network'] = $enable_es_public_network;

        return $this;
    }

    /**
     * Gets enable_kibana_private_domain_public
     *
     * @return bool
     */
    public function getEnableKibanaPrivateDomainPublic()
    {
        return $this->container['enable_kibana_private_domain_public'];
    }

    /**
     * Sets enable_kibana_private_domain_public
     *
     * @param bool $enable_kibana_private_domain_public enable_kibana_private_domain_public
     *
     * @return $this
     */
    public function setEnableKibanaPrivateDomainPublic($enable_kibana_private_domain_public)
    {
        $this->container['enable_kibana_private_domain_public'] = $enable_kibana_private_domain_public;

        return $this;
    }

    /**
     * Gets enable_kibana_private_network
     *
     * @return bool
     */
    public function getEnableKibanaPrivateNetwork()
    {
        return $this->container['enable_kibana_private_network'];
    }

    /**
     * Sets enable_kibana_private_network
     *
     * @param bool $enable_kibana_private_network enable_kibana_private_network
     *
     * @return $this
     */
    public function setEnableKibanaPrivateNetwork($enable_kibana_private_network)
    {
        $this->container['enable_kibana_private_network'] = $enable_kibana_private_network;

        return $this;
    }

    /**
     * Gets enable_kibana_public_network
     *
     * @return bool
     */
    public function getEnableKibanaPublicNetwork()
    {
        return $this->container['enable_kibana_public_network'];
    }

    /**
     * Sets enable_kibana_public_network
     *
     * @param bool $enable_kibana_public_network enable_kibana_public_network
     *
     * @return $this
     */
    public function setEnableKibanaPublicNetwork($enable_kibana_public_network)
    {
        $this->container['enable_kibana_public_network'] = $enable_kibana_public_network;

        return $this;
    }

    /**
     * Gets expire_date
     *
     * @return string
     */
    public function getExpireDate()
    {
        return $this->container['expire_date'];
    }

    /**
     * Sets expire_date
     *
     * @param string $expire_date expire_date
     *
     * @return $this
     */
    public function setExpireDate($expire_date)
    {
        $this->container['expire_date'] = $expire_date;

        return $this;
    }

    /**
     * Gets instance_configuration
     *
     * @return \Volcengine\Escloud\Model\InstanceConfigurationForDescribeInstanceOutput
     */
    public function getInstanceConfiguration()
    {
        return $this->container['instance_configuration'];
    }

    /**
     * Sets instance_configuration
     *
     * @param \Volcengine\Escloud\Model\InstanceConfigurationForDescribeInstanceOutput $instance_configuration instance_configuration
     *
     * @return $this
     */
    public function setInstanceConfiguration($instance_configuration)
    {
        $this->container['instance_configuration'] = $instance_configuration;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets kibana_config
     *
     * @return \Volcengine\Escloud\Model\KibanaConfigForDescribeInstanceOutput
     */
    public function getKibanaConfig()
    {
        return $this->container['kibana_config'];
    }

    /**
     * Sets kibana_config
     *
     * @param \Volcengine\Escloud\Model\KibanaConfigForDescribeInstanceOutput $kibana_config kibana_config
     *
     * @return $this
     */
    public function setKibanaConfig($kibana_config)
    {
        $this->container['kibana_config'] = $kibana_config;

        return $this;
    }

    /**
     * Gets kibana_eip
     *
     * @return string
     */
    public function getKibanaEip()
    {
        return $this->container['kibana_eip'];
    }

    /**
     * Sets kibana_eip
     *
     * @param string $kibana_eip kibana_eip
     *
     * @return $this
     */
    public function setKibanaEip($kibana_eip)
    {
        $this->container['kibana_eip'] = $kibana_eip;

        return $this;
    }

    /**
     * Gets kibana_eip_id
     *
     * @return string
     */
    public function getKibanaEipId()
    {
        return $this->container['kibana_eip_id'];
    }

    /**
     * Sets kibana_eip_id
     *
     * @param string $kibana_eip_id kibana_eip_id
     *
     * @return $this
     */
    public function setKibanaEipId($kibana_eip_id)
    {
        $this->container['kibana_eip_id'] = $kibana_eip_id;

        return $this;
    }

    /**
     * Gets kibana_private_domain
     *
     * @return string
     */
    public function getKibanaPrivateDomain()
    {
        return $this->container['kibana_private_domain'];
    }

    /**
     * Sets kibana_private_domain
     *
     * @param string $kibana_private_domain kibana_private_domain
     *
     * @return $this
     */
    public function setKibanaPrivateDomain($kibana_private_domain)
    {
        $this->container['kibana_private_domain'] = $kibana_private_domain;

        return $this;
    }

    /**
     * Gets kibana_private_ip_whitelist
     *
     * @return string
     */
    public function getKibanaPrivateIpWhitelist()
    {
        return $this->container['kibana_private_ip_whitelist'];
    }

    /**
     * Sets kibana_private_ip_whitelist
     *
     * @param string $kibana_private_ip_whitelist kibana_private_ip_whitelist
     *
     * @return $this
     */
    public function setKibanaPrivateIpWhitelist($kibana_private_ip_whitelist)
    {
        $this->container['kibana_private_ip_whitelist'] = $kibana_private_ip_whitelist;

        return $this;
    }

    /**
     * Gets kibana_public_domain
     *
     * @return string
     */
    public function getKibanaPublicDomain()
    {
        return $this->container['kibana_public_domain'];
    }

    /**
     * Sets kibana_public_domain
     *
     * @param string $kibana_public_domain kibana_public_domain
     *
     * @return $this
     */
    public function setKibanaPublicDomain($kibana_public_domain)
    {
        $this->container['kibana_public_domain'] = $kibana_public_domain;

        return $this;
    }

    /**
     * Gets kibana_public_ip_whitelist
     *
     * @return string
     */
    public function getKibanaPublicIpWhitelist()
    {
        return $this->container['kibana_public_ip_whitelist'];
    }

    /**
     * Sets kibana_public_ip_whitelist
     *
     * @param string $kibana_public_ip_whitelist kibana_public_ip_whitelist
     *
     * @return $this
     */
    public function setKibanaPublicIpWhitelist($kibana_public_ip_whitelist)
    {
        $this->container['kibana_public_ip_whitelist'] = $kibana_public_ip_whitelist;

        return $this;
    }

    /**
     * Gets main_zone_id
     *
     * @return string
     */
    public function getMainZoneId()
    {
        return $this->container['main_zone_id'];
    }

    /**
     * Sets main_zone_id
     *
     * @param string $main_zone_id main_zone_id
     *
     * @return $this
     */
    public function setMainZoneId($main_zone_id)
    {
        $this->container['main_zone_id'] = $main_zone_id;

        return $this;
    }

    /**
     * Gets maintenance_day
     *
     * @return string[]
     */
    public function getMaintenanceDay()
    {
        return $this->container['maintenance_day'];
    }

    /**
     * Sets maintenance_day
     *
     * @param string[] $maintenance_day maintenance_day
     *
     * @return $this
     */
    public function setMaintenanceDay($maintenance_day)
    {
        $this->container['maintenance_day'] = $maintenance_day;

        return $this;
    }

    /**
     * Gets maintenance_time
     *
     * @return string
     */
    public function getMaintenanceTime()
    {
        return $this->container['maintenance_time'];
    }

    /**
     * Sets maintenance_time
     *
     * @param string $maintenance_time maintenance_time
     *
     * @return $this
     */
    public function setMaintenanceTime($maintenance_time)
    {
        $this->container['maintenance_time'] = $maintenance_time;

        return $this;
    }

    /**
     * Gets resource_tags
     *
     * @return \Volcengine\Escloud\Model\ResourceTagForDescribeInstanceOutput[]
     */
    public function getResourceTags()
    {
        return $this->container['resource_tags'];
    }

    /**
     * Sets resource_tags
     *
     * @param \Volcengine\Escloud\Model\ResourceTagForDescribeInstanceOutput[] $resource_tags resource_tags
     *
     * @return $this
     */
    public function setResourceTags($resource_tags)
    {
        $this->container['resource_tags'] = $resource_tags;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets sub_instances
     *
     * @return \Volcengine\Escloud\Model\SubInstanceForDescribeInstanceOutput[]
     */
    public function getSubInstances()
    {
        return $this->container['sub_instances'];
    }

    /**
     * Sets sub_instances
     *
     * @param \Volcengine\Escloud\Model\SubInstanceForDescribeInstanceOutput[] $sub_instances sub_instances
     *
     * @return $this
     */
    public function setSubInstances($sub_instances)
    {
        $this->container['sub_instances'] = $sub_instances;

        return $this;
    }

    /**
     * Gets support_cold_node
     *
     * @return bool
     */
    public function getSupportColdNode()
    {
        return $this->container['support_cold_node'];
    }

    /**
     * Sets support_cold_node
     *
     * @param bool $support_cold_node support_cold_node
     *
     * @return $this
     */
    public function setSupportColdNode($support_cold_node)
    {
        $this->container['support_cold_node'] = $support_cold_node;

        return $this;
    }

    /**
     * Gets total_nodes
     *
     * @return int
     */
    public function getTotalNodes()
    {
        return $this->container['total_nodes'];
    }

    /**
     * Sets total_nodes
     *
     * @param int $total_nodes total_nodes
     *
     * @return $this
     */
    public function setTotalNodes($total_nodes)
    {
        $this->container['total_nodes'] = $total_nodes;

        return $this;
    }

    /**
     * Gets transfer_info
     *
     * @return \Volcengine\Escloud\Model\TransferInfoForDescribeInstanceOutput
     */
    public function getTransferInfo()
    {
        return $this->container['transfer_info'];
    }

    /**
     * Sets transfer_info
     *
     * @param \Volcengine\Escloud\Model\TransferInfoForDescribeInstanceOutput $transfer_info transfer_info
     *
     * @return $this
     */
    public function setTransferInfo($transfer_info)
    {
        $this->container['transfer_info'] = $transfer_info;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

