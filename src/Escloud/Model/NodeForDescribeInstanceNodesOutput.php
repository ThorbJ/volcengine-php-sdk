<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Escloud\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class NodeForDescribeInstanceNodesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NodeForDescribeInstanceNodesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'instance_id' => 'string',
        'is_cold' => 'bool',
        'is_coordinator' => 'bool',
        'is_hot' => 'bool',
        'is_kibana' => 'bool',
        'is_master' => 'bool',
        'is_warm' => 'bool',
        'node_display_name' => 'string',
        'node_name' => 'string',
        'resource_spec' => '\Volcengine\Escloud\Model\ResourceSpecForDescribeInstanceNodesOutput',
        'restart_number' => 'int',
        'start_time' => 'string',
        'status' => 'string',
        'storage_spec' => '\Volcengine\Escloud\Model\StorageSpecForDescribeInstanceNodesOutput'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'instance_id' => null,
        'is_cold' => null,
        'is_coordinator' => null,
        'is_hot' => null,
        'is_kibana' => null,
        'is_master' => null,
        'is_warm' => null,
        'node_display_name' => null,
        'node_name' => null,
        'resource_spec' => null,
        'restart_number' => 'int32',
        'start_time' => null,
        'status' => null,
        'storage_spec' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'instance_id' => 'InstanceId',
        'is_cold' => 'IsCold',
        'is_coordinator' => 'IsCoordinator',
        'is_hot' => 'IsHot',
        'is_kibana' => 'IsKibana',
        'is_master' => 'IsMaster',
        'is_warm' => 'IsWarm',
        'node_display_name' => 'NodeDisplayName',
        'node_name' => 'NodeName',
        'resource_spec' => 'ResourceSpec',
        'restart_number' => 'RestartNumber',
        'start_time' => 'StartTime',
        'status' => 'Status',
        'storage_spec' => 'StorageSpec'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'instance_id' => 'setInstanceId',
        'is_cold' => 'setIsCold',
        'is_coordinator' => 'setIsCoordinator',
        'is_hot' => 'setIsHot',
        'is_kibana' => 'setIsKibana',
        'is_master' => 'setIsMaster',
        'is_warm' => 'setIsWarm',
        'node_display_name' => 'setNodeDisplayName',
        'node_name' => 'setNodeName',
        'resource_spec' => 'setResourceSpec',
        'restart_number' => 'setRestartNumber',
        'start_time' => 'setStartTime',
        'status' => 'setStatus',
        'storage_spec' => 'setStorageSpec'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'instance_id' => 'getInstanceId',
        'is_cold' => 'getIsCold',
        'is_coordinator' => 'getIsCoordinator',
        'is_hot' => 'getIsHot',
        'is_kibana' => 'getIsKibana',
        'is_master' => 'getIsMaster',
        'is_warm' => 'getIsWarm',
        'node_display_name' => 'getNodeDisplayName',
        'node_name' => 'getNodeName',
        'resource_spec' => 'getResourceSpec',
        'restart_number' => 'getRestartNumber',
        'start_time' => 'getStartTime',
        'status' => 'getStatus',
        'storage_spec' => 'getStorageSpec'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['is_cold'] = isset($data['is_cold']) ? $data['is_cold'] : null;
        $this->container['is_coordinator'] = isset($data['is_coordinator']) ? $data['is_coordinator'] : null;
        $this->container['is_hot'] = isset($data['is_hot']) ? $data['is_hot'] : null;
        $this->container['is_kibana'] = isset($data['is_kibana']) ? $data['is_kibana'] : null;
        $this->container['is_master'] = isset($data['is_master']) ? $data['is_master'] : null;
        $this->container['is_warm'] = isset($data['is_warm']) ? $data['is_warm'] : null;
        $this->container['node_display_name'] = isset($data['node_display_name']) ? $data['node_display_name'] : null;
        $this->container['node_name'] = isset($data['node_name']) ? $data['node_name'] : null;
        $this->container['resource_spec'] = isset($data['resource_spec']) ? $data['resource_spec'] : null;
        $this->container['restart_number'] = isset($data['restart_number']) ? $data['restart_number'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['storage_spec'] = isset($data['storage_spec']) ? $data['storage_spec'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets is_cold
     *
     * @return bool
     */
    public function getIsCold()
    {
        return $this->container['is_cold'];
    }

    /**
     * Sets is_cold
     *
     * @param bool $is_cold is_cold
     *
     * @return $this
     */
    public function setIsCold($is_cold)
    {
        $this->container['is_cold'] = $is_cold;

        return $this;
    }

    /**
     * Gets is_coordinator
     *
     * @return bool
     */
    public function getIsCoordinator()
    {
        return $this->container['is_coordinator'];
    }

    /**
     * Sets is_coordinator
     *
     * @param bool $is_coordinator is_coordinator
     *
     * @return $this
     */
    public function setIsCoordinator($is_coordinator)
    {
        $this->container['is_coordinator'] = $is_coordinator;

        return $this;
    }

    /**
     * Gets is_hot
     *
     * @return bool
     */
    public function getIsHot()
    {
        return $this->container['is_hot'];
    }

    /**
     * Sets is_hot
     *
     * @param bool $is_hot is_hot
     *
     * @return $this
     */
    public function setIsHot($is_hot)
    {
        $this->container['is_hot'] = $is_hot;

        return $this;
    }

    /**
     * Gets is_kibana
     *
     * @return bool
     */
    public function getIsKibana()
    {
        return $this->container['is_kibana'];
    }

    /**
     * Sets is_kibana
     *
     * @param bool $is_kibana is_kibana
     *
     * @return $this
     */
    public function setIsKibana($is_kibana)
    {
        $this->container['is_kibana'] = $is_kibana;

        return $this;
    }

    /**
     * Gets is_master
     *
     * @return bool
     */
    public function getIsMaster()
    {
        return $this->container['is_master'];
    }

    /**
     * Sets is_master
     *
     * @param bool $is_master is_master
     *
     * @return $this
     */
    public function setIsMaster($is_master)
    {
        $this->container['is_master'] = $is_master;

        return $this;
    }

    /**
     * Gets is_warm
     *
     * @return bool
     */
    public function getIsWarm()
    {
        return $this->container['is_warm'];
    }

    /**
     * Sets is_warm
     *
     * @param bool $is_warm is_warm
     *
     * @return $this
     */
    public function setIsWarm($is_warm)
    {
        $this->container['is_warm'] = $is_warm;

        return $this;
    }

    /**
     * Gets node_display_name
     *
     * @return string
     */
    public function getNodeDisplayName()
    {
        return $this->container['node_display_name'];
    }

    /**
     * Sets node_display_name
     *
     * @param string $node_display_name node_display_name
     *
     * @return $this
     */
    public function setNodeDisplayName($node_display_name)
    {
        $this->container['node_display_name'] = $node_display_name;

        return $this;
    }

    /**
     * Gets node_name
     *
     * @return string
     */
    public function getNodeName()
    {
        return $this->container['node_name'];
    }

    /**
     * Sets node_name
     *
     * @param string $node_name node_name
     *
     * @return $this
     */
    public function setNodeName($node_name)
    {
        $this->container['node_name'] = $node_name;

        return $this;
    }

    /**
     * Gets resource_spec
     *
     * @return \Volcengine\Escloud\Model\ResourceSpecForDescribeInstanceNodesOutput
     */
    public function getResourceSpec()
    {
        return $this->container['resource_spec'];
    }

    /**
     * Sets resource_spec
     *
     * @param \Volcengine\Escloud\Model\ResourceSpecForDescribeInstanceNodesOutput $resource_spec resource_spec
     *
     * @return $this
     */
    public function setResourceSpec($resource_spec)
    {
        $this->container['resource_spec'] = $resource_spec;

        return $this;
    }

    /**
     * Gets restart_number
     *
     * @return int
     */
    public function getRestartNumber()
    {
        return $this->container['restart_number'];
    }

    /**
     * Sets restart_number
     *
     * @param int $restart_number restart_number
     *
     * @return $this
     */
    public function setRestartNumber($restart_number)
    {
        $this->container['restart_number'] = $restart_number;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return string
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param string $start_time start_time
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets storage_spec
     *
     * @return \Volcengine\Escloud\Model\StorageSpecForDescribeInstanceNodesOutput
     */
    public function getStorageSpec()
    {
        return $this->container['storage_spec'];
    }

    /**
     * Sets storage_spec
     *
     * @param \Volcengine\Escloud\Model\StorageSpecForDescribeInstanceNodesOutput $storage_spec storage_spec
     *
     * @return $this
     */
    public function setStorageSpec($storage_spec)
    {
        $this->container['storage_spec'] = $storage_spec;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

