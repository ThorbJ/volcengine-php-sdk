<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Escloud\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class NodeSpecsAssignForCreateInstanceInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NodeSpecsAssignForCreateInstanceInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'extra_performance' => '\Volcengine\Escloud\Model\ExtraPerformanceForCreateInstanceInput',
        'number' => 'int',
        'resource_spec_name' => 'string',
        'storage_size' => 'int',
        'storage_spec_name' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'extra_performance' => null,
        'number' => 'int32',
        'resource_spec_name' => null,
        'storage_size' => 'int32',
        'storage_spec_name' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'extra_performance' => 'ExtraPerformance',
        'number' => 'Number',
        'resource_spec_name' => 'ResourceSpecName',
        'storage_size' => 'StorageSize',
        'storage_spec_name' => 'StorageSpecName',
        'type' => 'Type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'extra_performance' => 'setExtraPerformance',
        'number' => 'setNumber',
        'resource_spec_name' => 'setResourceSpecName',
        'storage_size' => 'setStorageSize',
        'storage_spec_name' => 'setStorageSpecName',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'extra_performance' => 'getExtraPerformance',
        'number' => 'getNumber',
        'resource_spec_name' => 'getResourceSpecName',
        'storage_size' => 'getStorageSize',
        'storage_spec_name' => 'getStorageSpecName',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_MASTER = 'Master';
    const TYPE_KIBANA = 'Kibana';
    const TYPE_HOT = 'Hot';
    const TYPE_WARM = 'Warm';
    const TYPE_COLD = 'Cold';
    const TYPE_COORDINATOR = 'Coordinator';
    const TYPE_OTHER = 'Other';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_MASTER,
            self::TYPE_KIBANA,
            self::TYPE_HOT,
            self::TYPE_WARM,
            self::TYPE_COLD,
            self::TYPE_COORDINATOR,
            self::TYPE_OTHER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['extra_performance'] = isset($data['extra_performance']) ? $data['extra_performance'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['resource_spec_name'] = isset($data['resource_spec_name']) ? $data['resource_spec_name'] : null;
        $this->container['storage_size'] = isset($data['storage_size']) ? $data['storage_size'] : null;
        $this->container['storage_spec_name'] = isset($data['storage_spec_name']) ? $data['storage_spec_name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets extra_performance
     *
     * @return \Volcengine\Escloud\Model\ExtraPerformanceForCreateInstanceInput
     */
    public function getExtraPerformance()
    {
        return $this->container['extra_performance'];
    }

    /**
     * Sets extra_performance
     *
     * @param \Volcengine\Escloud\Model\ExtraPerformanceForCreateInstanceInput $extra_performance extra_performance
     *
     * @return $this
     */
    public function setExtraPerformance($extra_performance)
    {
        $this->container['extra_performance'] = $extra_performance;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets resource_spec_name
     *
     * @return string
     */
    public function getResourceSpecName()
    {
        return $this->container['resource_spec_name'];
    }

    /**
     * Sets resource_spec_name
     *
     * @param string $resource_spec_name resource_spec_name
     *
     * @return $this
     */
    public function setResourceSpecName($resource_spec_name)
    {
        $this->container['resource_spec_name'] = $resource_spec_name;

        return $this;
    }

    /**
     * Gets storage_size
     *
     * @return int
     */
    public function getStorageSize()
    {
        return $this->container['storage_size'];
    }

    /**
     * Sets storage_size
     *
     * @param int $storage_size storage_size
     *
     * @return $this
     */
    public function setStorageSize($storage_size)
    {
        $this->container['storage_size'] = $storage_size;

        return $this;
    }

    /**
     * Gets storage_spec_name
     *
     * @return string
     */
    public function getStorageSpecName()
    {
        return $this->container['storage_spec_name'];
    }

    /**
     * Sets storage_spec_name
     *
     * @param string $storage_spec_name storage_spec_name
     *
     * @return $this
     */
    public function setStorageSpecName($storage_spec_name)
    {
        $this->container['storage_spec_name'] = $storage_spec_name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

