<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vefaas\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class GetImageSyncStatusResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetImageSyncStatusResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'description' => 'string',
        'end_time' => 'string',
        'image_cache_description' => 'string',
        'image_cache_enabled' => 'bool',
        'image_cache_expire_date_time' => 'string',
        'image_cache_status' => 'string',
        'image_preload_enabled' => 'bool',
        'image_preload_status' => 'string',
        'start_time' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'description' => null,
        'end_time' => null,
        'image_cache_description' => null,
        'image_cache_enabled' => null,
        'image_cache_expire_date_time' => null,
        'image_cache_status' => null,
        'image_preload_enabled' => null,
        'image_preload_status' => null,
        'start_time' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'Description',
        'end_time' => 'EndTime',
        'image_cache_description' => 'ImageCacheDescription',
        'image_cache_enabled' => 'ImageCacheEnabled',
        'image_cache_expire_date_time' => 'ImageCacheExpireDateTime',
        'image_cache_status' => 'ImageCacheStatus',
        'image_preload_enabled' => 'ImagePreloadEnabled',
        'image_preload_status' => 'ImagePreloadStatus',
        'start_time' => 'StartTime',
        'status' => 'Status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'end_time' => 'setEndTime',
        'image_cache_description' => 'setImageCacheDescription',
        'image_cache_enabled' => 'setImageCacheEnabled',
        'image_cache_expire_date_time' => 'setImageCacheExpireDateTime',
        'image_cache_status' => 'setImageCacheStatus',
        'image_preload_enabled' => 'setImagePreloadEnabled',
        'image_preload_status' => 'setImagePreloadStatus',
        'start_time' => 'setStartTime',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'end_time' => 'getEndTime',
        'image_cache_description' => 'getImageCacheDescription',
        'image_cache_enabled' => 'getImageCacheEnabled',
        'image_cache_expire_date_time' => 'getImageCacheExpireDateTime',
        'image_cache_status' => 'getImageCacheStatus',
        'image_preload_enabled' => 'getImagePreloadEnabled',
        'image_preload_status' => 'getImagePreloadStatus',
        'start_time' => 'getStartTime',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['end_time'] = isset($data['end_time']) ? $data['end_time'] : null;
        $this->container['image_cache_description'] = isset($data['image_cache_description']) ? $data['image_cache_description'] : null;
        $this->container['image_cache_enabled'] = isset($data['image_cache_enabled']) ? $data['image_cache_enabled'] : null;
        $this->container['image_cache_expire_date_time'] = isset($data['image_cache_expire_date_time']) ? $data['image_cache_expire_date_time'] : null;
        $this->container['image_cache_status'] = isset($data['image_cache_status']) ? $data['image_cache_status'] : null;
        $this->container['image_preload_enabled'] = isset($data['image_preload_enabled']) ? $data['image_preload_enabled'] : null;
        $this->container['image_preload_status'] = isset($data['image_preload_status']) ? $data['image_preload_status'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return string
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param string $end_time end_time
     *
     * @return $this
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets image_cache_description
     *
     * @return string
     */
    public function getImageCacheDescription()
    {
        return $this->container['image_cache_description'];
    }

    /**
     * Sets image_cache_description
     *
     * @param string $image_cache_description image_cache_description
     *
     * @return $this
     */
    public function setImageCacheDescription($image_cache_description)
    {
        $this->container['image_cache_description'] = $image_cache_description;

        return $this;
    }

    /**
     * Gets image_cache_enabled
     *
     * @return bool
     */
    public function getImageCacheEnabled()
    {
        return $this->container['image_cache_enabled'];
    }

    /**
     * Sets image_cache_enabled
     *
     * @param bool $image_cache_enabled image_cache_enabled
     *
     * @return $this
     */
    public function setImageCacheEnabled($image_cache_enabled)
    {
        $this->container['image_cache_enabled'] = $image_cache_enabled;

        return $this;
    }

    /**
     * Gets image_cache_expire_date_time
     *
     * @return string
     */
    public function getImageCacheExpireDateTime()
    {
        return $this->container['image_cache_expire_date_time'];
    }

    /**
     * Sets image_cache_expire_date_time
     *
     * @param string $image_cache_expire_date_time image_cache_expire_date_time
     *
     * @return $this
     */
    public function setImageCacheExpireDateTime($image_cache_expire_date_time)
    {
        $this->container['image_cache_expire_date_time'] = $image_cache_expire_date_time;

        return $this;
    }

    /**
     * Gets image_cache_status
     *
     * @return string
     */
    public function getImageCacheStatus()
    {
        return $this->container['image_cache_status'];
    }

    /**
     * Sets image_cache_status
     *
     * @param string $image_cache_status image_cache_status
     *
     * @return $this
     */
    public function setImageCacheStatus($image_cache_status)
    {
        $this->container['image_cache_status'] = $image_cache_status;

        return $this;
    }

    /**
     * Gets image_preload_enabled
     *
     * @return bool
     */
    public function getImagePreloadEnabled()
    {
        return $this->container['image_preload_enabled'];
    }

    /**
     * Sets image_preload_enabled
     *
     * @param bool $image_preload_enabled image_preload_enabled
     *
     * @return $this
     */
    public function setImagePreloadEnabled($image_preload_enabled)
    {
        $this->container['image_preload_enabled'] = $image_preload_enabled;

        return $this;
    }

    /**
     * Gets image_preload_status
     *
     * @return string
     */
    public function getImagePreloadStatus()
    {
        return $this->container['image_preload_status'];
    }

    /**
     * Sets image_preload_status
     *
     * @param string $image_preload_status image_preload_status
     *
     * @return $this
     */
    public function setImagePreloadStatus($image_preload_status)
    {
        $this->container['image_preload_status'] = $image_preload_status;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return string
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param string $start_time start_time
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

