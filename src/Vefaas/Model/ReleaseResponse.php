<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vefaas\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ReleaseResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReleaseResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'current_traffic_weight' => 'int',
        'error_code' => 'string',
        'failed_instance_logs' => 'string',
        'function_id' => 'string',
        'new_revision_number' => 'int',
        'old_revision_number' => 'int',
        'release_record_id' => 'string',
        'stable_revision_number' => 'int',
        'start_time' => 'string',
        'status' => 'string',
        'status_message' => 'string',
        'target_traffic_weight' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'current_traffic_weight' => 'int32',
        'error_code' => null,
        'failed_instance_logs' => null,
        'function_id' => null,
        'new_revision_number' => 'int32',
        'old_revision_number' => 'int32',
        'release_record_id' => null,
        'stable_revision_number' => 'int32',
        'start_time' => null,
        'status' => null,
        'status_message' => null,
        'target_traffic_weight' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'current_traffic_weight' => 'CurrentTrafficWeight',
        'error_code' => 'ErrorCode',
        'failed_instance_logs' => 'FailedInstanceLogs',
        'function_id' => 'FunctionId',
        'new_revision_number' => 'NewRevisionNumber',
        'old_revision_number' => 'OldRevisionNumber',
        'release_record_id' => 'ReleaseRecordId',
        'stable_revision_number' => 'StableRevisionNumber',
        'start_time' => 'StartTime',
        'status' => 'Status',
        'status_message' => 'StatusMessage',
        'target_traffic_weight' => 'TargetTrafficWeight'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'current_traffic_weight' => 'setCurrentTrafficWeight',
        'error_code' => 'setErrorCode',
        'failed_instance_logs' => 'setFailedInstanceLogs',
        'function_id' => 'setFunctionId',
        'new_revision_number' => 'setNewRevisionNumber',
        'old_revision_number' => 'setOldRevisionNumber',
        'release_record_id' => 'setReleaseRecordId',
        'stable_revision_number' => 'setStableRevisionNumber',
        'start_time' => 'setStartTime',
        'status' => 'setStatus',
        'status_message' => 'setStatusMessage',
        'target_traffic_weight' => 'setTargetTrafficWeight'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'current_traffic_weight' => 'getCurrentTrafficWeight',
        'error_code' => 'getErrorCode',
        'failed_instance_logs' => 'getFailedInstanceLogs',
        'function_id' => 'getFunctionId',
        'new_revision_number' => 'getNewRevisionNumber',
        'old_revision_number' => 'getOldRevisionNumber',
        'release_record_id' => 'getReleaseRecordId',
        'stable_revision_number' => 'getStableRevisionNumber',
        'start_time' => 'getStartTime',
        'status' => 'getStatus',
        'status_message' => 'getStatusMessage',
        'target_traffic_weight' => 'getTargetTrafficWeight'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['current_traffic_weight'] = isset($data['current_traffic_weight']) ? $data['current_traffic_weight'] : null;
        $this->container['error_code'] = isset($data['error_code']) ? $data['error_code'] : null;
        $this->container['failed_instance_logs'] = isset($data['failed_instance_logs']) ? $data['failed_instance_logs'] : null;
        $this->container['function_id'] = isset($data['function_id']) ? $data['function_id'] : null;
        $this->container['new_revision_number'] = isset($data['new_revision_number']) ? $data['new_revision_number'] : null;
        $this->container['old_revision_number'] = isset($data['old_revision_number']) ? $data['old_revision_number'] : null;
        $this->container['release_record_id'] = isset($data['release_record_id']) ? $data['release_record_id'] : null;
        $this->container['stable_revision_number'] = isset($data['stable_revision_number']) ? $data['stable_revision_number'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['status_message'] = isset($data['status_message']) ? $data['status_message'] : null;
        $this->container['target_traffic_weight'] = isset($data['target_traffic_weight']) ? $data['target_traffic_weight'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets current_traffic_weight
     *
     * @return int
     */
    public function getCurrentTrafficWeight()
    {
        return $this->container['current_traffic_weight'];
    }

    /**
     * Sets current_traffic_weight
     *
     * @param int $current_traffic_weight current_traffic_weight
     *
     * @return $this
     */
    public function setCurrentTrafficWeight($current_traffic_weight)
    {
        $this->container['current_traffic_weight'] = $current_traffic_weight;

        return $this;
    }

    /**
     * Gets error_code
     *
     * @return string
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     *
     * @param string $error_code error_code
     *
     * @return $this
     */
    public function setErrorCode($error_code)
    {
        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets failed_instance_logs
     *
     * @return string
     */
    public function getFailedInstanceLogs()
    {
        return $this->container['failed_instance_logs'];
    }

    /**
     * Sets failed_instance_logs
     *
     * @param string $failed_instance_logs failed_instance_logs
     *
     * @return $this
     */
    public function setFailedInstanceLogs($failed_instance_logs)
    {
        $this->container['failed_instance_logs'] = $failed_instance_logs;

        return $this;
    }

    /**
     * Gets function_id
     *
     * @return string
     */
    public function getFunctionId()
    {
        return $this->container['function_id'];
    }

    /**
     * Sets function_id
     *
     * @param string $function_id function_id
     *
     * @return $this
     */
    public function setFunctionId($function_id)
    {
        $this->container['function_id'] = $function_id;

        return $this;
    }

    /**
     * Gets new_revision_number
     *
     * @return int
     */
    public function getNewRevisionNumber()
    {
        return $this->container['new_revision_number'];
    }

    /**
     * Sets new_revision_number
     *
     * @param int $new_revision_number new_revision_number
     *
     * @return $this
     */
    public function setNewRevisionNumber($new_revision_number)
    {
        $this->container['new_revision_number'] = $new_revision_number;

        return $this;
    }

    /**
     * Gets old_revision_number
     *
     * @return int
     */
    public function getOldRevisionNumber()
    {
        return $this->container['old_revision_number'];
    }

    /**
     * Sets old_revision_number
     *
     * @param int $old_revision_number old_revision_number
     *
     * @return $this
     */
    public function setOldRevisionNumber($old_revision_number)
    {
        $this->container['old_revision_number'] = $old_revision_number;

        return $this;
    }

    /**
     * Gets release_record_id
     *
     * @return string
     */
    public function getReleaseRecordId()
    {
        return $this->container['release_record_id'];
    }

    /**
     * Sets release_record_id
     *
     * @param string $release_record_id release_record_id
     *
     * @return $this
     */
    public function setReleaseRecordId($release_record_id)
    {
        $this->container['release_record_id'] = $release_record_id;

        return $this;
    }

    /**
     * Gets stable_revision_number
     *
     * @return int
     */
    public function getStableRevisionNumber()
    {
        return $this->container['stable_revision_number'];
    }

    /**
     * Sets stable_revision_number
     *
     * @param int $stable_revision_number stable_revision_number
     *
     * @return $this
     */
    public function setStableRevisionNumber($stable_revision_number)
    {
        $this->container['stable_revision_number'] = $stable_revision_number;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return string
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param string $start_time start_time
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_message
     *
     * @return string
     */
    public function getStatusMessage()
    {
        return $this->container['status_message'];
    }

    /**
     * Sets status_message
     *
     * @param string $status_message status_message
     *
     * @return $this
     */
    public function setStatusMessage($status_message)
    {
        $this->container['status_message'] = $status_message;

        return $this;
    }

    /**
     * Gets target_traffic_weight
     *
     * @return int
     */
    public function getTargetTrafficWeight()
    {
        return $this->container['target_traffic_weight'];
    }

    /**
     * Sets target_traffic_weight
     *
     * @param int $target_traffic_weight target_traffic_weight
     *
     * @return $this
     */
    public function setTargetTrafficWeight($target_traffic_weight)
    {
        $this->container['target_traffic_weight'] = $target_traffic_weight;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

