<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Waf\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class RuleDetailForListVulnerabilityRuleOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RuleDetailForListVulnerabilityRuleOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accuracy' => 'int',
        'cveid' => 'string',
        'custom_system_rule_switch' => 'int',
        'description' => 'string',
        'risk_level' => 'int',
        'rule_id' => 'int',
        'rule_name' => 'string',
        'rule_set_name' => 'string',
        'rule_tag' => 'string',
        'rule_type' => 'string',
        'subcategory' => 'string',
        'update_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accuracy' => 'int32',
        'cveid' => null,
        'custom_system_rule_switch' => 'int32',
        'description' => null,
        'risk_level' => 'int32',
        'rule_id' => 'int32',
        'rule_name' => null,
        'rule_set_name' => null,
        'rule_tag' => null,
        'rule_type' => null,
        'subcategory' => null,
        'update_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accuracy' => 'Accuracy',
        'cveid' => 'CVEID',
        'custom_system_rule_switch' => 'CustomSystemRuleSwitch',
        'description' => 'Description',
        'risk_level' => 'RiskLevel',
        'rule_id' => 'RuleID',
        'rule_name' => 'RuleName',
        'rule_set_name' => 'RuleSetName',
        'rule_tag' => 'RuleTag',
        'rule_type' => 'RuleType',
        'subcategory' => 'Subcategory',
        'update_time' => 'UpdateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accuracy' => 'setAccuracy',
        'cveid' => 'setCveid',
        'custom_system_rule_switch' => 'setCustomSystemRuleSwitch',
        'description' => 'setDescription',
        'risk_level' => 'setRiskLevel',
        'rule_id' => 'setRuleId',
        'rule_name' => 'setRuleName',
        'rule_set_name' => 'setRuleSetName',
        'rule_tag' => 'setRuleTag',
        'rule_type' => 'setRuleType',
        'subcategory' => 'setSubcategory',
        'update_time' => 'setUpdateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accuracy' => 'getAccuracy',
        'cveid' => 'getCveid',
        'custom_system_rule_switch' => 'getCustomSystemRuleSwitch',
        'description' => 'getDescription',
        'risk_level' => 'getRiskLevel',
        'rule_id' => 'getRuleId',
        'rule_name' => 'getRuleName',
        'rule_set_name' => 'getRuleSetName',
        'rule_tag' => 'getRuleTag',
        'rule_type' => 'getRuleType',
        'subcategory' => 'getSubcategory',
        'update_time' => 'getUpdateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accuracy'] = isset($data['accuracy']) ? $data['accuracy'] : null;
        $this->container['cveid'] = isset($data['cveid']) ? $data['cveid'] : null;
        $this->container['custom_system_rule_switch'] = isset($data['custom_system_rule_switch']) ? $data['custom_system_rule_switch'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['risk_level'] = isset($data['risk_level']) ? $data['risk_level'] : null;
        $this->container['rule_id'] = isset($data['rule_id']) ? $data['rule_id'] : null;
        $this->container['rule_name'] = isset($data['rule_name']) ? $data['rule_name'] : null;
        $this->container['rule_set_name'] = isset($data['rule_set_name']) ? $data['rule_set_name'] : null;
        $this->container['rule_tag'] = isset($data['rule_tag']) ? $data['rule_tag'] : null;
        $this->container['rule_type'] = isset($data['rule_type']) ? $data['rule_type'] : null;
        $this->container['subcategory'] = isset($data['subcategory']) ? $data['subcategory'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accuracy
     *
     * @return int
     */
    public function getAccuracy()
    {
        return $this->container['accuracy'];
    }

    /**
     * Sets accuracy
     *
     * @param int $accuracy accuracy
     *
     * @return $this
     */
    public function setAccuracy($accuracy)
    {
        $this->container['accuracy'] = $accuracy;

        return $this;
    }

    /**
     * Gets cveid
     *
     * @return string
     */
    public function getCveid()
    {
        return $this->container['cveid'];
    }

    /**
     * Sets cveid
     *
     * @param string $cveid cveid
     *
     * @return $this
     */
    public function setCveid($cveid)
    {
        $this->container['cveid'] = $cveid;

        return $this;
    }

    /**
     * Gets custom_system_rule_switch
     *
     * @return int
     */
    public function getCustomSystemRuleSwitch()
    {
        return $this->container['custom_system_rule_switch'];
    }

    /**
     * Sets custom_system_rule_switch
     *
     * @param int $custom_system_rule_switch custom_system_rule_switch
     *
     * @return $this
     */
    public function setCustomSystemRuleSwitch($custom_system_rule_switch)
    {
        $this->container['custom_system_rule_switch'] = $custom_system_rule_switch;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets risk_level
     *
     * @return int
     */
    public function getRiskLevel()
    {
        return $this->container['risk_level'];
    }

    /**
     * Sets risk_level
     *
     * @param int $risk_level risk_level
     *
     * @return $this
     */
    public function setRiskLevel($risk_level)
    {
        $this->container['risk_level'] = $risk_level;

        return $this;
    }

    /**
     * Gets rule_id
     *
     * @return int
     */
    public function getRuleId()
    {
        return $this->container['rule_id'];
    }

    /**
     * Sets rule_id
     *
     * @param int $rule_id rule_id
     *
     * @return $this
     */
    public function setRuleId($rule_id)
    {
        $this->container['rule_id'] = $rule_id;

        return $this;
    }

    /**
     * Gets rule_name
     *
     * @return string
     */
    public function getRuleName()
    {
        return $this->container['rule_name'];
    }

    /**
     * Sets rule_name
     *
     * @param string $rule_name rule_name
     *
     * @return $this
     */
    public function setRuleName($rule_name)
    {
        $this->container['rule_name'] = $rule_name;

        return $this;
    }

    /**
     * Gets rule_set_name
     *
     * @return string
     */
    public function getRuleSetName()
    {
        return $this->container['rule_set_name'];
    }

    /**
     * Sets rule_set_name
     *
     * @param string $rule_set_name rule_set_name
     *
     * @return $this
     */
    public function setRuleSetName($rule_set_name)
    {
        $this->container['rule_set_name'] = $rule_set_name;

        return $this;
    }

    /**
     * Gets rule_tag
     *
     * @return string
     */
    public function getRuleTag()
    {
        return $this->container['rule_tag'];
    }

    /**
     * Sets rule_tag
     *
     * @param string $rule_tag rule_tag
     *
     * @return $this
     */
    public function setRuleTag($rule_tag)
    {
        $this->container['rule_tag'] = $rule_tag;

        return $this;
    }

    /**
     * Gets rule_type
     *
     * @return string
     */
    public function getRuleType()
    {
        return $this->container['rule_type'];
    }

    /**
     * Sets rule_type
     *
     * @param string $rule_type rule_type
     *
     * @return $this
     */
    public function setRuleType($rule_type)
    {
        $this->container['rule_type'] = $rule_type;

        return $this;
    }

    /**
     * Gets subcategory
     *
     * @return string
     */
    public function getSubcategory()
    {
        return $this->container['subcategory'];
    }

    /**
     * Sets subcategory
     *
     * @param string $subcategory subcategory
     *
     * @return $this
     */
    public function setSubcategory($subcategory)
    {
        $this->container['subcategory'] = $subcategory;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

