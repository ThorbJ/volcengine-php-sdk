<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Waf\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DataForListLoadBalancerOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataForListLoadBalancerOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'eip_address' => 'string',
        'eni_address' => 'string',
        'eni_ipv6_address' => 'string',
        'id' => 'string',
        'listener_id' => 'string',
        'listener_name' => 'string',
        'load_balancer_type' => 'string',
        'name' => 'string',
        'port' => 'int',
        'protocol' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'eip_address' => null,
        'eni_address' => null,
        'eni_ipv6_address' => null,
        'id' => null,
        'listener_id' => null,
        'listener_name' => null,
        'load_balancer_type' => null,
        'name' => null,
        'port' => 'int32',
        'protocol' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'eip_address' => 'EipAddress',
        'eni_address' => 'EniAddress',
        'eni_ipv6_address' => 'EniIpv6Address',
        'id' => 'Id',
        'listener_id' => 'ListenerID',
        'listener_name' => 'ListenerName',
        'load_balancer_type' => 'LoadBalancerType',
        'name' => 'Name',
        'port' => 'Port',
        'protocol' => 'Protocol'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'eip_address' => 'setEipAddress',
        'eni_address' => 'setEniAddress',
        'eni_ipv6_address' => 'setEniIpv6Address',
        'id' => 'setId',
        'listener_id' => 'setListenerId',
        'listener_name' => 'setListenerName',
        'load_balancer_type' => 'setLoadBalancerType',
        'name' => 'setName',
        'port' => 'setPort',
        'protocol' => 'setProtocol'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'eip_address' => 'getEipAddress',
        'eni_address' => 'getEniAddress',
        'eni_ipv6_address' => 'getEniIpv6Address',
        'id' => 'getId',
        'listener_id' => 'getListenerId',
        'listener_name' => 'getListenerName',
        'load_balancer_type' => 'getLoadBalancerType',
        'name' => 'getName',
        'port' => 'getPort',
        'protocol' => 'getProtocol'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['eip_address'] = isset($data['eip_address']) ? $data['eip_address'] : null;
        $this->container['eni_address'] = isset($data['eni_address']) ? $data['eni_address'] : null;
        $this->container['eni_ipv6_address'] = isset($data['eni_ipv6_address']) ? $data['eni_ipv6_address'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['listener_id'] = isset($data['listener_id']) ? $data['listener_id'] : null;
        $this->container['listener_name'] = isset($data['listener_name']) ? $data['listener_name'] : null;
        $this->container['load_balancer_type'] = isset($data['load_balancer_type']) ? $data['load_balancer_type'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['port'] = isset($data['port']) ? $data['port'] : null;
        $this->container['protocol'] = isset($data['protocol']) ? $data['protocol'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets eip_address
     *
     * @return string
     */
    public function getEipAddress()
    {
        return $this->container['eip_address'];
    }

    /**
     * Sets eip_address
     *
     * @param string $eip_address eip_address
     *
     * @return $this
     */
    public function setEipAddress($eip_address)
    {
        $this->container['eip_address'] = $eip_address;

        return $this;
    }

    /**
     * Gets eni_address
     *
     * @return string
     */
    public function getEniAddress()
    {
        return $this->container['eni_address'];
    }

    /**
     * Sets eni_address
     *
     * @param string $eni_address eni_address
     *
     * @return $this
     */
    public function setEniAddress($eni_address)
    {
        $this->container['eni_address'] = $eni_address;

        return $this;
    }

    /**
     * Gets eni_ipv6_address
     *
     * @return string
     */
    public function getEniIpv6Address()
    {
        return $this->container['eni_ipv6_address'];
    }

    /**
     * Sets eni_ipv6_address
     *
     * @param string $eni_ipv6_address eni_ipv6_address
     *
     * @return $this
     */
    public function setEniIpv6Address($eni_ipv6_address)
    {
        $this->container['eni_ipv6_address'] = $eni_ipv6_address;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets listener_id
     *
     * @return string
     */
    public function getListenerId()
    {
        return $this->container['listener_id'];
    }

    /**
     * Sets listener_id
     *
     * @param string $listener_id listener_id
     *
     * @return $this
     */
    public function setListenerId($listener_id)
    {
        $this->container['listener_id'] = $listener_id;

        return $this;
    }

    /**
     * Gets listener_name
     *
     * @return string
     */
    public function getListenerName()
    {
        return $this->container['listener_name'];
    }

    /**
     * Sets listener_name
     *
     * @param string $listener_name listener_name
     *
     * @return $this
     */
    public function setListenerName($listener_name)
    {
        $this->container['listener_name'] = $listener_name;

        return $this;
    }

    /**
     * Gets load_balancer_type
     *
     * @return string
     */
    public function getLoadBalancerType()
    {
        return $this->container['load_balancer_type'];
    }

    /**
     * Sets load_balancer_type
     *
     * @param string $load_balancer_type load_balancer_type
     *
     * @return $this
     */
    public function setLoadBalancerType($load_balancer_type)
    {
        $this->container['load_balancer_type'] = $load_balancer_type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int $port port
     *
     * @return $this
     */
    public function setPort($port)
    {
        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string $protocol protocol
     *
     * @return $this
     */
    public function setProtocol($protocol)
    {
        $this->container['protocol'] = $protocol;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

