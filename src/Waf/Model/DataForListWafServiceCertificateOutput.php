<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Waf\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DataForListWafServiceCertificateOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataForListWafServiceCertificateOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'applicable_domains' => 'string',
        'clb_certificate_id' => 'string',
        'description' => 'string',
        'expire_time' => 'string',
        'id' => 'int',
        'insert_time' => 'string',
        'isolation_id' => 'string',
        'name' => 'string',
        'operator' => 'string',
        'optsrc' => 'string',
        'private_key' => 'string',
        'public_key' => 'string',
        'user' => 'string',
        'volc_certificate_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'applicable_domains' => null,
        'clb_certificate_id' => null,
        'description' => null,
        'expire_time' => null,
        'id' => 'int32',
        'insert_time' => null,
        'isolation_id' => null,
        'name' => null,
        'operator' => null,
        'optsrc' => null,
        'private_key' => null,
        'public_key' => null,
        'user' => null,
        'volc_certificate_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'applicable_domains' => 'ApplicableDomains',
        'clb_certificate_id' => 'ClbCertificateId',
        'description' => 'Description',
        'expire_time' => 'ExpireTime',
        'id' => 'Id',
        'insert_time' => 'InsertTime',
        'isolation_id' => 'IsolationId',
        'name' => 'Name',
        'operator' => 'Operator',
        'optsrc' => 'Optsrc',
        'private_key' => 'PrivateKey',
        'public_key' => 'PublicKey',
        'user' => 'User',
        'volc_certificate_id' => 'VolcCertificateId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'applicable_domains' => 'setApplicableDomains',
        'clb_certificate_id' => 'setClbCertificateId',
        'description' => 'setDescription',
        'expire_time' => 'setExpireTime',
        'id' => 'setId',
        'insert_time' => 'setInsertTime',
        'isolation_id' => 'setIsolationId',
        'name' => 'setName',
        'operator' => 'setOperator',
        'optsrc' => 'setOptsrc',
        'private_key' => 'setPrivateKey',
        'public_key' => 'setPublicKey',
        'user' => 'setUser',
        'volc_certificate_id' => 'setVolcCertificateId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'applicable_domains' => 'getApplicableDomains',
        'clb_certificate_id' => 'getClbCertificateId',
        'description' => 'getDescription',
        'expire_time' => 'getExpireTime',
        'id' => 'getId',
        'insert_time' => 'getInsertTime',
        'isolation_id' => 'getIsolationId',
        'name' => 'getName',
        'operator' => 'getOperator',
        'optsrc' => 'getOptsrc',
        'private_key' => 'getPrivateKey',
        'public_key' => 'getPublicKey',
        'user' => 'getUser',
        'volc_certificate_id' => 'getVolcCertificateId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['applicable_domains'] = isset($data['applicable_domains']) ? $data['applicable_domains'] : null;
        $this->container['clb_certificate_id'] = isset($data['clb_certificate_id']) ? $data['clb_certificate_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['expire_time'] = isset($data['expire_time']) ? $data['expire_time'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['insert_time'] = isset($data['insert_time']) ? $data['insert_time'] : null;
        $this->container['isolation_id'] = isset($data['isolation_id']) ? $data['isolation_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['operator'] = isset($data['operator']) ? $data['operator'] : null;
        $this->container['optsrc'] = isset($data['optsrc']) ? $data['optsrc'] : null;
        $this->container['private_key'] = isset($data['private_key']) ? $data['private_key'] : null;
        $this->container['public_key'] = isset($data['public_key']) ? $data['public_key'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['volc_certificate_id'] = isset($data['volc_certificate_id']) ? $data['volc_certificate_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets applicable_domains
     *
     * @return string
     */
    public function getApplicableDomains()
    {
        return $this->container['applicable_domains'];
    }

    /**
     * Sets applicable_domains
     *
     * @param string $applicable_domains applicable_domains
     *
     * @return $this
     */
    public function setApplicableDomains($applicable_domains)
    {
        $this->container['applicable_domains'] = $applicable_domains;

        return $this;
    }

    /**
     * Gets clb_certificate_id
     *
     * @return string
     */
    public function getClbCertificateId()
    {
        return $this->container['clb_certificate_id'];
    }

    /**
     * Sets clb_certificate_id
     *
     * @param string $clb_certificate_id clb_certificate_id
     *
     * @return $this
     */
    public function setClbCertificateId($clb_certificate_id)
    {
        $this->container['clb_certificate_id'] = $clb_certificate_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets expire_time
     *
     * @return string
     */
    public function getExpireTime()
    {
        return $this->container['expire_time'];
    }

    /**
     * Sets expire_time
     *
     * @param string $expire_time expire_time
     *
     * @return $this
     */
    public function setExpireTime($expire_time)
    {
        $this->container['expire_time'] = $expire_time;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets insert_time
     *
     * @return string
     */
    public function getInsertTime()
    {
        return $this->container['insert_time'];
    }

    /**
     * Sets insert_time
     *
     * @param string $insert_time insert_time
     *
     * @return $this
     */
    public function setInsertTime($insert_time)
    {
        $this->container['insert_time'] = $insert_time;

        return $this;
    }

    /**
     * Gets isolation_id
     *
     * @return string
     */
    public function getIsolationId()
    {
        return $this->container['isolation_id'];
    }

    /**
     * Sets isolation_id
     *
     * @param string $isolation_id isolation_id
     *
     * @return $this
     */
    public function setIsolationId($isolation_id)
    {
        $this->container['isolation_id'] = $isolation_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets operator
     *
     * @return string
     */
    public function getOperator()
    {
        return $this->container['operator'];
    }

    /**
     * Sets operator
     *
     * @param string $operator operator
     *
     * @return $this
     */
    public function setOperator($operator)
    {
        $this->container['operator'] = $operator;

        return $this;
    }

    /**
     * Gets optsrc
     *
     * @return string
     */
    public function getOptsrc()
    {
        return $this->container['optsrc'];
    }

    /**
     * Sets optsrc
     *
     * @param string $optsrc optsrc
     *
     * @return $this
     */
    public function setOptsrc($optsrc)
    {
        $this->container['optsrc'] = $optsrc;

        return $this;
    }

    /**
     * Gets private_key
     *
     * @return string
     */
    public function getPrivateKey()
    {
        return $this->container['private_key'];
    }

    /**
     * Sets private_key
     *
     * @param string $private_key private_key
     *
     * @return $this
     */
    public function setPrivateKey($private_key)
    {
        $this->container['private_key'] = $private_key;

        return $this;
    }

    /**
     * Gets public_key
     *
     * @return string
     */
    public function getPublicKey()
    {
        return $this->container['public_key'];
    }

    /**
     * Sets public_key
     *
     * @param string $public_key public_key
     *
     * @return $this
     */
    public function setPublicKey($public_key)
    {
        $this->container['public_key'] = $public_key;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string $user user
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets volc_certificate_id
     *
     * @return string
     */
    public function getVolcCertificateId()
    {
        return $this->container['volc_certificate_id'];
    }

    /**
     * Sets volc_certificate_id
     *
     * @param string $volc_certificate_id volc_certificate_id
     *
     * @return $this
     */
    public function setVolcCertificateId($volc_certificate_id)
    {
        $this->container['volc_certificate_id'] = $volc_certificate_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

