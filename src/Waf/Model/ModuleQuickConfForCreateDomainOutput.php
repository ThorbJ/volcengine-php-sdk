<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Waf\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ModuleQuickConfForCreateDomainOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ModuleQuickConfForCreateDomainOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'api' => '\Volcengine\Waf\Model\APIForCreateDomainOutput',
        'auto_cc' => '\Volcengine\Waf\Model\AutoCCForCreateDomainOutput',
        'bot_sequence' => '\Volcengine\Waf\Model\BotSequenceForCreateDomainOutput',
        'system_bot' => '\Volcengine\Waf\Model\SystemBotForCreateDomainOutput',
        'vul' => '\Volcengine\Waf\Model\VulForCreateDomainOutput'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'api' => null,
        'auto_cc' => null,
        'bot_sequence' => null,
        'system_bot' => null,
        'vul' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'api' => 'API',
        'auto_cc' => 'AutoCC',
        'bot_sequence' => 'BotSequence',
        'system_bot' => 'SystemBot',
        'vul' => 'Vul'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'api' => 'setApi',
        'auto_cc' => 'setAutoCc',
        'bot_sequence' => 'setBotSequence',
        'system_bot' => 'setSystemBot',
        'vul' => 'setVul'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'api' => 'getApi',
        'auto_cc' => 'getAutoCc',
        'bot_sequence' => 'getBotSequence',
        'system_bot' => 'getSystemBot',
        'vul' => 'getVul'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['api'] = isset($data['api']) ? $data['api'] : null;
        $this->container['auto_cc'] = isset($data['auto_cc']) ? $data['auto_cc'] : null;
        $this->container['bot_sequence'] = isset($data['bot_sequence']) ? $data['bot_sequence'] : null;
        $this->container['system_bot'] = isset($data['system_bot']) ? $data['system_bot'] : null;
        $this->container['vul'] = isset($data['vul']) ? $data['vul'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets api
     *
     * @return \Volcengine\Waf\Model\APIForCreateDomainOutput
     */
    public function getApi()
    {
        return $this->container['api'];
    }

    /**
     * Sets api
     *
     * @param \Volcengine\Waf\Model\APIForCreateDomainOutput $api api
     *
     * @return $this
     */
    public function setApi($api)
    {
        $this->container['api'] = $api;

        return $this;
    }

    /**
     * Gets auto_cc
     *
     * @return \Volcengine\Waf\Model\AutoCCForCreateDomainOutput
     */
    public function getAutoCc()
    {
        return $this->container['auto_cc'];
    }

    /**
     * Sets auto_cc
     *
     * @param \Volcengine\Waf\Model\AutoCCForCreateDomainOutput $auto_cc auto_cc
     *
     * @return $this
     */
    public function setAutoCc($auto_cc)
    {
        $this->container['auto_cc'] = $auto_cc;

        return $this;
    }

    /**
     * Gets bot_sequence
     *
     * @return \Volcengine\Waf\Model\BotSequenceForCreateDomainOutput
     */
    public function getBotSequence()
    {
        return $this->container['bot_sequence'];
    }

    /**
     * Sets bot_sequence
     *
     * @param \Volcengine\Waf\Model\BotSequenceForCreateDomainOutput $bot_sequence bot_sequence
     *
     * @return $this
     */
    public function setBotSequence($bot_sequence)
    {
        $this->container['bot_sequence'] = $bot_sequence;

        return $this;
    }

    /**
     * Gets system_bot
     *
     * @return \Volcengine\Waf\Model\SystemBotForCreateDomainOutput
     */
    public function getSystemBot()
    {
        return $this->container['system_bot'];
    }

    /**
     * Sets system_bot
     *
     * @param \Volcengine\Waf\Model\SystemBotForCreateDomainOutput $system_bot system_bot
     *
     * @return $this
     */
    public function setSystemBot($system_bot)
    {
        $this->container['system_bot'] = $system_bot;

        return $this;
    }

    /**
     * Gets vul
     *
     * @return \Volcengine\Waf\Model\VulForCreateDomainOutput
     */
    public function getVul()
    {
        return $this->container['vul'];
    }

    /**
     * Sets vul
     *
     * @param \Volcengine\Waf\Model\VulForCreateDomainOutput $vul vul
     *
     * @return $this
     */
    public function setVul($vul)
    {
        $this->container['vul'] = $vul;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

