<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Waf\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class LogicalVulnerabilityForGetVulnerabilityConfigOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LogicalVulnerabilityForGetVulnerabilityConfigOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'description' => 'string',
        'enable_rule_count' => 'int',
        'rule_set_detail' => '\Volcengine\Waf\Model\RuleSetDetailForGetVulnerabilityConfigOutput[]',
        'rule_set_name' => 'string',
        'total_rule_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'description' => null,
        'enable_rule_count' => 'int32',
        'rule_set_detail' => null,
        'rule_set_name' => null,
        'total_rule_count' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'Description',
        'enable_rule_count' => 'EnableRuleCount',
        'rule_set_detail' => 'RuleSetDetail',
        'rule_set_name' => 'RuleSetName',
        'total_rule_count' => 'TotalRuleCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'enable_rule_count' => 'setEnableRuleCount',
        'rule_set_detail' => 'setRuleSetDetail',
        'rule_set_name' => 'setRuleSetName',
        'total_rule_count' => 'setTotalRuleCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'enable_rule_count' => 'getEnableRuleCount',
        'rule_set_detail' => 'getRuleSetDetail',
        'rule_set_name' => 'getRuleSetName',
        'total_rule_count' => 'getTotalRuleCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['enable_rule_count'] = isset($data['enable_rule_count']) ? $data['enable_rule_count'] : null;
        $this->container['rule_set_detail'] = isset($data['rule_set_detail']) ? $data['rule_set_detail'] : null;
        $this->container['rule_set_name'] = isset($data['rule_set_name']) ? $data['rule_set_name'] : null;
        $this->container['total_rule_count'] = isset($data['total_rule_count']) ? $data['total_rule_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets enable_rule_count
     *
     * @return int
     */
    public function getEnableRuleCount()
    {
        return $this->container['enable_rule_count'];
    }

    /**
     * Sets enable_rule_count
     *
     * @param int $enable_rule_count enable_rule_count
     *
     * @return $this
     */
    public function setEnableRuleCount($enable_rule_count)
    {
        $this->container['enable_rule_count'] = $enable_rule_count;

        return $this;
    }

    /**
     * Gets rule_set_detail
     *
     * @return \Volcengine\Waf\Model\RuleSetDetailForGetVulnerabilityConfigOutput[]
     */
    public function getRuleSetDetail()
    {
        return $this->container['rule_set_detail'];
    }

    /**
     * Sets rule_set_detail
     *
     * @param \Volcengine\Waf\Model\RuleSetDetailForGetVulnerabilityConfigOutput[] $rule_set_detail rule_set_detail
     *
     * @return $this
     */
    public function setRuleSetDetail($rule_set_detail)
    {
        $this->container['rule_set_detail'] = $rule_set_detail;

        return $this;
    }

    /**
     * Gets rule_set_name
     *
     * @return string
     */
    public function getRuleSetName()
    {
        return $this->container['rule_set_name'];
    }

    /**
     * Sets rule_set_name
     *
     * @param string $rule_set_name rule_set_name
     *
     * @return $this
     */
    public function setRuleSetName($rule_set_name)
    {
        $this->container['rule_set_name'] = $rule_set_name;

        return $this;
    }

    /**
     * Gets total_rule_count
     *
     * @return int
     */
    public function getTotalRuleCount()
    {
        return $this->container['total_rule_count'];
    }

    /**
     * Sets total_rule_count
     *
     * @param int $total_rule_count total_rule_count
     *
     * @return $this
     */
    public function setTotalRuleCount($total_rule_count)
    {
        $this->container['total_rule_count'] = $total_rule_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

