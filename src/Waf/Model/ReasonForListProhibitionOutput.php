<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Waf\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ReasonForListProhibitionOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReasonForListProhibitionOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'black' => 'int',
        'bot' => 'int',
        'geo_black' => 'int',
        'httpflood' => 'int',
        'param_abnormal' => 'int',
        'route_abnormal' => 'int',
        'sensitive_info' => 'int',
        'web_vulnerability' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'black' => 'int32',
        'bot' => 'int32',
        'geo_black' => 'int32',
        'httpflood' => 'int32',
        'param_abnormal' => 'int32',
        'route_abnormal' => 'int32',
        'sensitive_info' => 'int32',
        'web_vulnerability' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'black' => 'black',
        'bot' => 'bot',
        'geo_black' => 'geo_black',
        'httpflood' => 'httpflood',
        'param_abnormal' => 'param_abnormal',
        'route_abnormal' => 'route_abnormal',
        'sensitive_info' => 'sensitive_info',
        'web_vulnerability' => 'web_vulnerability'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'black' => 'setBlack',
        'bot' => 'setBot',
        'geo_black' => 'setGeoBlack',
        'httpflood' => 'setHttpflood',
        'param_abnormal' => 'setParamAbnormal',
        'route_abnormal' => 'setRouteAbnormal',
        'sensitive_info' => 'setSensitiveInfo',
        'web_vulnerability' => 'setWebVulnerability'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'black' => 'getBlack',
        'bot' => 'getBot',
        'geo_black' => 'getGeoBlack',
        'httpflood' => 'getHttpflood',
        'param_abnormal' => 'getParamAbnormal',
        'route_abnormal' => 'getRouteAbnormal',
        'sensitive_info' => 'getSensitiveInfo',
        'web_vulnerability' => 'getWebVulnerability'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['black'] = isset($data['black']) ? $data['black'] : null;
        $this->container['bot'] = isset($data['bot']) ? $data['bot'] : null;
        $this->container['geo_black'] = isset($data['geo_black']) ? $data['geo_black'] : null;
        $this->container['httpflood'] = isset($data['httpflood']) ? $data['httpflood'] : null;
        $this->container['param_abnormal'] = isset($data['param_abnormal']) ? $data['param_abnormal'] : null;
        $this->container['route_abnormal'] = isset($data['route_abnormal']) ? $data['route_abnormal'] : null;
        $this->container['sensitive_info'] = isset($data['sensitive_info']) ? $data['sensitive_info'] : null;
        $this->container['web_vulnerability'] = isset($data['web_vulnerability']) ? $data['web_vulnerability'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets black
     *
     * @return int
     */
    public function getBlack()
    {
        return $this->container['black'];
    }

    /**
     * Sets black
     *
     * @param int $black black
     *
     * @return $this
     */
    public function setBlack($black)
    {
        $this->container['black'] = $black;

        return $this;
    }

    /**
     * Gets bot
     *
     * @return int
     */
    public function getBot()
    {
        return $this->container['bot'];
    }

    /**
     * Sets bot
     *
     * @param int $bot bot
     *
     * @return $this
     */
    public function setBot($bot)
    {
        $this->container['bot'] = $bot;

        return $this;
    }

    /**
     * Gets geo_black
     *
     * @return int
     */
    public function getGeoBlack()
    {
        return $this->container['geo_black'];
    }

    /**
     * Sets geo_black
     *
     * @param int $geo_black geo_black
     *
     * @return $this
     */
    public function setGeoBlack($geo_black)
    {
        $this->container['geo_black'] = $geo_black;

        return $this;
    }

    /**
     * Gets httpflood
     *
     * @return int
     */
    public function getHttpflood()
    {
        return $this->container['httpflood'];
    }

    /**
     * Sets httpflood
     *
     * @param int $httpflood httpflood
     *
     * @return $this
     */
    public function setHttpflood($httpflood)
    {
        $this->container['httpflood'] = $httpflood;

        return $this;
    }

    /**
     * Gets param_abnormal
     *
     * @return int
     */
    public function getParamAbnormal()
    {
        return $this->container['param_abnormal'];
    }

    /**
     * Sets param_abnormal
     *
     * @param int $param_abnormal param_abnormal
     *
     * @return $this
     */
    public function setParamAbnormal($param_abnormal)
    {
        $this->container['param_abnormal'] = $param_abnormal;

        return $this;
    }

    /**
     * Gets route_abnormal
     *
     * @return int
     */
    public function getRouteAbnormal()
    {
        return $this->container['route_abnormal'];
    }

    /**
     * Sets route_abnormal
     *
     * @param int $route_abnormal route_abnormal
     *
     * @return $this
     */
    public function setRouteAbnormal($route_abnormal)
    {
        $this->container['route_abnormal'] = $route_abnormal;

        return $this;
    }

    /**
     * Gets sensitive_info
     *
     * @return int
     */
    public function getSensitiveInfo()
    {
        return $this->container['sensitive_info'];
    }

    /**
     * Sets sensitive_info
     *
     * @param int $sensitive_info sensitive_info
     *
     * @return $this
     */
    public function setSensitiveInfo($sensitive_info)
    {
        $this->container['sensitive_info'] = $sensitive_info;

        return $this;
    }

    /**
     * Gets web_vulnerability
     *
     * @return int
     */
    public function getWebVulnerability()
    {
        return $this->container['web_vulnerability'];
    }

    /**
     * Sets web_vulnerability
     *
     * @param int $web_vulnerability web_vulnerability
     *
     * @return $this
     */
    public function setWebVulnerability($web_vulnerability)
    {
        $this->container['web_vulnerability'] = $web_vulnerability;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

