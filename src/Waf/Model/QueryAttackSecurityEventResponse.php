<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Waf\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class QueryAttackSecurityEventResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'QueryAttackSecurityEventResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'attack_count' => 'int',
        'count' => 'int',
        'event_end_time' => 'int',
        'event_id' => 'string',
        'event_start_time' => 'int',
        'event_type' => 'string',
        'host' => 'string',
        'page_number' => 'int',
        'page_size' => 'int',
        'security_level' => 'string',
        'total_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'attack_count' => 'int32',
        'count' => 'int32',
        'event_end_time' => 'int32',
        'event_id' => null,
        'event_start_time' => 'int32',
        'event_type' => null,
        'host' => null,
        'page_number' => 'int32',
        'page_size' => 'int32',
        'security_level' => null,
        'total_count' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attack_count' => 'AttackCount',
        'count' => 'Count',
        'event_end_time' => 'EventEndTime',
        'event_id' => 'EventId',
        'event_start_time' => 'EventStartTime',
        'event_type' => 'EventType',
        'host' => 'Host',
        'page_number' => 'PageNumber',
        'page_size' => 'PageSize',
        'security_level' => 'SecurityLevel',
        'total_count' => 'TotalCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attack_count' => 'setAttackCount',
        'count' => 'setCount',
        'event_end_time' => 'setEventEndTime',
        'event_id' => 'setEventId',
        'event_start_time' => 'setEventStartTime',
        'event_type' => 'setEventType',
        'host' => 'setHost',
        'page_number' => 'setPageNumber',
        'page_size' => 'setPageSize',
        'security_level' => 'setSecurityLevel',
        'total_count' => 'setTotalCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attack_count' => 'getAttackCount',
        'count' => 'getCount',
        'event_end_time' => 'getEventEndTime',
        'event_id' => 'getEventId',
        'event_start_time' => 'getEventStartTime',
        'event_type' => 'getEventType',
        'host' => 'getHost',
        'page_number' => 'getPageNumber',
        'page_size' => 'getPageSize',
        'security_level' => 'getSecurityLevel',
        'total_count' => 'getTotalCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['attack_count'] = isset($data['attack_count']) ? $data['attack_count'] : null;
        $this->container['count'] = isset($data['count']) ? $data['count'] : null;
        $this->container['event_end_time'] = isset($data['event_end_time']) ? $data['event_end_time'] : null;
        $this->container['event_id'] = isset($data['event_id']) ? $data['event_id'] : null;
        $this->container['event_start_time'] = isset($data['event_start_time']) ? $data['event_start_time'] : null;
        $this->container['event_type'] = isset($data['event_type']) ? $data['event_type'] : null;
        $this->container['host'] = isset($data['host']) ? $data['host'] : null;
        $this->container['page_number'] = isset($data['page_number']) ? $data['page_number'] : null;
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
        $this->container['security_level'] = isset($data['security_level']) ? $data['security_level'] : null;
        $this->container['total_count'] = isset($data['total_count']) ? $data['total_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets attack_count
     *
     * @return int
     */
    public function getAttackCount()
    {
        return $this->container['attack_count'];
    }

    /**
     * Sets attack_count
     *
     * @param int $attack_count attack_count
     *
     * @return $this
     */
    public function setAttackCount($attack_count)
    {
        $this->container['attack_count'] = $attack_count;

        return $this;
    }

    /**
     * Gets count
     *
     * @return int
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     *
     * @param int $count count
     *
     * @return $this
     */
    public function setCount($count)
    {
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets event_end_time
     *
     * @return int
     */
    public function getEventEndTime()
    {
        return $this->container['event_end_time'];
    }

    /**
     * Sets event_end_time
     *
     * @param int $event_end_time event_end_time
     *
     * @return $this
     */
    public function setEventEndTime($event_end_time)
    {
        $this->container['event_end_time'] = $event_end_time;

        return $this;
    }

    /**
     * Gets event_id
     *
     * @return string
     */
    public function getEventId()
    {
        return $this->container['event_id'];
    }

    /**
     * Sets event_id
     *
     * @param string $event_id event_id
     *
     * @return $this
     */
    public function setEventId($event_id)
    {
        $this->container['event_id'] = $event_id;

        return $this;
    }

    /**
     * Gets event_start_time
     *
     * @return int
     */
    public function getEventStartTime()
    {
        return $this->container['event_start_time'];
    }

    /**
     * Sets event_start_time
     *
     * @param int $event_start_time event_start_time
     *
     * @return $this
     */
    public function setEventStartTime($event_start_time)
    {
        $this->container['event_start_time'] = $event_start_time;

        return $this;
    }

    /**
     * Gets event_type
     *
     * @return string
     */
    public function getEventType()
    {
        return $this->container['event_type'];
    }

    /**
     * Sets event_type
     *
     * @param string $event_type event_type
     *
     * @return $this
     */
    public function setEventType($event_type)
    {
        $this->container['event_type'] = $event_type;

        return $this;
    }

    /**
     * Gets host
     *
     * @return string
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     *
     * @param string $host host
     *
     * @return $this
     */
    public function setHost($host)
    {
        $this->container['host'] = $host;

        return $this;
    }

    /**
     * Gets page_number
     *
     * @return int
     */
    public function getPageNumber()
    {
        return $this->container['page_number'];
    }

    /**
     * Sets page_number
     *
     * @param int $page_number page_number
     *
     * @return $this
     */
    public function setPageNumber($page_number)
    {
        $this->container['page_number'] = $page_number;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int $page_size page_size
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets security_level
     *
     * @return string
     */
    public function getSecurityLevel()
    {
        return $this->container['security_level'];
    }

    /**
     * Sets security_level
     *
     * @param string $security_level security_level
     *
     * @return $this
     */
    public function setSecurityLevel($security_level)
    {
        $this->container['security_level'] = $security_level;

        return $this;
    }

    /**
     * Gets total_count
     *
     * @return int
     */
    public function getTotalCount()
    {
        return $this->container['total_count'];
    }

    /**
     * Sets total_count
     *
     * @param int $total_count total_count
     *
     * @return $this
     */
    public function setTotalCount($total_count)
    {
        $this->container['total_count'] = $total_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

