<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Advdefence\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class GetHostDefStatusResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetHostDefStatusResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'allow_enable' => 'int',
        'black_lct_enable' => 'int',
        'block_enable' => 'int',
        'cc_enable' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'allow_enable' => 'int32',
        'black_lct_enable' => 'int32',
        'block_enable' => 'int32',
        'cc_enable' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_enable' => 'AllowEnable',
        'black_lct_enable' => 'BlackLctEnable',
        'block_enable' => 'BlockEnable',
        'cc_enable' => 'CcEnable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allow_enable' => 'setAllowEnable',
        'black_lct_enable' => 'setBlackLctEnable',
        'block_enable' => 'setBlockEnable',
        'cc_enable' => 'setCcEnable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allow_enable' => 'getAllowEnable',
        'black_lct_enable' => 'getBlackLctEnable',
        'block_enable' => 'getBlockEnable',
        'cc_enable' => 'getCcEnable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allow_enable'] = isset($data['allow_enable']) ? $data['allow_enable'] : null;
        $this->container['black_lct_enable'] = isset($data['black_lct_enable']) ? $data['black_lct_enable'] : null;
        $this->container['block_enable'] = isset($data['block_enable']) ? $data['block_enable'] : null;
        $this->container['cc_enable'] = isset($data['cc_enable']) ? $data['cc_enable'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allow_enable
     *
     * @return int
     */
    public function getAllowEnable()
    {
        return $this->container['allow_enable'];
    }

    /**
     * Sets allow_enable
     *
     * @param int $allow_enable allow_enable
     *
     * @return $this
     */
    public function setAllowEnable($allow_enable)
    {
        $this->container['allow_enable'] = $allow_enable;

        return $this;
    }

    /**
     * Gets black_lct_enable
     *
     * @return int
     */
    public function getBlackLctEnable()
    {
        return $this->container['black_lct_enable'];
    }

    /**
     * Sets black_lct_enable
     *
     * @param int $black_lct_enable black_lct_enable
     *
     * @return $this
     */
    public function setBlackLctEnable($black_lct_enable)
    {
        $this->container['black_lct_enable'] = $black_lct_enable;

        return $this;
    }

    /**
     * Gets block_enable
     *
     * @return int
     */
    public function getBlockEnable()
    {
        return $this->container['block_enable'];
    }

    /**
     * Sets block_enable
     *
     * @param int $block_enable block_enable
     *
     * @return $this
     */
    public function setBlockEnable($block_enable)
    {
        $this->container['block_enable'] = $block_enable;

        return $this;
    }

    /**
     * Gets cc_enable
     *
     * @return int
     */
    public function getCcEnable()
    {
        return $this->container['cc_enable'];
    }

    /**
     * Sets cc_enable
     *
     * @param int $cc_enable cc_enable
     *
     * @return $this
     */
    public function setCcEnable($cc_enable)
    {
        $this->container['cc_enable'] = $cc_enable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

