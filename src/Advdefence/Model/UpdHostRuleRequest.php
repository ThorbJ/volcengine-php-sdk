<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Advdefence\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class UpdHostRuleRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpdHostRuleRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'access_mode' => 'int',
        'all_ssl_cipher' => 'int',
        'back_up_status' => 'int',
        'chunk_mode' => 'int',
        'client_max_body_size' => 'int',
        'def_ip' => 'string[]',
        'gzip_mode' => 'int',
        'host' => 'string',
        'http2' => 'int',
        'keep_alive_requests' => 'int',
        'keep_alive_time_out' => 'int',
        'lb_algorithm' => 'string',
        'proto_follow' => 'int',
        'protocols' => 'string[]',
        'proxy_connect_time_out' => 'int',
        'proxy_keep_alive_requests' => 'int',
        'proxy_keep_alive_time_out' => 'int',
        'proxy_read_time_out' => 'int',
        'proxy_retry' => 'int',
        'proxy_send_time_out' => 'int',
        'proxy_set_header' => '\Volcengine\Advdefence\Model\ProxySetHeaderForUpdHostRuleInput[]',
        'ssl_ciphers' => 'string[]',
        'ssl_protocols' => 'string[]',
        'servers' => '\Volcengine\Advdefence\Model\ServerForUpdHostRuleInput[]',
        'user_cert_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'access_mode' => 'int32',
        'all_ssl_cipher' => 'int32',
        'back_up_status' => 'int32',
        'chunk_mode' => 'int32',
        'client_max_body_size' => 'int32',
        'def_ip' => null,
        'gzip_mode' => 'int32',
        'host' => null,
        'http2' => 'int32',
        'keep_alive_requests' => 'int32',
        'keep_alive_time_out' => 'int32',
        'lb_algorithm' => null,
        'proto_follow' => 'int32',
        'protocols' => null,
        'proxy_connect_time_out' => 'int32',
        'proxy_keep_alive_requests' => 'int32',
        'proxy_keep_alive_time_out' => 'int32',
        'proxy_read_time_out' => 'int32',
        'proxy_retry' => 'int32',
        'proxy_send_time_out' => 'int32',
        'proxy_set_header' => null,
        'ssl_ciphers' => null,
        'ssl_protocols' => null,
        'servers' => null,
        'user_cert_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'access_mode' => 'AccessMode',
        'all_ssl_cipher' => 'AllSSLCipher',
        'back_up_status' => 'BackUpStatus',
        'chunk_mode' => 'ChunkMode',
        'client_max_body_size' => 'ClientMaxBodySize',
        'def_ip' => 'DefIp',
        'gzip_mode' => 'GzipMode',
        'host' => 'Host',
        'http2' => 'Http2',
        'keep_alive_requests' => 'KeepAliveRequests',
        'keep_alive_time_out' => 'KeepAliveTimeOut',
        'lb_algorithm' => 'LBAlgorithm',
        'proto_follow' => 'ProtoFollow',
        'protocols' => 'Protocols',
        'proxy_connect_time_out' => 'ProxyConnectTimeOut',
        'proxy_keep_alive_requests' => 'ProxyKeepAliveRequests',
        'proxy_keep_alive_time_out' => 'ProxyKeepAliveTimeOut',
        'proxy_read_time_out' => 'ProxyReadTimeOut',
        'proxy_retry' => 'ProxyRetry',
        'proxy_send_time_out' => 'ProxySendTimeOut',
        'proxy_set_header' => 'ProxySetHeader',
        'ssl_ciphers' => 'SSLCiphers',
        'ssl_protocols' => 'SSLProtocols',
        'servers' => 'Servers',
        'user_cert_id' => 'UserCertId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'access_mode' => 'setAccessMode',
        'all_ssl_cipher' => 'setAllSslCipher',
        'back_up_status' => 'setBackUpStatus',
        'chunk_mode' => 'setChunkMode',
        'client_max_body_size' => 'setClientMaxBodySize',
        'def_ip' => 'setDefIp',
        'gzip_mode' => 'setGzipMode',
        'host' => 'setHost',
        'http2' => 'setHttp2',
        'keep_alive_requests' => 'setKeepAliveRequests',
        'keep_alive_time_out' => 'setKeepAliveTimeOut',
        'lb_algorithm' => 'setLbAlgorithm',
        'proto_follow' => 'setProtoFollow',
        'protocols' => 'setProtocols',
        'proxy_connect_time_out' => 'setProxyConnectTimeOut',
        'proxy_keep_alive_requests' => 'setProxyKeepAliveRequests',
        'proxy_keep_alive_time_out' => 'setProxyKeepAliveTimeOut',
        'proxy_read_time_out' => 'setProxyReadTimeOut',
        'proxy_retry' => 'setProxyRetry',
        'proxy_send_time_out' => 'setProxySendTimeOut',
        'proxy_set_header' => 'setProxySetHeader',
        'ssl_ciphers' => 'setSslCiphers',
        'ssl_protocols' => 'setSslProtocols',
        'servers' => 'setServers',
        'user_cert_id' => 'setUserCertId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'access_mode' => 'getAccessMode',
        'all_ssl_cipher' => 'getAllSslCipher',
        'back_up_status' => 'getBackUpStatus',
        'chunk_mode' => 'getChunkMode',
        'client_max_body_size' => 'getClientMaxBodySize',
        'def_ip' => 'getDefIp',
        'gzip_mode' => 'getGzipMode',
        'host' => 'getHost',
        'http2' => 'getHttp2',
        'keep_alive_requests' => 'getKeepAliveRequests',
        'keep_alive_time_out' => 'getKeepAliveTimeOut',
        'lb_algorithm' => 'getLbAlgorithm',
        'proto_follow' => 'getProtoFollow',
        'protocols' => 'getProtocols',
        'proxy_connect_time_out' => 'getProxyConnectTimeOut',
        'proxy_keep_alive_requests' => 'getProxyKeepAliveRequests',
        'proxy_keep_alive_time_out' => 'getProxyKeepAliveTimeOut',
        'proxy_read_time_out' => 'getProxyReadTimeOut',
        'proxy_retry' => 'getProxyRetry',
        'proxy_send_time_out' => 'getProxySendTimeOut',
        'proxy_set_header' => 'getProxySetHeader',
        'ssl_ciphers' => 'getSslCiphers',
        'ssl_protocols' => 'getSslProtocols',
        'servers' => 'getServers',
        'user_cert_id' => 'getUserCertId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['access_mode'] = isset($data['access_mode']) ? $data['access_mode'] : null;
        $this->container['all_ssl_cipher'] = isset($data['all_ssl_cipher']) ? $data['all_ssl_cipher'] : null;
        $this->container['back_up_status'] = isset($data['back_up_status']) ? $data['back_up_status'] : null;
        $this->container['chunk_mode'] = isset($data['chunk_mode']) ? $data['chunk_mode'] : null;
        $this->container['client_max_body_size'] = isset($data['client_max_body_size']) ? $data['client_max_body_size'] : null;
        $this->container['def_ip'] = isset($data['def_ip']) ? $data['def_ip'] : null;
        $this->container['gzip_mode'] = isset($data['gzip_mode']) ? $data['gzip_mode'] : null;
        $this->container['host'] = isset($data['host']) ? $data['host'] : null;
        $this->container['http2'] = isset($data['http2']) ? $data['http2'] : null;
        $this->container['keep_alive_requests'] = isset($data['keep_alive_requests']) ? $data['keep_alive_requests'] : null;
        $this->container['keep_alive_time_out'] = isset($data['keep_alive_time_out']) ? $data['keep_alive_time_out'] : null;
        $this->container['lb_algorithm'] = isset($data['lb_algorithm']) ? $data['lb_algorithm'] : null;
        $this->container['proto_follow'] = isset($data['proto_follow']) ? $data['proto_follow'] : null;
        $this->container['protocols'] = isset($data['protocols']) ? $data['protocols'] : null;
        $this->container['proxy_connect_time_out'] = isset($data['proxy_connect_time_out']) ? $data['proxy_connect_time_out'] : null;
        $this->container['proxy_keep_alive_requests'] = isset($data['proxy_keep_alive_requests']) ? $data['proxy_keep_alive_requests'] : null;
        $this->container['proxy_keep_alive_time_out'] = isset($data['proxy_keep_alive_time_out']) ? $data['proxy_keep_alive_time_out'] : null;
        $this->container['proxy_read_time_out'] = isset($data['proxy_read_time_out']) ? $data['proxy_read_time_out'] : null;
        $this->container['proxy_retry'] = isset($data['proxy_retry']) ? $data['proxy_retry'] : null;
        $this->container['proxy_send_time_out'] = isset($data['proxy_send_time_out']) ? $data['proxy_send_time_out'] : null;
        $this->container['proxy_set_header'] = isset($data['proxy_set_header']) ? $data['proxy_set_header'] : null;
        $this->container['ssl_ciphers'] = isset($data['ssl_ciphers']) ? $data['ssl_ciphers'] : null;
        $this->container['ssl_protocols'] = isset($data['ssl_protocols']) ? $data['ssl_protocols'] : null;
        $this->container['servers'] = isset($data['servers']) ? $data['servers'] : null;
        $this->container['user_cert_id'] = isset($data['user_cert_id']) ? $data['user_cert_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['access_mode'] === null) {
            $invalidProperties[] = "'access_mode' can't be null";
        }
        if ($this->container['back_up_status'] === null) {
            $invalidProperties[] = "'back_up_status' can't be null";
        }
        if ($this->container['chunk_mode'] === null) {
            $invalidProperties[] = "'chunk_mode' can't be null";
        }
        if ($this->container['client_max_body_size'] === null) {
            $invalidProperties[] = "'client_max_body_size' can't be null";
        }
        if ($this->container['gzip_mode'] === null) {
            $invalidProperties[] = "'gzip_mode' can't be null";
        }
        if ($this->container['host'] === null) {
            $invalidProperties[] = "'host' can't be null";
        }
        if ($this->container['http2'] === null) {
            $invalidProperties[] = "'http2' can't be null";
        }
        if ($this->container['keep_alive_requests'] === null) {
            $invalidProperties[] = "'keep_alive_requests' can't be null";
        }
        if ($this->container['keep_alive_time_out'] === null) {
            $invalidProperties[] = "'keep_alive_time_out' can't be null";
        }
        if ($this->container['lb_algorithm'] === null) {
            $invalidProperties[] = "'lb_algorithm' can't be null";
        }
        if ($this->container['proto_follow'] === null) {
            $invalidProperties[] = "'proto_follow' can't be null";
        }
        if ($this->container['proxy_connect_time_out'] === null) {
            $invalidProperties[] = "'proxy_connect_time_out' can't be null";
        }
        if ($this->container['proxy_keep_alive_requests'] === null) {
            $invalidProperties[] = "'proxy_keep_alive_requests' can't be null";
        }
        if ($this->container['proxy_keep_alive_time_out'] === null) {
            $invalidProperties[] = "'proxy_keep_alive_time_out' can't be null";
        }
        if ($this->container['proxy_read_time_out'] === null) {
            $invalidProperties[] = "'proxy_read_time_out' can't be null";
        }
        if ($this->container['proxy_retry'] === null) {
            $invalidProperties[] = "'proxy_retry' can't be null";
        }
        if ($this->container['proxy_send_time_out'] === null) {
            $invalidProperties[] = "'proxy_send_time_out' can't be null";
        }
        if ($this->container['user_cert_id'] === null) {
            $invalidProperties[] = "'user_cert_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets access_mode
     *
     * @return int
     */
    public function getAccessMode()
    {
        return $this->container['access_mode'];
    }

    /**
     * Sets access_mode
     *
     * @param int $access_mode access_mode
     *
     * @return $this
     */
    public function setAccessMode($access_mode)
    {
        $this->container['access_mode'] = $access_mode;

        return $this;
    }

    /**
     * Gets all_ssl_cipher
     *
     * @return int
     */
    public function getAllSslCipher()
    {
        return $this->container['all_ssl_cipher'];
    }

    /**
     * Sets all_ssl_cipher
     *
     * @param int $all_ssl_cipher all_ssl_cipher
     *
     * @return $this
     */
    public function setAllSslCipher($all_ssl_cipher)
    {
        $this->container['all_ssl_cipher'] = $all_ssl_cipher;

        return $this;
    }

    /**
     * Gets back_up_status
     *
     * @return int
     */
    public function getBackUpStatus()
    {
        return $this->container['back_up_status'];
    }

    /**
     * Sets back_up_status
     *
     * @param int $back_up_status back_up_status
     *
     * @return $this
     */
    public function setBackUpStatus($back_up_status)
    {
        $this->container['back_up_status'] = $back_up_status;

        return $this;
    }

    /**
     * Gets chunk_mode
     *
     * @return int
     */
    public function getChunkMode()
    {
        return $this->container['chunk_mode'];
    }

    /**
     * Sets chunk_mode
     *
     * @param int $chunk_mode chunk_mode
     *
     * @return $this
     */
    public function setChunkMode($chunk_mode)
    {
        $this->container['chunk_mode'] = $chunk_mode;

        return $this;
    }

    /**
     * Gets client_max_body_size
     *
     * @return int
     */
    public function getClientMaxBodySize()
    {
        return $this->container['client_max_body_size'];
    }

    /**
     * Sets client_max_body_size
     *
     * @param int $client_max_body_size client_max_body_size
     *
     * @return $this
     */
    public function setClientMaxBodySize($client_max_body_size)
    {
        $this->container['client_max_body_size'] = $client_max_body_size;

        return $this;
    }

    /**
     * Gets def_ip
     *
     * @return string[]
     */
    public function getDefIp()
    {
        return $this->container['def_ip'];
    }

    /**
     * Sets def_ip
     *
     * @param string[] $def_ip def_ip
     *
     * @return $this
     */
    public function setDefIp($def_ip)
    {
        $this->container['def_ip'] = $def_ip;

        return $this;
    }

    /**
     * Gets gzip_mode
     *
     * @return int
     */
    public function getGzipMode()
    {
        return $this->container['gzip_mode'];
    }

    /**
     * Sets gzip_mode
     *
     * @param int $gzip_mode gzip_mode
     *
     * @return $this
     */
    public function setGzipMode($gzip_mode)
    {
        $this->container['gzip_mode'] = $gzip_mode;

        return $this;
    }

    /**
     * Gets host
     *
     * @return string
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     *
     * @param string $host host
     *
     * @return $this
     */
    public function setHost($host)
    {
        $this->container['host'] = $host;

        return $this;
    }

    /**
     * Gets http2
     *
     * @return int
     */
    public function getHttp2()
    {
        return $this->container['http2'];
    }

    /**
     * Sets http2
     *
     * @param int $http2 http2
     *
     * @return $this
     */
    public function setHttp2($http2)
    {
        $this->container['http2'] = $http2;

        return $this;
    }

    /**
     * Gets keep_alive_requests
     *
     * @return int
     */
    public function getKeepAliveRequests()
    {
        return $this->container['keep_alive_requests'];
    }

    /**
     * Sets keep_alive_requests
     *
     * @param int $keep_alive_requests keep_alive_requests
     *
     * @return $this
     */
    public function setKeepAliveRequests($keep_alive_requests)
    {
        $this->container['keep_alive_requests'] = $keep_alive_requests;

        return $this;
    }

    /**
     * Gets keep_alive_time_out
     *
     * @return int
     */
    public function getKeepAliveTimeOut()
    {
        return $this->container['keep_alive_time_out'];
    }

    /**
     * Sets keep_alive_time_out
     *
     * @param int $keep_alive_time_out keep_alive_time_out
     *
     * @return $this
     */
    public function setKeepAliveTimeOut($keep_alive_time_out)
    {
        $this->container['keep_alive_time_out'] = $keep_alive_time_out;

        return $this;
    }

    /**
     * Gets lb_algorithm
     *
     * @return string
     */
    public function getLbAlgorithm()
    {
        return $this->container['lb_algorithm'];
    }

    /**
     * Sets lb_algorithm
     *
     * @param string $lb_algorithm lb_algorithm
     *
     * @return $this
     */
    public function setLbAlgorithm($lb_algorithm)
    {
        $this->container['lb_algorithm'] = $lb_algorithm;

        return $this;
    }

    /**
     * Gets proto_follow
     *
     * @return int
     */
    public function getProtoFollow()
    {
        return $this->container['proto_follow'];
    }

    /**
     * Sets proto_follow
     *
     * @param int $proto_follow proto_follow
     *
     * @return $this
     */
    public function setProtoFollow($proto_follow)
    {
        $this->container['proto_follow'] = $proto_follow;

        return $this;
    }

    /**
     * Gets protocols
     *
     * @return string[]
     */
    public function getProtocols()
    {
        return $this->container['protocols'];
    }

    /**
     * Sets protocols
     *
     * @param string[] $protocols protocols
     *
     * @return $this
     */
    public function setProtocols($protocols)
    {
        $this->container['protocols'] = $protocols;

        return $this;
    }

    /**
     * Gets proxy_connect_time_out
     *
     * @return int
     */
    public function getProxyConnectTimeOut()
    {
        return $this->container['proxy_connect_time_out'];
    }

    /**
     * Sets proxy_connect_time_out
     *
     * @param int $proxy_connect_time_out proxy_connect_time_out
     *
     * @return $this
     */
    public function setProxyConnectTimeOut($proxy_connect_time_out)
    {
        $this->container['proxy_connect_time_out'] = $proxy_connect_time_out;

        return $this;
    }

    /**
     * Gets proxy_keep_alive_requests
     *
     * @return int
     */
    public function getProxyKeepAliveRequests()
    {
        return $this->container['proxy_keep_alive_requests'];
    }

    /**
     * Sets proxy_keep_alive_requests
     *
     * @param int $proxy_keep_alive_requests proxy_keep_alive_requests
     *
     * @return $this
     */
    public function setProxyKeepAliveRequests($proxy_keep_alive_requests)
    {
        $this->container['proxy_keep_alive_requests'] = $proxy_keep_alive_requests;

        return $this;
    }

    /**
     * Gets proxy_keep_alive_time_out
     *
     * @return int
     */
    public function getProxyKeepAliveTimeOut()
    {
        return $this->container['proxy_keep_alive_time_out'];
    }

    /**
     * Sets proxy_keep_alive_time_out
     *
     * @param int $proxy_keep_alive_time_out proxy_keep_alive_time_out
     *
     * @return $this
     */
    public function setProxyKeepAliveTimeOut($proxy_keep_alive_time_out)
    {
        $this->container['proxy_keep_alive_time_out'] = $proxy_keep_alive_time_out;

        return $this;
    }

    /**
     * Gets proxy_read_time_out
     *
     * @return int
     */
    public function getProxyReadTimeOut()
    {
        return $this->container['proxy_read_time_out'];
    }

    /**
     * Sets proxy_read_time_out
     *
     * @param int $proxy_read_time_out proxy_read_time_out
     *
     * @return $this
     */
    public function setProxyReadTimeOut($proxy_read_time_out)
    {
        $this->container['proxy_read_time_out'] = $proxy_read_time_out;

        return $this;
    }

    /**
     * Gets proxy_retry
     *
     * @return int
     */
    public function getProxyRetry()
    {
        return $this->container['proxy_retry'];
    }

    /**
     * Sets proxy_retry
     *
     * @param int $proxy_retry proxy_retry
     *
     * @return $this
     */
    public function setProxyRetry($proxy_retry)
    {
        $this->container['proxy_retry'] = $proxy_retry;

        return $this;
    }

    /**
     * Gets proxy_send_time_out
     *
     * @return int
     */
    public function getProxySendTimeOut()
    {
        return $this->container['proxy_send_time_out'];
    }

    /**
     * Sets proxy_send_time_out
     *
     * @param int $proxy_send_time_out proxy_send_time_out
     *
     * @return $this
     */
    public function setProxySendTimeOut($proxy_send_time_out)
    {
        $this->container['proxy_send_time_out'] = $proxy_send_time_out;

        return $this;
    }

    /**
     * Gets proxy_set_header
     *
     * @return \Volcengine\Advdefence\Model\ProxySetHeaderForUpdHostRuleInput[]
     */
    public function getProxySetHeader()
    {
        return $this->container['proxy_set_header'];
    }

    /**
     * Sets proxy_set_header
     *
     * @param \Volcengine\Advdefence\Model\ProxySetHeaderForUpdHostRuleInput[] $proxy_set_header proxy_set_header
     *
     * @return $this
     */
    public function setProxySetHeader($proxy_set_header)
    {
        $this->container['proxy_set_header'] = $proxy_set_header;

        return $this;
    }

    /**
     * Gets ssl_ciphers
     *
     * @return string[]
     */
    public function getSslCiphers()
    {
        return $this->container['ssl_ciphers'];
    }

    /**
     * Sets ssl_ciphers
     *
     * @param string[] $ssl_ciphers ssl_ciphers
     *
     * @return $this
     */
    public function setSslCiphers($ssl_ciphers)
    {
        $this->container['ssl_ciphers'] = $ssl_ciphers;

        return $this;
    }

    /**
     * Gets ssl_protocols
     *
     * @return string[]
     */
    public function getSslProtocols()
    {
        return $this->container['ssl_protocols'];
    }

    /**
     * Sets ssl_protocols
     *
     * @param string[] $ssl_protocols ssl_protocols
     *
     * @return $this
     */
    public function setSslProtocols($ssl_protocols)
    {
        $this->container['ssl_protocols'] = $ssl_protocols;

        return $this;
    }

    /**
     * Gets servers
     *
     * @return \Volcengine\Advdefence\Model\ServerForUpdHostRuleInput[]
     */
    public function getServers()
    {
        return $this->container['servers'];
    }

    /**
     * Sets servers
     *
     * @param \Volcengine\Advdefence\Model\ServerForUpdHostRuleInput[] $servers servers
     *
     * @return $this
     */
    public function setServers($servers)
    {
        $this->container['servers'] = $servers;

        return $this;
    }

    /**
     * Gets user_cert_id
     *
     * @return string
     */
    public function getUserCertId()
    {
        return $this->container['user_cert_id'];
    }

    /**
     * Sets user_cert_id
     *
     * @param string $user_cert_id user_cert_id
     *
     * @return $this
     */
    public function setUserCertId($user_cert_id)
    {
        $this->container['user_cert_id'] = $user_cert_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

