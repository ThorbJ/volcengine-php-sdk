<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Ark\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ItemForListBatchInferenceJobsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ItemForListBatchInferenceJobsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'completion_window' => 'string',
        'create_time' => 'string',
        'description' => 'string',
        'expire_time' => 'string',
        'id' => 'string',
        'input_file_tos_location' => '\Volcengine\Ark\Model\InputFileTosLocationForListBatchInferenceJobsOutput',
        'model_reference' => '\Volcengine\Ark\Model\ModelReferenceForListBatchInferenceJobsOutput',
        'name' => 'string',
        'output_dir_tos_location' => '\Volcengine\Ark\Model\OutputDirTosLocationForListBatchInferenceJobsOutput',
        'project_name' => 'string',
        'request_counts' => '\Volcengine\Ark\Model\RequestCountsForListBatchInferenceJobsOutput',
        'status' => '\Volcengine\Ark\Model\StatusForListBatchInferenceJobsOutput',
        'tags' => '\Volcengine\Ark\Model\TagForListBatchInferenceJobsOutput[]',
        'update_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'completion_window' => null,
        'create_time' => null,
        'description' => null,
        'expire_time' => null,
        'id' => null,
        'input_file_tos_location' => null,
        'model_reference' => null,
        'name' => null,
        'output_dir_tos_location' => null,
        'project_name' => null,
        'request_counts' => null,
        'status' => null,
        'tags' => null,
        'update_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'completion_window' => 'CompletionWindow',
        'create_time' => 'CreateTime',
        'description' => 'Description',
        'expire_time' => 'ExpireTime',
        'id' => 'Id',
        'input_file_tos_location' => 'InputFileTosLocation',
        'model_reference' => 'ModelReference',
        'name' => 'Name',
        'output_dir_tos_location' => 'OutputDirTosLocation',
        'project_name' => 'ProjectName',
        'request_counts' => 'RequestCounts',
        'status' => 'Status',
        'tags' => 'Tags',
        'update_time' => 'UpdateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'completion_window' => 'setCompletionWindow',
        'create_time' => 'setCreateTime',
        'description' => 'setDescription',
        'expire_time' => 'setExpireTime',
        'id' => 'setId',
        'input_file_tos_location' => 'setInputFileTosLocation',
        'model_reference' => 'setModelReference',
        'name' => 'setName',
        'output_dir_tos_location' => 'setOutputDirTosLocation',
        'project_name' => 'setProjectName',
        'request_counts' => 'setRequestCounts',
        'status' => 'setStatus',
        'tags' => 'setTags',
        'update_time' => 'setUpdateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'completion_window' => 'getCompletionWindow',
        'create_time' => 'getCreateTime',
        'description' => 'getDescription',
        'expire_time' => 'getExpireTime',
        'id' => 'getId',
        'input_file_tos_location' => 'getInputFileTosLocation',
        'model_reference' => 'getModelReference',
        'name' => 'getName',
        'output_dir_tos_location' => 'getOutputDirTosLocation',
        'project_name' => 'getProjectName',
        'request_counts' => 'getRequestCounts',
        'status' => 'getStatus',
        'tags' => 'getTags',
        'update_time' => 'getUpdateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['completion_window'] = isset($data['completion_window']) ? $data['completion_window'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['expire_time'] = isset($data['expire_time']) ? $data['expire_time'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['input_file_tos_location'] = isset($data['input_file_tos_location']) ? $data['input_file_tos_location'] : null;
        $this->container['model_reference'] = isset($data['model_reference']) ? $data['model_reference'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['output_dir_tos_location'] = isset($data['output_dir_tos_location']) ? $data['output_dir_tos_location'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['request_counts'] = isset($data['request_counts']) ? $data['request_counts'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets completion_window
     *
     * @return string
     */
    public function getCompletionWindow()
    {
        return $this->container['completion_window'];
    }

    /**
     * Sets completion_window
     *
     * @param string $completion_window completion_window
     *
     * @return $this
     */
    public function setCompletionWindow($completion_window)
    {
        $this->container['completion_window'] = $completion_window;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets expire_time
     *
     * @return string
     */
    public function getExpireTime()
    {
        return $this->container['expire_time'];
    }

    /**
     * Sets expire_time
     *
     * @param string $expire_time expire_time
     *
     * @return $this
     */
    public function setExpireTime($expire_time)
    {
        $this->container['expire_time'] = $expire_time;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets input_file_tos_location
     *
     * @return \Volcengine\Ark\Model\InputFileTosLocationForListBatchInferenceJobsOutput
     */
    public function getInputFileTosLocation()
    {
        return $this->container['input_file_tos_location'];
    }

    /**
     * Sets input_file_tos_location
     *
     * @param \Volcengine\Ark\Model\InputFileTosLocationForListBatchInferenceJobsOutput $input_file_tos_location input_file_tos_location
     *
     * @return $this
     */
    public function setInputFileTosLocation($input_file_tos_location)
    {
        $this->container['input_file_tos_location'] = $input_file_tos_location;

        return $this;
    }

    /**
     * Gets model_reference
     *
     * @return \Volcengine\Ark\Model\ModelReferenceForListBatchInferenceJobsOutput
     */
    public function getModelReference()
    {
        return $this->container['model_reference'];
    }

    /**
     * Sets model_reference
     *
     * @param \Volcengine\Ark\Model\ModelReferenceForListBatchInferenceJobsOutput $model_reference model_reference
     *
     * @return $this
     */
    public function setModelReference($model_reference)
    {
        $this->container['model_reference'] = $model_reference;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets output_dir_tos_location
     *
     * @return \Volcengine\Ark\Model\OutputDirTosLocationForListBatchInferenceJobsOutput
     */
    public function getOutputDirTosLocation()
    {
        return $this->container['output_dir_tos_location'];
    }

    /**
     * Sets output_dir_tos_location
     *
     * @param \Volcengine\Ark\Model\OutputDirTosLocationForListBatchInferenceJobsOutput $output_dir_tos_location output_dir_tos_location
     *
     * @return $this
     */
    public function setOutputDirTosLocation($output_dir_tos_location)
    {
        $this->container['output_dir_tos_location'] = $output_dir_tos_location;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets request_counts
     *
     * @return \Volcengine\Ark\Model\RequestCountsForListBatchInferenceJobsOutput
     */
    public function getRequestCounts()
    {
        return $this->container['request_counts'];
    }

    /**
     * Sets request_counts
     *
     * @param \Volcengine\Ark\Model\RequestCountsForListBatchInferenceJobsOutput $request_counts request_counts
     *
     * @return $this
     */
    public function setRequestCounts($request_counts)
    {
        $this->container['request_counts'] = $request_counts;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Volcengine\Ark\Model\StatusForListBatchInferenceJobsOutput
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Volcengine\Ark\Model\StatusForListBatchInferenceJobsOutput $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Ark\Model\TagForListBatchInferenceJobsOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Ark\Model\TagForListBatchInferenceJobsOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

