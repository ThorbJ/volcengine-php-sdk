<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Ark\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CreateModelCustomizationJobRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateModelCustomizationJobRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'customization_type' => 'string',
        'data' => '\Volcengine\Ark\Model\DataForCreateModelCustomizationJobInput',
        'description' => 'string',
        'hyperparameters' => '\Volcengine\Ark\Model\HyperparameterForCreateModelCustomizationJobInput[]',
        'model_reference' => '\Volcengine\Ark\Model\ModelReferenceForCreateModelCustomizationJobInput',
        'name' => 'string',
        'project_name' => 'string',
        'save_model_limit' => 'int',
        'tags' => '\Volcengine\Ark\Model\TagForCreateModelCustomizationJobInput[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'customization_type' => null,
        'data' => null,
        'description' => null,
        'hyperparameters' => null,
        'model_reference' => null,
        'name' => null,
        'project_name' => null,
        'save_model_limit' => 'int32',
        'tags' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customization_type' => 'CustomizationType',
        'data' => 'Data',
        'description' => 'Description',
        'hyperparameters' => 'Hyperparameters',
        'model_reference' => 'ModelReference',
        'name' => 'Name',
        'project_name' => 'ProjectName',
        'save_model_limit' => 'SaveModelLimit',
        'tags' => 'Tags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customization_type' => 'setCustomizationType',
        'data' => 'setData',
        'description' => 'setDescription',
        'hyperparameters' => 'setHyperparameters',
        'model_reference' => 'setModelReference',
        'name' => 'setName',
        'project_name' => 'setProjectName',
        'save_model_limit' => 'setSaveModelLimit',
        'tags' => 'setTags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customization_type' => 'getCustomizationType',
        'data' => 'getData',
        'description' => 'getDescription',
        'hyperparameters' => 'getHyperparameters',
        'model_reference' => 'getModelReference',
        'name' => 'getName',
        'project_name' => 'getProjectName',
        'save_model_limit' => 'getSaveModelLimit',
        'tags' => 'getTags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CUSTOMIZATION_TYPE_FINETUNE_SFT = 'FinetuneSft';
    const CUSTOMIZATION_TYPE_FINETUNE_LO_RA = 'FinetuneLoRA';
    const CUSTOMIZATION_TYPE_PRETRAIN = 'Pretrain';
    const CUSTOMIZATION_TYPE_DPOLO_RA = 'DPOLoRA';
    const CUSTOMIZATION_TYPE_DPO = 'DPO';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCustomizationTypeAllowableValues()
    {
        return [
            self::CUSTOMIZATION_TYPE_FINETUNE_SFT,
            self::CUSTOMIZATION_TYPE_FINETUNE_LO_RA,
            self::CUSTOMIZATION_TYPE_PRETRAIN,
            self::CUSTOMIZATION_TYPE_DPOLO_RA,
            self::CUSTOMIZATION_TYPE_DPO,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customization_type'] = isset($data['customization_type']) ? $data['customization_type'] : null;
        $this->container['data'] = isset($data['data']) ? $data['data'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['hyperparameters'] = isset($data['hyperparameters']) ? $data['hyperparameters'] : null;
        $this->container['model_reference'] = isset($data['model_reference']) ? $data['model_reference'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['save_model_limit'] = isset($data['save_model_limit']) ? $data['save_model_limit'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['customization_type'] === null) {
            $invalidProperties[] = "'customization_type' can't be null";
        }
        $allowedValues = $this->getCustomizationTypeAllowableValues();
        if (!is_null($this->container['customization_type']) && !in_array($this->container['customization_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'customization_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customization_type
     *
     * @return string
     */
    public function getCustomizationType()
    {
        return $this->container['customization_type'];
    }

    /**
     * Sets customization_type
     *
     * @param string $customization_type customization_type
     *
     * @return $this
     */
    public function setCustomizationType($customization_type)
    {
        $allowedValues = $this->getCustomizationTypeAllowableValues();
        if (!in_array($customization_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'customization_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['customization_type'] = $customization_type;

        return $this;
    }

    /**
     * Gets data
     *
     * @return \Volcengine\Ark\Model\DataForCreateModelCustomizationJobInput
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param \Volcengine\Ark\Model\DataForCreateModelCustomizationJobInput $data data
     *
     * @return $this
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets hyperparameters
     *
     * @return \Volcengine\Ark\Model\HyperparameterForCreateModelCustomizationJobInput[]
     */
    public function getHyperparameters()
    {
        return $this->container['hyperparameters'];
    }

    /**
     * Sets hyperparameters
     *
     * @param \Volcengine\Ark\Model\HyperparameterForCreateModelCustomizationJobInput[] $hyperparameters hyperparameters
     *
     * @return $this
     */
    public function setHyperparameters($hyperparameters)
    {
        $this->container['hyperparameters'] = $hyperparameters;

        return $this;
    }

    /**
     * Gets model_reference
     *
     * @return \Volcengine\Ark\Model\ModelReferenceForCreateModelCustomizationJobInput
     */
    public function getModelReference()
    {
        return $this->container['model_reference'];
    }

    /**
     * Sets model_reference
     *
     * @param \Volcengine\Ark\Model\ModelReferenceForCreateModelCustomizationJobInput $model_reference model_reference
     *
     * @return $this
     */
    public function setModelReference($model_reference)
    {
        $this->container['model_reference'] = $model_reference;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets save_model_limit
     *
     * @return int
     */
    public function getSaveModelLimit()
    {
        return $this->container['save_model_limit'];
    }

    /**
     * Sets save_model_limit
     *
     * @param int $save_model_limit save_model_limit
     *
     * @return $this
     */
    public function setSaveModelLimit($save_model_limit)
    {
        $this->container['save_model_limit'] = $save_model_limit;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Ark\Model\TagForCreateModelCustomizationJobInput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Ark\Model\TagForCreateModelCustomizationJobInput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

