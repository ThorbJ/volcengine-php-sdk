<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Ark\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DataForCreateModelCustomizationJobInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataForCreateModelCustomizationJobInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'encryption_keyring_type' => 'string',
        'kms_trn' => 'string',
        'training_set' => '\Volcengine\Ark\Model\TrainingSetForCreateModelCustomizationJobInput',
        'validation_percentage' => 'int',
        'validation_set' => '\Volcengine\Ark\Model\ValidationSetForCreateModelCustomizationJobInput'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'encryption_keyring_type' => null,
        'kms_trn' => null,
        'training_set' => null,
        'validation_percentage' => 'int32',
        'validation_set' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'encryption_keyring_type' => 'EncryptionKeyringType',
        'kms_trn' => 'KMSTrn',
        'training_set' => 'TrainingSet',
        'validation_percentage' => 'ValidationPercentage',
        'validation_set' => 'ValidationSet'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'encryption_keyring_type' => 'setEncryptionKeyringType',
        'kms_trn' => 'setKmsTrn',
        'training_set' => 'setTrainingSet',
        'validation_percentage' => 'setValidationPercentage',
        'validation_set' => 'setValidationSet'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'encryption_keyring_type' => 'getEncryptionKeyringType',
        'kms_trn' => 'getKmsTrn',
        'training_set' => 'getTrainingSet',
        'validation_percentage' => 'getValidationPercentage',
        'validation_set' => 'getValidationSet'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ENCRYPTION_KEYRING_TYPE_MANAGED_KEYRING = 'ManagedKeyring';
    const ENCRYPTION_KEYRING_TYPE_CUSTOM_KEYRING = 'CustomKeyring';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEncryptionKeyringTypeAllowableValues()
    {
        return [
            self::ENCRYPTION_KEYRING_TYPE_MANAGED_KEYRING,
            self::ENCRYPTION_KEYRING_TYPE_CUSTOM_KEYRING,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['encryption_keyring_type'] = isset($data['encryption_keyring_type']) ? $data['encryption_keyring_type'] : null;
        $this->container['kms_trn'] = isset($data['kms_trn']) ? $data['kms_trn'] : null;
        $this->container['training_set'] = isset($data['training_set']) ? $data['training_set'] : null;
        $this->container['validation_percentage'] = isset($data['validation_percentage']) ? $data['validation_percentage'] : null;
        $this->container['validation_set'] = isset($data['validation_set']) ? $data['validation_set'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEncryptionKeyringTypeAllowableValues();
        if (!is_null($this->container['encryption_keyring_type']) && !in_array($this->container['encryption_keyring_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'encryption_keyring_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets encryption_keyring_type
     *
     * @return string
     */
    public function getEncryptionKeyringType()
    {
        return $this->container['encryption_keyring_type'];
    }

    /**
     * Sets encryption_keyring_type
     *
     * @param string $encryption_keyring_type encryption_keyring_type
     *
     * @return $this
     */
    public function setEncryptionKeyringType($encryption_keyring_type)
    {
        $allowedValues = $this->getEncryptionKeyringTypeAllowableValues();
        if (!is_null($encryption_keyring_type) && !in_array($encryption_keyring_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'encryption_keyring_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['encryption_keyring_type'] = $encryption_keyring_type;

        return $this;
    }

    /**
     * Gets kms_trn
     *
     * @return string
     */
    public function getKmsTrn()
    {
        return $this->container['kms_trn'];
    }

    /**
     * Sets kms_trn
     *
     * @param string $kms_trn kms_trn
     *
     * @return $this
     */
    public function setKmsTrn($kms_trn)
    {
        $this->container['kms_trn'] = $kms_trn;

        return $this;
    }

    /**
     * Gets training_set
     *
     * @return \Volcengine\Ark\Model\TrainingSetForCreateModelCustomizationJobInput
     */
    public function getTrainingSet()
    {
        return $this->container['training_set'];
    }

    /**
     * Sets training_set
     *
     * @param \Volcengine\Ark\Model\TrainingSetForCreateModelCustomizationJobInput $training_set training_set
     *
     * @return $this
     */
    public function setTrainingSet($training_set)
    {
        $this->container['training_set'] = $training_set;

        return $this;
    }

    /**
     * Gets validation_percentage
     *
     * @return int
     */
    public function getValidationPercentage()
    {
        return $this->container['validation_percentage'];
    }

    /**
     * Sets validation_percentage
     *
     * @param int $validation_percentage validation_percentage
     *
     * @return $this
     */
    public function setValidationPercentage($validation_percentage)
    {
        $this->container['validation_percentage'] = $validation_percentage;

        return $this;
    }

    /**
     * Gets validation_set
     *
     * @return \Volcengine\Ark\Model\ValidationSetForCreateModelCustomizationJobInput
     */
    public function getValidationSet()
    {
        return $this->container['validation_set'];
    }

    /**
     * Sets validation_set
     *
     * @param \Volcengine\Ark\Model\ValidationSetForCreateModelCustomizationJobInput $validation_set validation_set
     *
     * @return $this
     */
    public function setValidationSet($validation_set)
    {
        $this->container['validation_set'] = $validation_set;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

