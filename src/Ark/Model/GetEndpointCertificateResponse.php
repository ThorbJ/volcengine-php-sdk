<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Ark\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class GetEndpointCertificateResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetEndpointCertificateResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'not_after' => 'int',
        'not_before' => 'int',
        'pca_host' => 'string',
        'pca_instance_certificate' => 'string',
        'pca_name' => 'string',
        'pca_root_ca_certificate' => 'string',
        'pca_sub_ca_certificate' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'not_after' => 'int64',
        'not_before' => 'int64',
        'pca_host' => null,
        'pca_instance_certificate' => null,
        'pca_name' => null,
        'pca_root_ca_certificate' => null,
        'pca_sub_ca_certificate' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'not_after' => 'NotAfter',
        'not_before' => 'NotBefore',
        'pca_host' => 'PCAHost',
        'pca_instance_certificate' => 'PCAInstanceCertificate',
        'pca_name' => 'PCAName',
        'pca_root_ca_certificate' => 'PCARootCACertificate',
        'pca_sub_ca_certificate' => 'PCASubCACertificate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'not_after' => 'setNotAfter',
        'not_before' => 'setNotBefore',
        'pca_host' => 'setPcaHost',
        'pca_instance_certificate' => 'setPcaInstanceCertificate',
        'pca_name' => 'setPcaName',
        'pca_root_ca_certificate' => 'setPcaRootCaCertificate',
        'pca_sub_ca_certificate' => 'setPcaSubCaCertificate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'not_after' => 'getNotAfter',
        'not_before' => 'getNotBefore',
        'pca_host' => 'getPcaHost',
        'pca_instance_certificate' => 'getPcaInstanceCertificate',
        'pca_name' => 'getPcaName',
        'pca_root_ca_certificate' => 'getPcaRootCaCertificate',
        'pca_sub_ca_certificate' => 'getPcaSubCaCertificate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['not_after'] = isset($data['not_after']) ? $data['not_after'] : null;
        $this->container['not_before'] = isset($data['not_before']) ? $data['not_before'] : null;
        $this->container['pca_host'] = isset($data['pca_host']) ? $data['pca_host'] : null;
        $this->container['pca_instance_certificate'] = isset($data['pca_instance_certificate']) ? $data['pca_instance_certificate'] : null;
        $this->container['pca_name'] = isset($data['pca_name']) ? $data['pca_name'] : null;
        $this->container['pca_root_ca_certificate'] = isset($data['pca_root_ca_certificate']) ? $data['pca_root_ca_certificate'] : null;
        $this->container['pca_sub_ca_certificate'] = isset($data['pca_sub_ca_certificate']) ? $data['pca_sub_ca_certificate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets not_after
     *
     * @return int
     */
    public function getNotAfter()
    {
        return $this->container['not_after'];
    }

    /**
     * Sets not_after
     *
     * @param int $not_after not_after
     *
     * @return $this
     */
    public function setNotAfter($not_after)
    {
        $this->container['not_after'] = $not_after;

        return $this;
    }

    /**
     * Gets not_before
     *
     * @return int
     */
    public function getNotBefore()
    {
        return $this->container['not_before'];
    }

    /**
     * Sets not_before
     *
     * @param int $not_before not_before
     *
     * @return $this
     */
    public function setNotBefore($not_before)
    {
        $this->container['not_before'] = $not_before;

        return $this;
    }

    /**
     * Gets pca_host
     *
     * @return string
     */
    public function getPcaHost()
    {
        return $this->container['pca_host'];
    }

    /**
     * Sets pca_host
     *
     * @param string $pca_host pca_host
     *
     * @return $this
     */
    public function setPcaHost($pca_host)
    {
        $this->container['pca_host'] = $pca_host;

        return $this;
    }

    /**
     * Gets pca_instance_certificate
     *
     * @return string
     */
    public function getPcaInstanceCertificate()
    {
        return $this->container['pca_instance_certificate'];
    }

    /**
     * Sets pca_instance_certificate
     *
     * @param string $pca_instance_certificate pca_instance_certificate
     *
     * @return $this
     */
    public function setPcaInstanceCertificate($pca_instance_certificate)
    {
        $this->container['pca_instance_certificate'] = $pca_instance_certificate;

        return $this;
    }

    /**
     * Gets pca_name
     *
     * @return string
     */
    public function getPcaName()
    {
        return $this->container['pca_name'];
    }

    /**
     * Sets pca_name
     *
     * @param string $pca_name pca_name
     *
     * @return $this
     */
    public function setPcaName($pca_name)
    {
        $this->container['pca_name'] = $pca_name;

        return $this;
    }

    /**
     * Gets pca_root_ca_certificate
     *
     * @return string
     */
    public function getPcaRootCaCertificate()
    {
        return $this->container['pca_root_ca_certificate'];
    }

    /**
     * Sets pca_root_ca_certificate
     *
     * @param string $pca_root_ca_certificate pca_root_ca_certificate
     *
     * @return $this
     */
    public function setPcaRootCaCertificate($pca_root_ca_certificate)
    {
        $this->container['pca_root_ca_certificate'] = $pca_root_ca_certificate;

        return $this;
    }

    /**
     * Gets pca_sub_ca_certificate
     *
     * @return string
     */
    public function getPcaSubCaCertificate()
    {
        return $this->container['pca_sub_ca_certificate'];
    }

    /**
     * Sets pca_sub_ca_certificate
     *
     * @param string $pca_sub_ca_certificate pca_sub_ca_certificate
     *
     * @return $this
     */
    public function setPcaSubCaCertificate($pca_sub_ca_certificate)
    {
        $this->container['pca_sub_ca_certificate'] = $pca_sub_ca_certificate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

