<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Cloudtrail20180101\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Volcengine\Common\ApiException;
use Volcengine\Common\Configuration;
use Volcengine\Common\HeaderSelector;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\Utils;

class CLOUDTRAIL20180101Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    public function createTrail($event_rw, $event_sources, $tls_project_name, $tls_project_region, $tls_project_topic_project, $tls_topic_name, $tos_bucket_name, $tos_bucket_project, $tos_bucket_region, $tos_key_prefix, $trail_name, $trail_type)
    {
        list($response) = $this->createTrailWithHttpInfo($event_rw, $event_sources, $tls_project_name, $tls_project_region, $tls_project_topic_project, $tls_topic_name, $tos_bucket_name, $tos_bucket_project, $tos_bucket_region, $tos_key_prefix, $trail_name, $trail_type);
        return $response;
    }

    public function createTrailWithHttpInfo($event_rw, $event_sources, $tls_project_name, $tls_project_region, $tls_project_topic_project, $tls_topic_name, $tos_bucket_name, $tos_bucket_project, $tos_bucket_region, $tos_key_prefix, $trail_name, $trail_type)
    {
        $returnType = '\Volcengine\Cloudtrail20180101\Model\CreateTrailResponse';
        $request = $this->createTrailRequest($event_rw, $event_sources, $tls_project_name, $tls_project_region, $tls_project_topic_project, $tls_topic_name, $tos_bucket_name, $tos_bucket_project, $tos_bucket_region, $tos_key_prefix, $trail_name, $trail_type);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function createTrailAsync($event_rw, $event_sources, $tls_project_name, $tls_project_region, $tls_project_topic_project, $tls_topic_name, $tos_bucket_name, $tos_bucket_project, $tos_bucket_region, $tos_key_prefix, $trail_name, $trail_type)
    {
        return $this->createTrailAsyncWithHttpInfo($event_rw, $event_sources, $tls_project_name, $tls_project_region, $tls_project_topic_project, $tls_topic_name, $tos_bucket_name, $tos_bucket_project, $tos_bucket_region, $tos_key_prefix, $trail_name, $trail_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function createTrailAsyncWithHttpInfo($event_rw, $event_sources, $tls_project_name, $tls_project_region, $tls_project_topic_project, $tls_topic_name, $tos_bucket_name, $tos_bucket_project, $tos_bucket_region, $tos_key_prefix, $trail_name, $trail_type)
    {
        $returnType = '\Volcengine\Cloudtrail20180101\Model\CreateTrailResponse';
        $request = $this->createTrailRequest($event_rw, $event_sources, $tls_project_name, $tls_project_region, $tls_project_topic_project, $tls_topic_name, $tos_bucket_name, $tos_bucket_project, $tos_bucket_region, $tos_key_prefix, $trail_name, $trail_type);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function createTrailRequest($event_rw, $event_sources, $tls_project_name, $tls_project_region, $tls_project_topic_project, $tls_topic_name, $tos_bucket_name, $tos_bucket_project, $tos_bucket_region, $tos_key_prefix, $trail_name, $trail_type)
    {
        // verify the required parameter 'event_rw' is set
        if ($event_rw === null || (is_array($event_rw) && count($event_rw) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_rw when calling createTrail'
            );
        }
        // verify the required parameter 'event_sources' is set
        if ($event_sources === null || (is_array($event_sources) && count($event_sources) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_sources when calling createTrail'
            );
        }
        // verify the required parameter 'tls_project_name' is set
        if ($tls_project_name === null || (is_array($tls_project_name) && count($tls_project_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tls_project_name when calling createTrail'
            );
        }
        // verify the required parameter 'tls_project_region' is set
        if ($tls_project_region === null || (is_array($tls_project_region) && count($tls_project_region) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tls_project_region when calling createTrail'
            );
        }
        // verify the required parameter 'tls_project_topic_project' is set
        if ($tls_project_topic_project === null || (is_array($tls_project_topic_project) && count($tls_project_topic_project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tls_project_topic_project when calling createTrail'
            );
        }
        // verify the required parameter 'tls_topic_name' is set
        if ($tls_topic_name === null || (is_array($tls_topic_name) && count($tls_topic_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tls_topic_name when calling createTrail'
            );
        }
        // verify the required parameter 'tos_bucket_name' is set
        if ($tos_bucket_name === null || (is_array($tos_bucket_name) && count($tos_bucket_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tos_bucket_name when calling createTrail'
            );
        }
        // verify the required parameter 'tos_bucket_project' is set
        if ($tos_bucket_project === null || (is_array($tos_bucket_project) && count($tos_bucket_project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tos_bucket_project when calling createTrail'
            );
        }
        // verify the required parameter 'tos_bucket_region' is set
        if ($tos_bucket_region === null || (is_array($tos_bucket_region) && count($tos_bucket_region) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tos_bucket_region when calling createTrail'
            );
        }
        // verify the required parameter 'tos_key_prefix' is set
        if ($tos_key_prefix === null || (is_array($tos_key_prefix) && count($tos_key_prefix) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tos_key_prefix when calling createTrail'
            );
        }
        // verify the required parameter 'trail_name' is set
        if ($trail_name === null || (is_array($trail_name) && count($trail_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trail_name when calling createTrail'
            );
        }
        // verify the required parameter 'trail_type' is set
        if ($trail_type === null || (is_array($trail_type) && count($trail_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trail_type when calling createTrail'
            );
        }

        $resourcePath = '/CreateTrail/2018-01-01/cloud_trail/post/application_x-www-form-urlencoded/';
        $queryParams = [];

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function deleteTrail($trail_name)
    {
        list($response) = $this->deleteTrailWithHttpInfo($trail_name);
        return $response;
    }

    public function deleteTrailWithHttpInfo($trail_name)
    {
        $returnType = '\Volcengine\Cloudtrail20180101\Model\DeleteTrailResponse';
        $request = $this->deleteTrailRequest($trail_name);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function deleteTrailAsync($trail_name)
    {
        return $this->deleteTrailAsyncWithHttpInfo($trail_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function deleteTrailAsyncWithHttpInfo($trail_name)
    {
        $returnType = '\Volcengine\Cloudtrail20180101\Model\DeleteTrailResponse';
        $request = $this->deleteTrailRequest($trail_name);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function deleteTrailRequest($trail_name)
    {
        // verify the required parameter 'trail_name' is set
        if ($trail_name === null || (is_array($trail_name) && count($trail_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trail_name when calling deleteTrail'
            );
        }

        $resourcePath = '/DeleteTrail/2018-01-01/cloud_trail/post/application_x-www-form-urlencoded/';
        $queryParams = [];

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeTrails($include_organization_trail, $trail_names)
    {
        list($response) = $this->describeTrailsWithHttpInfo($include_organization_trail, $trail_names);
        return $response;
    }

    public function describeTrailsWithHttpInfo($include_organization_trail, $trail_names)
    {
        $returnType = '\Volcengine\Cloudtrail20180101\Model\DescribeTrailsResponse';
        $request = $this->describeTrailsRequest($include_organization_trail, $trail_names);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeTrailsAsync($include_organization_trail, $trail_names)
    {
        return $this->describeTrailsAsyncWithHttpInfo($include_organization_trail, $trail_names)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeTrailsAsyncWithHttpInfo($include_organization_trail, $trail_names)
    {
        $returnType = '\Volcengine\Cloudtrail20180101\Model\DescribeTrailsResponse';
        $request = $this->describeTrailsRequest($include_organization_trail, $trail_names);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeTrailsRequest($include_organization_trail, $trail_names)
    {
        // verify the required parameter 'include_organization_trail' is set
        if ($include_organization_trail === null || (is_array($include_organization_trail) && count($include_organization_trail) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_organization_trail when calling describeTrails'
            );
        }
        // verify the required parameter 'trail_names' is set
        if ($trail_names === null || (is_array($trail_names) && count($trail_names) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trail_names when calling describeTrails'
            );
        }

        $resourcePath = '/DescribeTrails/2018-01-01/cloud_trail/post/application_x-www-form-urlencoded/';
        $queryParams = [];

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function startLogging($trail_name)
    {
        list($response) = $this->startLoggingWithHttpInfo($trail_name);
        return $response;
    }

    public function startLoggingWithHttpInfo($trail_name)
    {
        $returnType = '\Volcengine\Cloudtrail20180101\Model\StartLoggingResponse';
        $request = $this->startLoggingRequest($trail_name);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function startLoggingAsync($trail_name)
    {
        return $this->startLoggingAsyncWithHttpInfo($trail_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function startLoggingAsyncWithHttpInfo($trail_name)
    {
        $returnType = '\Volcengine\Cloudtrail20180101\Model\StartLoggingResponse';
        $request = $this->startLoggingRequest($trail_name);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function startLoggingRequest($trail_name)
    {
        // verify the required parameter 'trail_name' is set
        if ($trail_name === null || (is_array($trail_name) && count($trail_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trail_name when calling startLogging'
            );
        }

        $resourcePath = '/StartLogging/2018-01-01/cloud_trail/post/application_x-www-form-urlencoded/';
        $queryParams = [];

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function stopLogging($trail_name)
    {
        list($response) = $this->stopLoggingWithHttpInfo($trail_name);
        return $response;
    }

    public function stopLoggingWithHttpInfo($trail_name)
    {
        $returnType = '\Volcengine\Cloudtrail20180101\Model\StopLoggingResponse';
        $request = $this->stopLoggingRequest($trail_name);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function stopLoggingAsync($trail_name)
    {
        return $this->stopLoggingAsyncWithHttpInfo($trail_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function stopLoggingAsyncWithHttpInfo($trail_name)
    {
        $returnType = '\Volcengine\Cloudtrail20180101\Model\StopLoggingResponse';
        $request = $this->stopLoggingRequest($trail_name);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function stopLoggingRequest($trail_name)
    {
        // verify the required parameter 'trail_name' is set
        if ($trail_name === null || (is_array($trail_name) && count($trail_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trail_name when calling stopLogging'
            );
        }

        $resourcePath = '/StopLogging/2018-01-01/cloud_trail/post/application_x-www-form-urlencoded/';
        $queryParams = [];

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function updateTrail($event_rw, $event_sources, $tls_project_name, $tls_project_region, $tls_project_topic_project, $tls_topic_name, $tos_bucket_name, $tos_bucket_project, $tos_bucket_region, $tos_key_prefix, $trail_name, $trail_type)
    {
        list($response) = $this->updateTrailWithHttpInfo($event_rw, $event_sources, $tls_project_name, $tls_project_region, $tls_project_topic_project, $tls_topic_name, $tos_bucket_name, $tos_bucket_project, $tos_bucket_region, $tos_key_prefix, $trail_name, $trail_type);
        return $response;
    }

    public function updateTrailWithHttpInfo($event_rw, $event_sources, $tls_project_name, $tls_project_region, $tls_project_topic_project, $tls_topic_name, $tos_bucket_name, $tos_bucket_project, $tos_bucket_region, $tos_key_prefix, $trail_name, $trail_type)
    {
        $returnType = '\Volcengine\Cloudtrail20180101\Model\UpdateTrailResponse';
        $request = $this->updateTrailRequest($event_rw, $event_sources, $tls_project_name, $tls_project_region, $tls_project_topic_project, $tls_topic_name, $tos_bucket_name, $tos_bucket_project, $tos_bucket_region, $tos_key_prefix, $trail_name, $trail_type);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function updateTrailAsync($event_rw, $event_sources, $tls_project_name, $tls_project_region, $tls_project_topic_project, $tls_topic_name, $tos_bucket_name, $tos_bucket_project, $tos_bucket_region, $tos_key_prefix, $trail_name, $trail_type)
    {
        return $this->updateTrailAsyncWithHttpInfo($event_rw, $event_sources, $tls_project_name, $tls_project_region, $tls_project_topic_project, $tls_topic_name, $tos_bucket_name, $tos_bucket_project, $tos_bucket_region, $tos_key_prefix, $trail_name, $trail_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function updateTrailAsyncWithHttpInfo($event_rw, $event_sources, $tls_project_name, $tls_project_region, $tls_project_topic_project, $tls_topic_name, $tos_bucket_name, $tos_bucket_project, $tos_bucket_region, $tos_key_prefix, $trail_name, $trail_type)
    {
        $returnType = '\Volcengine\Cloudtrail20180101\Model\UpdateTrailResponse';
        $request = $this->updateTrailRequest($event_rw, $event_sources, $tls_project_name, $tls_project_region, $tls_project_topic_project, $tls_topic_name, $tos_bucket_name, $tos_bucket_project, $tos_bucket_region, $tos_key_prefix, $trail_name, $trail_type);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function updateTrailRequest($event_rw, $event_sources, $tls_project_name, $tls_project_region, $tls_project_topic_project, $tls_topic_name, $tos_bucket_name, $tos_bucket_project, $tos_bucket_region, $tos_key_prefix, $trail_name, $trail_type)
    {
        // verify the required parameter 'event_rw' is set
        if ($event_rw === null || (is_array($event_rw) && count($event_rw) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_rw when calling updateTrail'
            );
        }
        // verify the required parameter 'event_sources' is set
        if ($event_sources === null || (is_array($event_sources) && count($event_sources) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_sources when calling updateTrail'
            );
        }
        // verify the required parameter 'tls_project_name' is set
        if ($tls_project_name === null || (is_array($tls_project_name) && count($tls_project_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tls_project_name when calling updateTrail'
            );
        }
        // verify the required parameter 'tls_project_region' is set
        if ($tls_project_region === null || (is_array($tls_project_region) && count($tls_project_region) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tls_project_region when calling updateTrail'
            );
        }
        // verify the required parameter 'tls_project_topic_project' is set
        if ($tls_project_topic_project === null || (is_array($tls_project_topic_project) && count($tls_project_topic_project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tls_project_topic_project when calling updateTrail'
            );
        }
        // verify the required parameter 'tls_topic_name' is set
        if ($tls_topic_name === null || (is_array($tls_topic_name) && count($tls_topic_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tls_topic_name when calling updateTrail'
            );
        }
        // verify the required parameter 'tos_bucket_name' is set
        if ($tos_bucket_name === null || (is_array($tos_bucket_name) && count($tos_bucket_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tos_bucket_name when calling updateTrail'
            );
        }
        // verify the required parameter 'tos_bucket_project' is set
        if ($tos_bucket_project === null || (is_array($tos_bucket_project) && count($tos_bucket_project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tos_bucket_project when calling updateTrail'
            );
        }
        // verify the required parameter 'tos_bucket_region' is set
        if ($tos_bucket_region === null || (is_array($tos_bucket_region) && count($tos_bucket_region) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tos_bucket_region when calling updateTrail'
            );
        }
        // verify the required parameter 'tos_key_prefix' is set
        if ($tos_key_prefix === null || (is_array($tos_key_prefix) && count($tos_key_prefix) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tos_key_prefix when calling updateTrail'
            );
        }
        // verify the required parameter 'trail_name' is set
        if ($trail_name === null || (is_array($trail_name) && count($trail_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trail_name when calling updateTrail'
            );
        }
        // verify the required parameter 'trail_type' is set
        if ($trail_type === null || (is_array($trail_type) && count($trail_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trail_type when calling updateTrail'
            );
        }

        $resourcePath = '/UpdateTrail/2018-01-01/cloud_trail/post/application_x-www-form-urlencoded/';
        $queryParams = [];

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }


    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
