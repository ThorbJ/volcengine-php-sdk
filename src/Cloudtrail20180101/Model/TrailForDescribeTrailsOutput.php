<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Cloudtrail20180101\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class TrailForDescribeTrailsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TrailForDescribeTrailsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'created_time' => 'string',
        'creator_id' => 'int',
        'event_rw' => 'string',
        'event_sources' => 'string[]',
        'latest_delivery_error' => 'string',
        'latest_delivery_time' => 'string',
        'logging_status' => 'string',
        'organization_id' => 'int',
        'start_logging_time' => 'string',
        'stop_logging_time' => 'string',
        'tls_project_name' => 'string',
        'tls_project_region' => 'string',
        'tls_topic_name' => 'string',
        'tos_bucket_name' => 'string',
        'tos_bucket_region' => 'string',
        'tos_key_prefix' => 'string',
        'trail_name' => 'string',
        'trail_type' => 'int',
        'updated_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'created_time' => null,
        'creator_id' => 'int64',
        'event_rw' => null,
        'event_sources' => null,
        'latest_delivery_error' => null,
        'latest_delivery_time' => null,
        'logging_status' => null,
        'organization_id' => 'int64',
        'start_logging_time' => null,
        'stop_logging_time' => null,
        'tls_project_name' => null,
        'tls_project_region' => null,
        'tls_topic_name' => null,
        'tos_bucket_name' => null,
        'tos_bucket_region' => null,
        'tos_key_prefix' => null,
        'trail_name' => null,
        'trail_type' => 'int32',
        'updated_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created_time' => 'CreatedTime',
        'creator_id' => 'CreatorID',
        'event_rw' => 'EventRW',
        'event_sources' => 'EventSources',
        'latest_delivery_error' => 'LatestDeliveryError',
        'latest_delivery_time' => 'LatestDeliveryTime',
        'logging_status' => 'LoggingStatus',
        'organization_id' => 'OrganizationID',
        'start_logging_time' => 'StartLoggingTime',
        'stop_logging_time' => 'StopLoggingTime',
        'tls_project_name' => 'TlsProjectName',
        'tls_project_region' => 'TlsProjectRegion',
        'tls_topic_name' => 'TlsTopicName',
        'tos_bucket_name' => 'TosBucketName',
        'tos_bucket_region' => 'TosBucketRegion',
        'tos_key_prefix' => 'TosKeyPrefix',
        'trail_name' => 'TrailName',
        'trail_type' => 'TrailType',
        'updated_time' => 'UpdatedTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created_time' => 'setCreatedTime',
        'creator_id' => 'setCreatorId',
        'event_rw' => 'setEventRw',
        'event_sources' => 'setEventSources',
        'latest_delivery_error' => 'setLatestDeliveryError',
        'latest_delivery_time' => 'setLatestDeliveryTime',
        'logging_status' => 'setLoggingStatus',
        'organization_id' => 'setOrganizationId',
        'start_logging_time' => 'setStartLoggingTime',
        'stop_logging_time' => 'setStopLoggingTime',
        'tls_project_name' => 'setTlsProjectName',
        'tls_project_region' => 'setTlsProjectRegion',
        'tls_topic_name' => 'setTlsTopicName',
        'tos_bucket_name' => 'setTosBucketName',
        'tos_bucket_region' => 'setTosBucketRegion',
        'tos_key_prefix' => 'setTosKeyPrefix',
        'trail_name' => 'setTrailName',
        'trail_type' => 'setTrailType',
        'updated_time' => 'setUpdatedTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created_time' => 'getCreatedTime',
        'creator_id' => 'getCreatorId',
        'event_rw' => 'getEventRw',
        'event_sources' => 'getEventSources',
        'latest_delivery_error' => 'getLatestDeliveryError',
        'latest_delivery_time' => 'getLatestDeliveryTime',
        'logging_status' => 'getLoggingStatus',
        'organization_id' => 'getOrganizationId',
        'start_logging_time' => 'getStartLoggingTime',
        'stop_logging_time' => 'getStopLoggingTime',
        'tls_project_name' => 'getTlsProjectName',
        'tls_project_region' => 'getTlsProjectRegion',
        'tls_topic_name' => 'getTlsTopicName',
        'tos_bucket_name' => 'getTosBucketName',
        'tos_bucket_region' => 'getTosBucketRegion',
        'tos_key_prefix' => 'getTosKeyPrefix',
        'trail_name' => 'getTrailName',
        'trail_type' => 'getTrailType',
        'updated_time' => 'getUpdatedTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['created_time'] = isset($data['created_time']) ? $data['created_time'] : null;
        $this->container['creator_id'] = isset($data['creator_id']) ? $data['creator_id'] : null;
        $this->container['event_rw'] = isset($data['event_rw']) ? $data['event_rw'] : null;
        $this->container['event_sources'] = isset($data['event_sources']) ? $data['event_sources'] : null;
        $this->container['latest_delivery_error'] = isset($data['latest_delivery_error']) ? $data['latest_delivery_error'] : null;
        $this->container['latest_delivery_time'] = isset($data['latest_delivery_time']) ? $data['latest_delivery_time'] : null;
        $this->container['logging_status'] = isset($data['logging_status']) ? $data['logging_status'] : null;
        $this->container['organization_id'] = isset($data['organization_id']) ? $data['organization_id'] : null;
        $this->container['start_logging_time'] = isset($data['start_logging_time']) ? $data['start_logging_time'] : null;
        $this->container['stop_logging_time'] = isset($data['stop_logging_time']) ? $data['stop_logging_time'] : null;
        $this->container['tls_project_name'] = isset($data['tls_project_name']) ? $data['tls_project_name'] : null;
        $this->container['tls_project_region'] = isset($data['tls_project_region']) ? $data['tls_project_region'] : null;
        $this->container['tls_topic_name'] = isset($data['tls_topic_name']) ? $data['tls_topic_name'] : null;
        $this->container['tos_bucket_name'] = isset($data['tos_bucket_name']) ? $data['tos_bucket_name'] : null;
        $this->container['tos_bucket_region'] = isset($data['tos_bucket_region']) ? $data['tos_bucket_region'] : null;
        $this->container['tos_key_prefix'] = isset($data['tos_key_prefix']) ? $data['tos_key_prefix'] : null;
        $this->container['trail_name'] = isset($data['trail_name']) ? $data['trail_name'] : null;
        $this->container['trail_type'] = isset($data['trail_type']) ? $data['trail_type'] : null;
        $this->container['updated_time'] = isset($data['updated_time']) ? $data['updated_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created_time
     *
     * @return string
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param string $created_time created_time
     *
     * @return $this
     */
    public function setCreatedTime($created_time)
    {
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets creator_id
     *
     * @return int
     */
    public function getCreatorId()
    {
        return $this->container['creator_id'];
    }

    /**
     * Sets creator_id
     *
     * @param int $creator_id creator_id
     *
     * @return $this
     */
    public function setCreatorId($creator_id)
    {
        $this->container['creator_id'] = $creator_id;

        return $this;
    }

    /**
     * Gets event_rw
     *
     * @return string
     */
    public function getEventRw()
    {
        return $this->container['event_rw'];
    }

    /**
     * Sets event_rw
     *
     * @param string $event_rw event_rw
     *
     * @return $this
     */
    public function setEventRw($event_rw)
    {
        $this->container['event_rw'] = $event_rw;

        return $this;
    }

    /**
     * Gets event_sources
     *
     * @return string[]
     */
    public function getEventSources()
    {
        return $this->container['event_sources'];
    }

    /**
     * Sets event_sources
     *
     * @param string[] $event_sources event_sources
     *
     * @return $this
     */
    public function setEventSources($event_sources)
    {
        $this->container['event_sources'] = $event_sources;

        return $this;
    }

    /**
     * Gets latest_delivery_error
     *
     * @return string
     */
    public function getLatestDeliveryError()
    {
        return $this->container['latest_delivery_error'];
    }

    /**
     * Sets latest_delivery_error
     *
     * @param string $latest_delivery_error latest_delivery_error
     *
     * @return $this
     */
    public function setLatestDeliveryError($latest_delivery_error)
    {
        $this->container['latest_delivery_error'] = $latest_delivery_error;

        return $this;
    }

    /**
     * Gets latest_delivery_time
     *
     * @return string
     */
    public function getLatestDeliveryTime()
    {
        return $this->container['latest_delivery_time'];
    }

    /**
     * Sets latest_delivery_time
     *
     * @param string $latest_delivery_time latest_delivery_time
     *
     * @return $this
     */
    public function setLatestDeliveryTime($latest_delivery_time)
    {
        $this->container['latest_delivery_time'] = $latest_delivery_time;

        return $this;
    }

    /**
     * Gets logging_status
     *
     * @return string
     */
    public function getLoggingStatus()
    {
        return $this->container['logging_status'];
    }

    /**
     * Sets logging_status
     *
     * @param string $logging_status logging_status
     *
     * @return $this
     */
    public function setLoggingStatus($logging_status)
    {
        $this->container['logging_status'] = $logging_status;

        return $this;
    }

    /**
     * Gets organization_id
     *
     * @return int
     */
    public function getOrganizationId()
    {
        return $this->container['organization_id'];
    }

    /**
     * Sets organization_id
     *
     * @param int $organization_id organization_id
     *
     * @return $this
     */
    public function setOrganizationId($organization_id)
    {
        $this->container['organization_id'] = $organization_id;

        return $this;
    }

    /**
     * Gets start_logging_time
     *
     * @return string
     */
    public function getStartLoggingTime()
    {
        return $this->container['start_logging_time'];
    }

    /**
     * Sets start_logging_time
     *
     * @param string $start_logging_time start_logging_time
     *
     * @return $this
     */
    public function setStartLoggingTime($start_logging_time)
    {
        $this->container['start_logging_time'] = $start_logging_time;

        return $this;
    }

    /**
     * Gets stop_logging_time
     *
     * @return string
     */
    public function getStopLoggingTime()
    {
        return $this->container['stop_logging_time'];
    }

    /**
     * Sets stop_logging_time
     *
     * @param string $stop_logging_time stop_logging_time
     *
     * @return $this
     */
    public function setStopLoggingTime($stop_logging_time)
    {
        $this->container['stop_logging_time'] = $stop_logging_time;

        return $this;
    }

    /**
     * Gets tls_project_name
     *
     * @return string
     */
    public function getTlsProjectName()
    {
        return $this->container['tls_project_name'];
    }

    /**
     * Sets tls_project_name
     *
     * @param string $tls_project_name tls_project_name
     *
     * @return $this
     */
    public function setTlsProjectName($tls_project_name)
    {
        $this->container['tls_project_name'] = $tls_project_name;

        return $this;
    }

    /**
     * Gets tls_project_region
     *
     * @return string
     */
    public function getTlsProjectRegion()
    {
        return $this->container['tls_project_region'];
    }

    /**
     * Sets tls_project_region
     *
     * @param string $tls_project_region tls_project_region
     *
     * @return $this
     */
    public function setTlsProjectRegion($tls_project_region)
    {
        $this->container['tls_project_region'] = $tls_project_region;

        return $this;
    }

    /**
     * Gets tls_topic_name
     *
     * @return string
     */
    public function getTlsTopicName()
    {
        return $this->container['tls_topic_name'];
    }

    /**
     * Sets tls_topic_name
     *
     * @param string $tls_topic_name tls_topic_name
     *
     * @return $this
     */
    public function setTlsTopicName($tls_topic_name)
    {
        $this->container['tls_topic_name'] = $tls_topic_name;

        return $this;
    }

    /**
     * Gets tos_bucket_name
     *
     * @return string
     */
    public function getTosBucketName()
    {
        return $this->container['tos_bucket_name'];
    }

    /**
     * Sets tos_bucket_name
     *
     * @param string $tos_bucket_name tos_bucket_name
     *
     * @return $this
     */
    public function setTosBucketName($tos_bucket_name)
    {
        $this->container['tos_bucket_name'] = $tos_bucket_name;

        return $this;
    }

    /**
     * Gets tos_bucket_region
     *
     * @return string
     */
    public function getTosBucketRegion()
    {
        return $this->container['tos_bucket_region'];
    }

    /**
     * Sets tos_bucket_region
     *
     * @param string $tos_bucket_region tos_bucket_region
     *
     * @return $this
     */
    public function setTosBucketRegion($tos_bucket_region)
    {
        $this->container['tos_bucket_region'] = $tos_bucket_region;

        return $this;
    }

    /**
     * Gets tos_key_prefix
     *
     * @return string
     */
    public function getTosKeyPrefix()
    {
        return $this->container['tos_key_prefix'];
    }

    /**
     * Sets tos_key_prefix
     *
     * @param string $tos_key_prefix tos_key_prefix
     *
     * @return $this
     */
    public function setTosKeyPrefix($tos_key_prefix)
    {
        $this->container['tos_key_prefix'] = $tos_key_prefix;

        return $this;
    }

    /**
     * Gets trail_name
     *
     * @return string
     */
    public function getTrailName()
    {
        return $this->container['trail_name'];
    }

    /**
     * Sets trail_name
     *
     * @param string $trail_name trail_name
     *
     * @return $this
     */
    public function setTrailName($trail_name)
    {
        $this->container['trail_name'] = $trail_name;

        return $this;
    }

    /**
     * Gets trail_type
     *
     * @return int
     */
    public function getTrailType()
    {
        return $this->container['trail_type'];
    }

    /**
     * Sets trail_type
     *
     * @param int $trail_type trail_type
     *
     * @return $this
     */
    public function setTrailType($trail_type)
    {
        $this->container['trail_type'] = $trail_type;

        return $this;
    }

    /**
     * Gets updated_time
     *
     * @return string
     */
    public function getUpdatedTime()
    {
        return $this->container['updated_time'];
    }

    /**
     * Sets updated_time
     *
     * @param string $updated_time updated_time
     *
     * @return $this
     */
    public function setUpdatedTime($updated_time)
    {
        $this->container['updated_time'] = $updated_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

