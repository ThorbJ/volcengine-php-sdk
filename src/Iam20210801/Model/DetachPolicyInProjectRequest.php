<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Iam20210801\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DetachPolicyInProjectRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DetachPolicyInProjectRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'policy_name' => 'string',
        'policy_type' => 'string',
        'principal_name' => 'string',
        'principal_type' => 'string',
        'project_name' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'policy_name' => null,
        'policy_type' => null,
        'principal_name' => null,
        'principal_type' => null,
        'project_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'policy_name' => 'PolicyName',
        'policy_type' => 'PolicyType',
        'principal_name' => 'PrincipalName',
        'principal_type' => 'PrincipalType',
        'project_name' => 'ProjectName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'policy_name' => 'setPolicyName',
        'policy_type' => 'setPolicyType',
        'principal_name' => 'setPrincipalName',
        'principal_type' => 'setPrincipalType',
        'project_name' => 'setProjectName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'policy_name' => 'getPolicyName',
        'policy_type' => 'getPolicyType',
        'principal_name' => 'getPrincipalName',
        'principal_type' => 'getPrincipalType',
        'project_name' => 'getProjectName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const POLICY_TYPE_SYSTEM = 'System';
    const POLICY_TYPE_CUSTOM = 'Custom';
    const PRINCIPAL_TYPE_USER = 'User';
    const PRINCIPAL_TYPE_ROLE = 'Role';
    const PRINCIPAL_TYPE_USER_GROUP = 'UserGroup';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPolicyTypeAllowableValues()
    {
        return [
            self::POLICY_TYPE_SYSTEM,
            self::POLICY_TYPE_CUSTOM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPrincipalTypeAllowableValues()
    {
        return [
            self::PRINCIPAL_TYPE_USER,
            self::PRINCIPAL_TYPE_ROLE,
            self::PRINCIPAL_TYPE_USER_GROUP,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['policy_name'] = isset($data['policy_name']) ? $data['policy_name'] : null;
        $this->container['policy_type'] = isset($data['policy_type']) ? $data['policy_type'] : null;
        $this->container['principal_name'] = isset($data['principal_name']) ? $data['principal_name'] : null;
        $this->container['principal_type'] = isset($data['principal_type']) ? $data['principal_type'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['policy_name'] === null) {
            $invalidProperties[] = "'policy_name' can't be null";
        }
        if ($this->container['policy_type'] === null) {
            $invalidProperties[] = "'policy_type' can't be null";
        }
        $allowedValues = $this->getPolicyTypeAllowableValues();
        if (!is_null($this->container['policy_type']) && !in_array($this->container['policy_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'policy_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['principal_name'] === null) {
            $invalidProperties[] = "'principal_name' can't be null";
        }
        if ($this->container['principal_type'] === null) {
            $invalidProperties[] = "'principal_type' can't be null";
        }
        $allowedValues = $this->getPrincipalTypeAllowableValues();
        if (!is_null($this->container['principal_type']) && !in_array($this->container['principal_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'principal_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets policy_name
     *
     * @return string
     */
    public function getPolicyName()
    {
        return $this->container['policy_name'];
    }

    /**
     * Sets policy_name
     *
     * @param string $policy_name policy_name
     *
     * @return $this
     */
    public function setPolicyName($policy_name)
    {
        $this->container['policy_name'] = $policy_name;

        return $this;
    }

    /**
     * Gets policy_type
     *
     * @return string
     */
    public function getPolicyType()
    {
        return $this->container['policy_type'];
    }

    /**
     * Sets policy_type
     *
     * @param string $policy_type policy_type
     *
     * @return $this
     */
    public function setPolicyType($policy_type)
    {
        $allowedValues = $this->getPolicyTypeAllowableValues();
        if (!in_array($policy_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'policy_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['policy_type'] = $policy_type;

        return $this;
    }

    /**
     * Gets principal_name
     *
     * @return string
     */
    public function getPrincipalName()
    {
        return $this->container['principal_name'];
    }

    /**
     * Sets principal_name
     *
     * @param string $principal_name principal_name
     *
     * @return $this
     */
    public function setPrincipalName($principal_name)
    {
        $this->container['principal_name'] = $principal_name;

        return $this;
    }

    /**
     * Gets principal_type
     *
     * @return string
     */
    public function getPrincipalType()
    {
        return $this->container['principal_type'];
    }

    /**
     * Sets principal_type
     *
     * @param string $principal_type principal_type
     *
     * @return $this
     */
    public function setPrincipalType($principal_type)
    {
        $allowedValues = $this->getPrincipalTypeAllowableValues();
        if (!in_array($principal_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'principal_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['principal_type'] = $principal_type;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string[]
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string[] $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

