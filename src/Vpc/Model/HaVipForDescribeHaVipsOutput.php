<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vpc\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class HaVipForDescribeHaVipsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HaVipForDescribeHaVipsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'string',
        'associated_eip_address' => 'string',
        'associated_eip_id' => 'string',
        'associated_instance_ids' => 'string[]',
        'associated_instance_type' => 'string',
        'created_at' => 'string',
        'description' => 'string',
        'ha_vip_id' => 'string',
        'ha_vip_name' => 'string',
        'ip_address' => 'string',
        'master_instance_id' => 'string',
        'project_name' => 'string',
        'status' => 'string',
        'subnet_id' => 'string',
        'tags' => '\Volcengine\Vpc\Model\TagForDescribeHaVipsOutput[]',
        'updated_at' => 'string',
        'vpc_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => null,
        'associated_eip_address' => null,
        'associated_eip_id' => null,
        'associated_instance_ids' => null,
        'associated_instance_type' => null,
        'created_at' => null,
        'description' => null,
        'ha_vip_id' => null,
        'ha_vip_name' => null,
        'ip_address' => null,
        'master_instance_id' => null,
        'project_name' => null,
        'status' => null,
        'subnet_id' => null,
        'tags' => null,
        'updated_at' => null,
        'vpc_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'AccountId',
        'associated_eip_address' => 'AssociatedEipAddress',
        'associated_eip_id' => 'AssociatedEipId',
        'associated_instance_ids' => 'AssociatedInstanceIds',
        'associated_instance_type' => 'AssociatedInstanceType',
        'created_at' => 'CreatedAt',
        'description' => 'Description',
        'ha_vip_id' => 'HaVipId',
        'ha_vip_name' => 'HaVipName',
        'ip_address' => 'IpAddress',
        'master_instance_id' => 'MasterInstanceId',
        'project_name' => 'ProjectName',
        'status' => 'Status',
        'subnet_id' => 'SubnetId',
        'tags' => 'Tags',
        'updated_at' => 'UpdatedAt',
        'vpc_id' => 'VpcId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'associated_eip_address' => 'setAssociatedEipAddress',
        'associated_eip_id' => 'setAssociatedEipId',
        'associated_instance_ids' => 'setAssociatedInstanceIds',
        'associated_instance_type' => 'setAssociatedInstanceType',
        'created_at' => 'setCreatedAt',
        'description' => 'setDescription',
        'ha_vip_id' => 'setHaVipId',
        'ha_vip_name' => 'setHaVipName',
        'ip_address' => 'setIpAddress',
        'master_instance_id' => 'setMasterInstanceId',
        'project_name' => 'setProjectName',
        'status' => 'setStatus',
        'subnet_id' => 'setSubnetId',
        'tags' => 'setTags',
        'updated_at' => 'setUpdatedAt',
        'vpc_id' => 'setVpcId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'associated_eip_address' => 'getAssociatedEipAddress',
        'associated_eip_id' => 'getAssociatedEipId',
        'associated_instance_ids' => 'getAssociatedInstanceIds',
        'associated_instance_type' => 'getAssociatedInstanceType',
        'created_at' => 'getCreatedAt',
        'description' => 'getDescription',
        'ha_vip_id' => 'getHaVipId',
        'ha_vip_name' => 'getHaVipName',
        'ip_address' => 'getIpAddress',
        'master_instance_id' => 'getMasterInstanceId',
        'project_name' => 'getProjectName',
        'status' => 'getStatus',
        'subnet_id' => 'getSubnetId',
        'tags' => 'getTags',
        'updated_at' => 'getUpdatedAt',
        'vpc_id' => 'getVpcId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['associated_eip_address'] = isset($data['associated_eip_address']) ? $data['associated_eip_address'] : null;
        $this->container['associated_eip_id'] = isset($data['associated_eip_id']) ? $data['associated_eip_id'] : null;
        $this->container['associated_instance_ids'] = isset($data['associated_instance_ids']) ? $data['associated_instance_ids'] : null;
        $this->container['associated_instance_type'] = isset($data['associated_instance_type']) ? $data['associated_instance_type'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['ha_vip_id'] = isset($data['ha_vip_id']) ? $data['ha_vip_id'] : null;
        $this->container['ha_vip_name'] = isset($data['ha_vip_name']) ? $data['ha_vip_name'] : null;
        $this->container['ip_address'] = isset($data['ip_address']) ? $data['ip_address'] : null;
        $this->container['master_instance_id'] = isset($data['master_instance_id']) ? $data['master_instance_id'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['subnet_id'] = isset($data['subnet_id']) ? $data['subnet_id'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['vpc_id'] = isset($data['vpc_id']) ? $data['vpc_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets associated_eip_address
     *
     * @return string
     */
    public function getAssociatedEipAddress()
    {
        return $this->container['associated_eip_address'];
    }

    /**
     * Sets associated_eip_address
     *
     * @param string $associated_eip_address associated_eip_address
     *
     * @return $this
     */
    public function setAssociatedEipAddress($associated_eip_address)
    {
        $this->container['associated_eip_address'] = $associated_eip_address;

        return $this;
    }

    /**
     * Gets associated_eip_id
     *
     * @return string
     */
    public function getAssociatedEipId()
    {
        return $this->container['associated_eip_id'];
    }

    /**
     * Sets associated_eip_id
     *
     * @param string $associated_eip_id associated_eip_id
     *
     * @return $this
     */
    public function setAssociatedEipId($associated_eip_id)
    {
        $this->container['associated_eip_id'] = $associated_eip_id;

        return $this;
    }

    /**
     * Gets associated_instance_ids
     *
     * @return string[]
     */
    public function getAssociatedInstanceIds()
    {
        return $this->container['associated_instance_ids'];
    }

    /**
     * Sets associated_instance_ids
     *
     * @param string[] $associated_instance_ids associated_instance_ids
     *
     * @return $this
     */
    public function setAssociatedInstanceIds($associated_instance_ids)
    {
        $this->container['associated_instance_ids'] = $associated_instance_ids;

        return $this;
    }

    /**
     * Gets associated_instance_type
     *
     * @return string
     */
    public function getAssociatedInstanceType()
    {
        return $this->container['associated_instance_type'];
    }

    /**
     * Sets associated_instance_type
     *
     * @param string $associated_instance_type associated_instance_type
     *
     * @return $this
     */
    public function setAssociatedInstanceType($associated_instance_type)
    {
        $this->container['associated_instance_type'] = $associated_instance_type;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets ha_vip_id
     *
     * @return string
     */
    public function getHaVipId()
    {
        return $this->container['ha_vip_id'];
    }

    /**
     * Sets ha_vip_id
     *
     * @param string $ha_vip_id ha_vip_id
     *
     * @return $this
     */
    public function setHaVipId($ha_vip_id)
    {
        $this->container['ha_vip_id'] = $ha_vip_id;

        return $this;
    }

    /**
     * Gets ha_vip_name
     *
     * @return string
     */
    public function getHaVipName()
    {
        return $this->container['ha_vip_name'];
    }

    /**
     * Sets ha_vip_name
     *
     * @param string $ha_vip_name ha_vip_name
     *
     * @return $this
     */
    public function setHaVipName($ha_vip_name)
    {
        $this->container['ha_vip_name'] = $ha_vip_name;

        return $this;
    }

    /**
     * Gets ip_address
     *
     * @return string
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     *
     * @param string $ip_address ip_address
     *
     * @return $this
     */
    public function setIpAddress($ip_address)
    {
        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets master_instance_id
     *
     * @return string
     */
    public function getMasterInstanceId()
    {
        return $this->container['master_instance_id'];
    }

    /**
     * Sets master_instance_id
     *
     * @param string $master_instance_id master_instance_id
     *
     * @return $this
     */
    public function setMasterInstanceId($master_instance_id)
    {
        $this->container['master_instance_id'] = $master_instance_id;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets subnet_id
     *
     * @return string
     */
    public function getSubnetId()
    {
        return $this->container['subnet_id'];
    }

    /**
     * Sets subnet_id
     *
     * @param string $subnet_id subnet_id
     *
     * @return $this
     */
    public function setSubnetId($subnet_id)
    {
        $this->container['subnet_id'] = $subnet_id;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Vpc\Model\TagForDescribeHaVipsOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Vpc\Model\TagForDescribeHaVipsOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets vpc_id
     *
     * @return string
     */
    public function getVpcId()
    {
        return $this->container['vpc_id'];
    }

    /**
     * Sets vpc_id
     *
     * @param string $vpc_id vpc_id
     *
     * @return $this
     */
    public function setVpcId($vpc_id)
    {
        $this->container['vpc_id'] = $vpc_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

