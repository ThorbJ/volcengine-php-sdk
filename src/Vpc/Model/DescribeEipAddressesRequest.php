<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vpc\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DescribeEipAddressesRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DescribeEipAddressesRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'allocation_ids' => 'string[]',
        'associated_instance_id' => 'string',
        'associated_instance_type' => 'string',
        'billing_type' => 'int',
        'eip_addresses' => 'string[]',
        'isp' => 'string',
        'ip_address_pool_id' => 'string',
        'max_results' => 'int',
        'name' => 'string',
        'next_token' => 'string',
        'page_number' => 'int',
        'page_size' => 'int',
        'project_name' => 'string',
        'security_protection_enabled' => 'bool',
        'status' => 'string',
        'tag_filters' => '\Volcengine\Vpc\Model\TagFilterForDescribeEipAddressesInput[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'allocation_ids' => null,
        'associated_instance_id' => null,
        'associated_instance_type' => null,
        'billing_type' => null,
        'eip_addresses' => null,
        'isp' => null,
        'ip_address_pool_id' => null,
        'max_results' => null,
        'name' => null,
        'next_token' => null,
        'page_number' => null,
        'page_size' => null,
        'project_name' => null,
        'security_protection_enabled' => null,
        'status' => null,
        'tag_filters' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allocation_ids' => 'AllocationIds',
        'associated_instance_id' => 'AssociatedInstanceId',
        'associated_instance_type' => 'AssociatedInstanceType',
        'billing_type' => 'BillingType',
        'eip_addresses' => 'EipAddresses',
        'isp' => 'ISP',
        'ip_address_pool_id' => 'IpAddressPoolId',
        'max_results' => 'MaxResults',
        'name' => 'Name',
        'next_token' => 'NextToken',
        'page_number' => 'PageNumber',
        'page_size' => 'PageSize',
        'project_name' => 'ProjectName',
        'security_protection_enabled' => 'SecurityProtectionEnabled',
        'status' => 'Status',
        'tag_filters' => 'TagFilters'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allocation_ids' => 'setAllocationIds',
        'associated_instance_id' => 'setAssociatedInstanceId',
        'associated_instance_type' => 'setAssociatedInstanceType',
        'billing_type' => 'setBillingType',
        'eip_addresses' => 'setEipAddresses',
        'isp' => 'setIsp',
        'ip_address_pool_id' => 'setIpAddressPoolId',
        'max_results' => 'setMaxResults',
        'name' => 'setName',
        'next_token' => 'setNextToken',
        'page_number' => 'setPageNumber',
        'page_size' => 'setPageSize',
        'project_name' => 'setProjectName',
        'security_protection_enabled' => 'setSecurityProtectionEnabled',
        'status' => 'setStatus',
        'tag_filters' => 'setTagFilters'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allocation_ids' => 'getAllocationIds',
        'associated_instance_id' => 'getAssociatedInstanceId',
        'associated_instance_type' => 'getAssociatedInstanceType',
        'billing_type' => 'getBillingType',
        'eip_addresses' => 'getEipAddresses',
        'isp' => 'getIsp',
        'ip_address_pool_id' => 'getIpAddressPoolId',
        'max_results' => 'getMaxResults',
        'name' => 'getName',
        'next_token' => 'getNextToken',
        'page_number' => 'getPageNumber',
        'page_size' => 'getPageSize',
        'project_name' => 'getProjectName',
        'security_protection_enabled' => 'getSecurityProtectionEnabled',
        'status' => 'getStatus',
        'tag_filters' => 'getTagFilters'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ASSOCIATED_INSTANCE_TYPE_NAT = 'Nat';
    const ASSOCIATED_INSTANCE_TYPE_ECS_INSTANCE = 'EcsInstance';
    const ASSOCIATED_INSTANCE_TYPE_NETWORK_INTERFACE = 'NetworkInterface';
    const ASSOCIATED_INSTANCE_TYPE_CLB_INSTANCE = 'ClbInstance';
    const ASSOCIATED_INSTANCE_TYPE_ALB_INSTANCE = 'AlbInstance';
    const ISP_BGP = 'BGP';
    const ISP_SINGLE_LINE_BGP = 'SingleLine_BGP';
    const ISP_STATIC_BGP = 'Static_BGP';
    const ISP_FUSION_BGP = 'Fusion_BGP';
    const ISP_CHINA_MOBILE = 'ChinaMobile';
    const ISP_CHINA_UNICOM = 'ChinaUnicom';
    const ISP_CHINA_TELECOM = 'ChinaTelecom';
    const ISP_CHINA_MOBILE_VALUE = 'ChinaMobile_Value';
    const ISP_CHINA_UNICOM_VALUE = 'ChinaUnicom_Value';
    const ISP_CHINA_TELECOM_VALUE = 'ChinaTelecom_Value';
    const STATUS_ATTACHING = 'Attaching';
    const STATUS_DETACHING = 'Detaching';
    const STATUS_ATTACHED = 'Attached';
    const STATUS_AVAILABLE = 'Available';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAssociatedInstanceTypeAllowableValues()
    {
        return [
            self::ASSOCIATED_INSTANCE_TYPE_NAT,
            self::ASSOCIATED_INSTANCE_TYPE_ECS_INSTANCE,
            self::ASSOCIATED_INSTANCE_TYPE_NETWORK_INTERFACE,
            self::ASSOCIATED_INSTANCE_TYPE_CLB_INSTANCE,
            self::ASSOCIATED_INSTANCE_TYPE_ALB_INSTANCE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIspAllowableValues()
    {
        return [
            self::ISP_BGP,
            self::ISP_SINGLE_LINE_BGP,
            self::ISP_STATIC_BGP,
            self::ISP_FUSION_BGP,
            self::ISP_CHINA_MOBILE,
            self::ISP_CHINA_UNICOM,
            self::ISP_CHINA_TELECOM,
            self::ISP_CHINA_MOBILE_VALUE,
            self::ISP_CHINA_UNICOM_VALUE,
            self::ISP_CHINA_TELECOM_VALUE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ATTACHING,
            self::STATUS_DETACHING,
            self::STATUS_ATTACHED,
            self::STATUS_AVAILABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allocation_ids'] = isset($data['allocation_ids']) ? $data['allocation_ids'] : null;
        $this->container['associated_instance_id'] = isset($data['associated_instance_id']) ? $data['associated_instance_id'] : null;
        $this->container['associated_instance_type'] = isset($data['associated_instance_type']) ? $data['associated_instance_type'] : null;
        $this->container['billing_type'] = isset($data['billing_type']) ? $data['billing_type'] : null;
        $this->container['eip_addresses'] = isset($data['eip_addresses']) ? $data['eip_addresses'] : null;
        $this->container['isp'] = isset($data['isp']) ? $data['isp'] : null;
        $this->container['ip_address_pool_id'] = isset($data['ip_address_pool_id']) ? $data['ip_address_pool_id'] : null;
        $this->container['max_results'] = isset($data['max_results']) ? $data['max_results'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['next_token'] = isset($data['next_token']) ? $data['next_token'] : null;
        $this->container['page_number'] = isset($data['page_number']) ? $data['page_number'] : null;
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['security_protection_enabled'] = isset($data['security_protection_enabled']) ? $data['security_protection_enabled'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tag_filters'] = isset($data['tag_filters']) ? $data['tag_filters'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAssociatedInstanceTypeAllowableValues();
        if (!is_null($this->container['associated_instance_type']) && !in_array($this->container['associated_instance_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'associated_instance_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIspAllowableValues();
        if (!is_null($this->container['isp']) && !in_array($this->container['isp'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'isp', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allocation_ids
     *
     * @return string[]
     */
    public function getAllocationIds()
    {
        return $this->container['allocation_ids'];
    }

    /**
     * Sets allocation_ids
     *
     * @param string[] $allocation_ids allocation_ids
     *
     * @return $this
     */
    public function setAllocationIds($allocation_ids)
    {
        $this->container['allocation_ids'] = $allocation_ids;

        return $this;
    }

    /**
     * Gets associated_instance_id
     *
     * @return string
     */
    public function getAssociatedInstanceId()
    {
        return $this->container['associated_instance_id'];
    }

    /**
     * Sets associated_instance_id
     *
     * @param string $associated_instance_id associated_instance_id
     *
     * @return $this
     */
    public function setAssociatedInstanceId($associated_instance_id)
    {
        $this->container['associated_instance_id'] = $associated_instance_id;

        return $this;
    }

    /**
     * Gets associated_instance_type
     *
     * @return string
     */
    public function getAssociatedInstanceType()
    {
        return $this->container['associated_instance_type'];
    }

    /**
     * Sets associated_instance_type
     *
     * @param string $associated_instance_type associated_instance_type
     *
     * @return $this
     */
    public function setAssociatedInstanceType($associated_instance_type)
    {
        $allowedValues = $this->getAssociatedInstanceTypeAllowableValues();
        if (!is_null($associated_instance_type) && !in_array($associated_instance_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'associated_instance_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['associated_instance_type'] = $associated_instance_type;

        return $this;
    }

    /**
     * Gets billing_type
     *
     * @return int
     */
    public function getBillingType()
    {
        return $this->container['billing_type'];
    }

    /**
     * Sets billing_type
     *
     * @param int $billing_type billing_type
     *
     * @return $this
     */
    public function setBillingType($billing_type)
    {
        $this->container['billing_type'] = $billing_type;

        return $this;
    }

    /**
     * Gets eip_addresses
     *
     * @return string[]
     */
    public function getEipAddresses()
    {
        return $this->container['eip_addresses'];
    }

    /**
     * Sets eip_addresses
     *
     * @param string[] $eip_addresses eip_addresses
     *
     * @return $this
     */
    public function setEipAddresses($eip_addresses)
    {
        $this->container['eip_addresses'] = $eip_addresses;

        return $this;
    }

    /**
     * Gets isp
     *
     * @return string
     */
    public function getIsp()
    {
        return $this->container['isp'];
    }

    /**
     * Sets isp
     *
     * @param string $isp isp
     *
     * @return $this
     */
    public function setIsp($isp)
    {
        $allowedValues = $this->getIspAllowableValues();
        if (!is_null($isp) && !in_array($isp, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'isp', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['isp'] = $isp;

        return $this;
    }

    /**
     * Gets ip_address_pool_id
     *
     * @return string
     */
    public function getIpAddressPoolId()
    {
        return $this->container['ip_address_pool_id'];
    }

    /**
     * Sets ip_address_pool_id
     *
     * @param string $ip_address_pool_id ip_address_pool_id
     *
     * @return $this
     */
    public function setIpAddressPoolId($ip_address_pool_id)
    {
        $this->container['ip_address_pool_id'] = $ip_address_pool_id;

        return $this;
    }

    /**
     * Gets max_results
     *
     * @return int
     */
    public function getMaxResults()
    {
        return $this->container['max_results'];
    }

    /**
     * Sets max_results
     *
     * @param int $max_results max_results
     *
     * @return $this
     */
    public function setMaxResults($max_results)
    {
        $this->container['max_results'] = $max_results;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets next_token
     *
     * @return string
     */
    public function getNextToken()
    {
        return $this->container['next_token'];
    }

    /**
     * Sets next_token
     *
     * @param string $next_token next_token
     *
     * @return $this
     */
    public function setNextToken($next_token)
    {
        $this->container['next_token'] = $next_token;

        return $this;
    }

    /**
     * Gets page_number
     *
     * @return int
     */
    public function getPageNumber()
    {
        return $this->container['page_number'];
    }

    /**
     * Sets page_number
     *
     * @param int $page_number page_number
     *
     * @return $this
     */
    public function setPageNumber($page_number)
    {
        $this->container['page_number'] = $page_number;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int $page_size page_size
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets security_protection_enabled
     *
     * @return bool
     */
    public function getSecurityProtectionEnabled()
    {
        return $this->container['security_protection_enabled'];
    }

    /**
     * Sets security_protection_enabled
     *
     * @param bool $security_protection_enabled security_protection_enabled
     *
     * @return $this
     */
    public function setSecurityProtectionEnabled($security_protection_enabled)
    {
        $this->container['security_protection_enabled'] = $security_protection_enabled;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tag_filters
     *
     * @return \Volcengine\Vpc\Model\TagFilterForDescribeEipAddressesInput[]
     */
    public function getTagFilters()
    {
        return $this->container['tag_filters'];
    }

    /**
     * Sets tag_filters
     *
     * @param \Volcengine\Vpc\Model\TagFilterForDescribeEipAddressesInput[] $tag_filters tag_filters
     *
     * @return $this
     */
    public function setTagFilters($tag_filters)
    {
        $this->container['tag_filters'] = $tag_filters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

