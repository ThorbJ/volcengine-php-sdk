<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vpc\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CreateTrafficMirrorFilterRuleRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateTrafficMirrorFilterRuleRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'client_token' => 'string',
        'description' => 'string',
        'destination_cidr_block' => 'string',
        'destination_port_range' => 'string',
        'policy' => 'string',
        'priority' => 'int',
        'protocol' => 'string',
        'source_cidr_block' => 'string',
        'source_port_range' => 'string',
        'traffic_direction' => 'string',
        'traffic_mirror_filter_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'client_token' => null,
        'description' => null,
        'destination_cidr_block' => null,
        'destination_port_range' => null,
        'policy' => null,
        'priority' => null,
        'protocol' => null,
        'source_cidr_block' => null,
        'source_port_range' => null,
        'traffic_direction' => null,
        'traffic_mirror_filter_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'client_token' => 'ClientToken',
        'description' => 'Description',
        'destination_cidr_block' => 'DestinationCidrBlock',
        'destination_port_range' => 'DestinationPortRange',
        'policy' => 'Policy',
        'priority' => 'Priority',
        'protocol' => 'Protocol',
        'source_cidr_block' => 'SourceCidrBlock',
        'source_port_range' => 'SourcePortRange',
        'traffic_direction' => 'TrafficDirection',
        'traffic_mirror_filter_id' => 'TrafficMirrorFilterId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'client_token' => 'setClientToken',
        'description' => 'setDescription',
        'destination_cidr_block' => 'setDestinationCidrBlock',
        'destination_port_range' => 'setDestinationPortRange',
        'policy' => 'setPolicy',
        'priority' => 'setPriority',
        'protocol' => 'setProtocol',
        'source_cidr_block' => 'setSourceCidrBlock',
        'source_port_range' => 'setSourcePortRange',
        'traffic_direction' => 'setTrafficDirection',
        'traffic_mirror_filter_id' => 'setTrafficMirrorFilterId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'client_token' => 'getClientToken',
        'description' => 'getDescription',
        'destination_cidr_block' => 'getDestinationCidrBlock',
        'destination_port_range' => 'getDestinationPortRange',
        'policy' => 'getPolicy',
        'priority' => 'getPriority',
        'protocol' => 'getProtocol',
        'source_cidr_block' => 'getSourceCidrBlock',
        'source_port_range' => 'getSourcePortRange',
        'traffic_direction' => 'getTrafficDirection',
        'traffic_mirror_filter_id' => 'getTrafficMirrorFilterId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const POLICY_ACCEPT = 'accept';
    const POLICY_REJECT = 'reject';
    const PROTOCOL_TCP = 'tcp';
    const PROTOCOL_UDP = 'udp';
    const PROTOCOL_ICMP = 'icmp';
    const PROTOCOL_ALL = 'all';
    const TRAFFIC_DIRECTION_EGRESS = 'egress';
    const TRAFFIC_DIRECTION_INGRESS = 'ingress';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPolicyAllowableValues()
    {
        return [
            self::POLICY_ACCEPT,
            self::POLICY_REJECT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProtocolAllowableValues()
    {
        return [
            self::PROTOCOL_TCP,
            self::PROTOCOL_UDP,
            self::PROTOCOL_ICMP,
            self::PROTOCOL_ALL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTrafficDirectionAllowableValues()
    {
        return [
            self::TRAFFIC_DIRECTION_EGRESS,
            self::TRAFFIC_DIRECTION_INGRESS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['client_token'] = isset($data['client_token']) ? $data['client_token'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['destination_cidr_block'] = isset($data['destination_cidr_block']) ? $data['destination_cidr_block'] : null;
        $this->container['destination_port_range'] = isset($data['destination_port_range']) ? $data['destination_port_range'] : null;
        $this->container['policy'] = isset($data['policy']) ? $data['policy'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['protocol'] = isset($data['protocol']) ? $data['protocol'] : null;
        $this->container['source_cidr_block'] = isset($data['source_cidr_block']) ? $data['source_cidr_block'] : null;
        $this->container['source_port_range'] = isset($data['source_port_range']) ? $data['source_port_range'] : null;
        $this->container['traffic_direction'] = isset($data['traffic_direction']) ? $data['traffic_direction'] : null;
        $this->container['traffic_mirror_filter_id'] = isset($data['traffic_mirror_filter_id']) ? $data['traffic_mirror_filter_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['destination_cidr_block'] === null) {
            $invalidProperties[] = "'destination_cidr_block' can't be null";
        }
        if ($this->container['policy'] === null) {
            $invalidProperties[] = "'policy' can't be null";
        }
        $allowedValues = $this->getPolicyAllowableValues();
        if (!is_null($this->container['policy']) && !in_array($this->container['policy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'policy', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['protocol'] === null) {
            $invalidProperties[] = "'protocol' can't be null";
        }
        $allowedValues = $this->getProtocolAllowableValues();
        if (!is_null($this->container['protocol']) && !in_array($this->container['protocol'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'protocol', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['source_cidr_block'] === null) {
            $invalidProperties[] = "'source_cidr_block' can't be null";
        }
        if ($this->container['traffic_direction'] === null) {
            $invalidProperties[] = "'traffic_direction' can't be null";
        }
        $allowedValues = $this->getTrafficDirectionAllowableValues();
        if (!is_null($this->container['traffic_direction']) && !in_array($this->container['traffic_direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'traffic_direction', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['traffic_mirror_filter_id'] === null) {
            $invalidProperties[] = "'traffic_mirror_filter_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets client_token
     *
     * @return string
     */
    public function getClientToken()
    {
        return $this->container['client_token'];
    }

    /**
     * Sets client_token
     *
     * @param string $client_token client_token
     *
     * @return $this
     */
    public function setClientToken($client_token)
    {
        $this->container['client_token'] = $client_token;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets destination_cidr_block
     *
     * @return string
     */
    public function getDestinationCidrBlock()
    {
        return $this->container['destination_cidr_block'];
    }

    /**
     * Sets destination_cidr_block
     *
     * @param string $destination_cidr_block destination_cidr_block
     *
     * @return $this
     */
    public function setDestinationCidrBlock($destination_cidr_block)
    {
        $this->container['destination_cidr_block'] = $destination_cidr_block;

        return $this;
    }

    /**
     * Gets destination_port_range
     *
     * @return string
     */
    public function getDestinationPortRange()
    {
        return $this->container['destination_port_range'];
    }

    /**
     * Sets destination_port_range
     *
     * @param string $destination_port_range destination_port_range
     *
     * @return $this
     */
    public function setDestinationPortRange($destination_port_range)
    {
        $this->container['destination_port_range'] = $destination_port_range;

        return $this;
    }

    /**
     * Gets policy
     *
     * @return string
     */
    public function getPolicy()
    {
        return $this->container['policy'];
    }

    /**
     * Sets policy
     *
     * @param string $policy policy
     *
     * @return $this
     */
    public function setPolicy($policy)
    {
        $allowedValues = $this->getPolicyAllowableValues();
        if (!in_array($policy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'policy', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['policy'] = $policy;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int $priority priority
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string $protocol protocol
     *
     * @return $this
     */
    public function setProtocol($protocol)
    {
        $allowedValues = $this->getProtocolAllowableValues();
        if (!in_array($protocol, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'protocol', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets source_cidr_block
     *
     * @return string
     */
    public function getSourceCidrBlock()
    {
        return $this->container['source_cidr_block'];
    }

    /**
     * Sets source_cidr_block
     *
     * @param string $source_cidr_block source_cidr_block
     *
     * @return $this
     */
    public function setSourceCidrBlock($source_cidr_block)
    {
        $this->container['source_cidr_block'] = $source_cidr_block;

        return $this;
    }

    /**
     * Gets source_port_range
     *
     * @return string
     */
    public function getSourcePortRange()
    {
        return $this->container['source_port_range'];
    }

    /**
     * Sets source_port_range
     *
     * @param string $source_port_range source_port_range
     *
     * @return $this
     */
    public function setSourcePortRange($source_port_range)
    {
        $this->container['source_port_range'] = $source_port_range;

        return $this;
    }

    /**
     * Gets traffic_direction
     *
     * @return string
     */
    public function getTrafficDirection()
    {
        return $this->container['traffic_direction'];
    }

    /**
     * Sets traffic_direction
     *
     * @param string $traffic_direction traffic_direction
     *
     * @return $this
     */
    public function setTrafficDirection($traffic_direction)
    {
        $allowedValues = $this->getTrafficDirectionAllowableValues();
        if (!in_array($traffic_direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'traffic_direction', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['traffic_direction'] = $traffic_direction;

        return $this;
    }

    /**
     * Gets traffic_mirror_filter_id
     *
     * @return string
     */
    public function getTrafficMirrorFilterId()
    {
        return $this->container['traffic_mirror_filter_id'];
    }

    /**
     * Sets traffic_mirror_filter_id
     *
     * @param string $traffic_mirror_filter_id traffic_mirror_filter_id
     *
     * @return $this
     */
    public function setTrafficMirrorFilterId($traffic_mirror_filter_id)
    {
        $this->container['traffic_mirror_filter_id'] = $traffic_mirror_filter_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

