<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vpc\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DescribeEipAddressAttributesResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DescribeEipAddressAttributesResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'allocation_id' => 'string',
        'allocation_time' => 'string',
        'bandwidth' => 'int',
        'bandwidth_package_id' => 'string',
        'billing_type' => 'int',
        'business_status' => 'string',
        'deleted_time' => 'string',
        'description' => 'string',
        'eip_address' => 'string',
        'expired_time' => 'string',
        'isp' => 'string',
        'instance_id' => 'string',
        'instance_type' => 'string',
        'ip_address_pool_id' => 'string',
        'is_blocked' => 'bool',
        'lock_reason' => 'string',
        'name' => 'string',
        'overdue_time' => 'string',
        'project_name' => 'string',
        'release_with_instance' => 'bool',
        'request_id' => 'string',
        'security_protection_types' => 'string[]',
        'service_managed' => 'bool',
        'status' => 'string',
        'tags' => '\Volcengine\Vpc\Model\TagForDescribeEipAddressAttributesOutput[]',
        'updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'allocation_id' => null,
        'allocation_time' => null,
        'bandwidth' => null,
        'bandwidth_package_id' => null,
        'billing_type' => null,
        'business_status' => null,
        'deleted_time' => null,
        'description' => null,
        'eip_address' => null,
        'expired_time' => null,
        'isp' => null,
        'instance_id' => null,
        'instance_type' => null,
        'ip_address_pool_id' => null,
        'is_blocked' => null,
        'lock_reason' => null,
        'name' => null,
        'overdue_time' => null,
        'project_name' => null,
        'release_with_instance' => null,
        'request_id' => null,
        'security_protection_types' => null,
        'service_managed' => null,
        'status' => null,
        'tags' => null,
        'updated_at' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allocation_id' => 'AllocationId',
        'allocation_time' => 'AllocationTime',
        'bandwidth' => 'Bandwidth',
        'bandwidth_package_id' => 'BandwidthPackageId',
        'billing_type' => 'BillingType',
        'business_status' => 'BusinessStatus',
        'deleted_time' => 'DeletedTime',
        'description' => 'Description',
        'eip_address' => 'EipAddress',
        'expired_time' => 'ExpiredTime',
        'isp' => 'ISP',
        'instance_id' => 'InstanceId',
        'instance_type' => 'InstanceType',
        'ip_address_pool_id' => 'IpAddressPoolId',
        'is_blocked' => 'IsBlocked',
        'lock_reason' => 'LockReason',
        'name' => 'Name',
        'overdue_time' => 'OverdueTime',
        'project_name' => 'ProjectName',
        'release_with_instance' => 'ReleaseWithInstance',
        'request_id' => 'RequestId',
        'security_protection_types' => 'SecurityProtectionTypes',
        'service_managed' => 'ServiceManaged',
        'status' => 'Status',
        'tags' => 'Tags',
        'updated_at' => 'UpdatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allocation_id' => 'setAllocationId',
        'allocation_time' => 'setAllocationTime',
        'bandwidth' => 'setBandwidth',
        'bandwidth_package_id' => 'setBandwidthPackageId',
        'billing_type' => 'setBillingType',
        'business_status' => 'setBusinessStatus',
        'deleted_time' => 'setDeletedTime',
        'description' => 'setDescription',
        'eip_address' => 'setEipAddress',
        'expired_time' => 'setExpiredTime',
        'isp' => 'setIsp',
        'instance_id' => 'setInstanceId',
        'instance_type' => 'setInstanceType',
        'ip_address_pool_id' => 'setIpAddressPoolId',
        'is_blocked' => 'setIsBlocked',
        'lock_reason' => 'setLockReason',
        'name' => 'setName',
        'overdue_time' => 'setOverdueTime',
        'project_name' => 'setProjectName',
        'release_with_instance' => 'setReleaseWithInstance',
        'request_id' => 'setRequestId',
        'security_protection_types' => 'setSecurityProtectionTypes',
        'service_managed' => 'setServiceManaged',
        'status' => 'setStatus',
        'tags' => 'setTags',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allocation_id' => 'getAllocationId',
        'allocation_time' => 'getAllocationTime',
        'bandwidth' => 'getBandwidth',
        'bandwidth_package_id' => 'getBandwidthPackageId',
        'billing_type' => 'getBillingType',
        'business_status' => 'getBusinessStatus',
        'deleted_time' => 'getDeletedTime',
        'description' => 'getDescription',
        'eip_address' => 'getEipAddress',
        'expired_time' => 'getExpiredTime',
        'isp' => 'getIsp',
        'instance_id' => 'getInstanceId',
        'instance_type' => 'getInstanceType',
        'ip_address_pool_id' => 'getIpAddressPoolId',
        'is_blocked' => 'getIsBlocked',
        'lock_reason' => 'getLockReason',
        'name' => 'getName',
        'overdue_time' => 'getOverdueTime',
        'project_name' => 'getProjectName',
        'release_with_instance' => 'getReleaseWithInstance',
        'request_id' => 'getRequestId',
        'security_protection_types' => 'getSecurityProtectionTypes',
        'service_managed' => 'getServiceManaged',
        'status' => 'getStatus',
        'tags' => 'getTags',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allocation_id'] = isset($data['allocation_id']) ? $data['allocation_id'] : null;
        $this->container['allocation_time'] = isset($data['allocation_time']) ? $data['allocation_time'] : null;
        $this->container['bandwidth'] = isset($data['bandwidth']) ? $data['bandwidth'] : null;
        $this->container['bandwidth_package_id'] = isset($data['bandwidth_package_id']) ? $data['bandwidth_package_id'] : null;
        $this->container['billing_type'] = isset($data['billing_type']) ? $data['billing_type'] : null;
        $this->container['business_status'] = isset($data['business_status']) ? $data['business_status'] : null;
        $this->container['deleted_time'] = isset($data['deleted_time']) ? $data['deleted_time'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['eip_address'] = isset($data['eip_address']) ? $data['eip_address'] : null;
        $this->container['expired_time'] = isset($data['expired_time']) ? $data['expired_time'] : null;
        $this->container['isp'] = isset($data['isp']) ? $data['isp'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['instance_type'] = isset($data['instance_type']) ? $data['instance_type'] : null;
        $this->container['ip_address_pool_id'] = isset($data['ip_address_pool_id']) ? $data['ip_address_pool_id'] : null;
        $this->container['is_blocked'] = isset($data['is_blocked']) ? $data['is_blocked'] : null;
        $this->container['lock_reason'] = isset($data['lock_reason']) ? $data['lock_reason'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['overdue_time'] = isset($data['overdue_time']) ? $data['overdue_time'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['release_with_instance'] = isset($data['release_with_instance']) ? $data['release_with_instance'] : null;
        $this->container['request_id'] = isset($data['request_id']) ? $data['request_id'] : null;
        $this->container['security_protection_types'] = isset($data['security_protection_types']) ? $data['security_protection_types'] : null;
        $this->container['service_managed'] = isset($data['service_managed']) ? $data['service_managed'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allocation_id
     *
     * @return string
     */
    public function getAllocationId()
    {
        return $this->container['allocation_id'];
    }

    /**
     * Sets allocation_id
     *
     * @param string $allocation_id allocation_id
     *
     * @return $this
     */
    public function setAllocationId($allocation_id)
    {
        $this->container['allocation_id'] = $allocation_id;

        return $this;
    }

    /**
     * Gets allocation_time
     *
     * @return string
     */
    public function getAllocationTime()
    {
        return $this->container['allocation_time'];
    }

    /**
     * Sets allocation_time
     *
     * @param string $allocation_time allocation_time
     *
     * @return $this
     */
    public function setAllocationTime($allocation_time)
    {
        $this->container['allocation_time'] = $allocation_time;

        return $this;
    }

    /**
     * Gets bandwidth
     *
     * @return int
     */
    public function getBandwidth()
    {
        return $this->container['bandwidth'];
    }

    /**
     * Sets bandwidth
     *
     * @param int $bandwidth bandwidth
     *
     * @return $this
     */
    public function setBandwidth($bandwidth)
    {
        $this->container['bandwidth'] = $bandwidth;

        return $this;
    }

    /**
     * Gets bandwidth_package_id
     *
     * @return string
     */
    public function getBandwidthPackageId()
    {
        return $this->container['bandwidth_package_id'];
    }

    /**
     * Sets bandwidth_package_id
     *
     * @param string $bandwidth_package_id bandwidth_package_id
     *
     * @return $this
     */
    public function setBandwidthPackageId($bandwidth_package_id)
    {
        $this->container['bandwidth_package_id'] = $bandwidth_package_id;

        return $this;
    }

    /**
     * Gets billing_type
     *
     * @return int
     */
    public function getBillingType()
    {
        return $this->container['billing_type'];
    }

    /**
     * Sets billing_type
     *
     * @param int $billing_type billing_type
     *
     * @return $this
     */
    public function setBillingType($billing_type)
    {
        $this->container['billing_type'] = $billing_type;

        return $this;
    }

    /**
     * Gets business_status
     *
     * @return string
     */
    public function getBusinessStatus()
    {
        return $this->container['business_status'];
    }

    /**
     * Sets business_status
     *
     * @param string $business_status business_status
     *
     * @return $this
     */
    public function setBusinessStatus($business_status)
    {
        $this->container['business_status'] = $business_status;

        return $this;
    }

    /**
     * Gets deleted_time
     *
     * @return string
     */
    public function getDeletedTime()
    {
        return $this->container['deleted_time'];
    }

    /**
     * Sets deleted_time
     *
     * @param string $deleted_time deleted_time
     *
     * @return $this
     */
    public function setDeletedTime($deleted_time)
    {
        $this->container['deleted_time'] = $deleted_time;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets eip_address
     *
     * @return string
     */
    public function getEipAddress()
    {
        return $this->container['eip_address'];
    }

    /**
     * Sets eip_address
     *
     * @param string $eip_address eip_address
     *
     * @return $this
     */
    public function setEipAddress($eip_address)
    {
        $this->container['eip_address'] = $eip_address;

        return $this;
    }

    /**
     * Gets expired_time
     *
     * @return string
     */
    public function getExpiredTime()
    {
        return $this->container['expired_time'];
    }

    /**
     * Sets expired_time
     *
     * @param string $expired_time expired_time
     *
     * @return $this
     */
    public function setExpiredTime($expired_time)
    {
        $this->container['expired_time'] = $expired_time;

        return $this;
    }

    /**
     * Gets isp
     *
     * @return string
     */
    public function getIsp()
    {
        return $this->container['isp'];
    }

    /**
     * Sets isp
     *
     * @param string $isp isp
     *
     * @return $this
     */
    public function setIsp($isp)
    {
        $this->container['isp'] = $isp;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets instance_type
     *
     * @return string
     */
    public function getInstanceType()
    {
        return $this->container['instance_type'];
    }

    /**
     * Sets instance_type
     *
     * @param string $instance_type instance_type
     *
     * @return $this
     */
    public function setInstanceType($instance_type)
    {
        $this->container['instance_type'] = $instance_type;

        return $this;
    }

    /**
     * Gets ip_address_pool_id
     *
     * @return string
     */
    public function getIpAddressPoolId()
    {
        return $this->container['ip_address_pool_id'];
    }

    /**
     * Sets ip_address_pool_id
     *
     * @param string $ip_address_pool_id ip_address_pool_id
     *
     * @return $this
     */
    public function setIpAddressPoolId($ip_address_pool_id)
    {
        $this->container['ip_address_pool_id'] = $ip_address_pool_id;

        return $this;
    }

    /**
     * Gets is_blocked
     *
     * @return bool
     */
    public function getIsBlocked()
    {
        return $this->container['is_blocked'];
    }

    /**
     * Sets is_blocked
     *
     * @param bool $is_blocked is_blocked
     *
     * @return $this
     */
    public function setIsBlocked($is_blocked)
    {
        $this->container['is_blocked'] = $is_blocked;

        return $this;
    }

    /**
     * Gets lock_reason
     *
     * @return string
     */
    public function getLockReason()
    {
        return $this->container['lock_reason'];
    }

    /**
     * Sets lock_reason
     *
     * @param string $lock_reason lock_reason
     *
     * @return $this
     */
    public function setLockReason($lock_reason)
    {
        $this->container['lock_reason'] = $lock_reason;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets overdue_time
     *
     * @return string
     */
    public function getOverdueTime()
    {
        return $this->container['overdue_time'];
    }

    /**
     * Sets overdue_time
     *
     * @param string $overdue_time overdue_time
     *
     * @return $this
     */
    public function setOverdueTime($overdue_time)
    {
        $this->container['overdue_time'] = $overdue_time;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets release_with_instance
     *
     * @return bool
     */
    public function getReleaseWithInstance()
    {
        return $this->container['release_with_instance'];
    }

    /**
     * Sets release_with_instance
     *
     * @param bool $release_with_instance release_with_instance
     *
     * @return $this
     */
    public function setReleaseWithInstance($release_with_instance)
    {
        $this->container['release_with_instance'] = $release_with_instance;

        return $this;
    }

    /**
     * Gets request_id
     *
     * @return string
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     *
     * @param string $request_id request_id
     *
     * @return $this
     */
    public function setRequestId($request_id)
    {
        $this->container['request_id'] = $request_id;

        return $this;
    }

    /**
     * Gets security_protection_types
     *
     * @return string[]
     */
    public function getSecurityProtectionTypes()
    {
        return $this->container['security_protection_types'];
    }

    /**
     * Sets security_protection_types
     *
     * @param string[] $security_protection_types security_protection_types
     *
     * @return $this
     */
    public function setSecurityProtectionTypes($security_protection_types)
    {
        $this->container['security_protection_types'] = $security_protection_types;

        return $this;
    }

    /**
     * Gets service_managed
     *
     * @return bool
     */
    public function getServiceManaged()
    {
        return $this->container['service_managed'];
    }

    /**
     * Sets service_managed
     *
     * @param bool $service_managed service_managed
     *
     * @return $this
     */
    public function setServiceManaged($service_managed)
    {
        $this->container['service_managed'] = $service_managed;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Vpc\Model\TagForDescribeEipAddressAttributesOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Vpc\Model\TagForDescribeEipAddressAttributesOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

