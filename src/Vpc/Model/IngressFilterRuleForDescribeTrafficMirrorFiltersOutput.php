<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vpc\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class IngressFilterRuleForDescribeTrafficMirrorFiltersOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'IngressFilterRuleForDescribeTrafficMirrorFiltersOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'description' => 'string',
        'destination_cidr_block' => 'string',
        'destination_port_range' => 'string',
        'policy' => 'string',
        'priority' => 'int',
        'project_name' => 'string',
        'protocol' => 'string',
        'source_cidr_block' => 'string',
        'source_port_range' => 'string',
        'status' => 'string',
        'traffic_direction' => 'string',
        'traffic_mirror_filter_id' => 'string',
        'traffic_mirror_filter_rule_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'description' => null,
        'destination_cidr_block' => null,
        'destination_port_range' => null,
        'policy' => null,
        'priority' => null,
        'project_name' => null,
        'protocol' => null,
        'source_cidr_block' => null,
        'source_port_range' => null,
        'status' => null,
        'traffic_direction' => null,
        'traffic_mirror_filter_id' => null,
        'traffic_mirror_filter_rule_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'Description',
        'destination_cidr_block' => 'DestinationCidrBlock',
        'destination_port_range' => 'DestinationPortRange',
        'policy' => 'Policy',
        'priority' => 'Priority',
        'project_name' => 'ProjectName',
        'protocol' => 'Protocol',
        'source_cidr_block' => 'SourceCidrBlock',
        'source_port_range' => 'SourcePortRange',
        'status' => 'Status',
        'traffic_direction' => 'TrafficDirection',
        'traffic_mirror_filter_id' => 'TrafficMirrorFilterId',
        'traffic_mirror_filter_rule_id' => 'TrafficMirrorFilterRuleId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'destination_cidr_block' => 'setDestinationCidrBlock',
        'destination_port_range' => 'setDestinationPortRange',
        'policy' => 'setPolicy',
        'priority' => 'setPriority',
        'project_name' => 'setProjectName',
        'protocol' => 'setProtocol',
        'source_cidr_block' => 'setSourceCidrBlock',
        'source_port_range' => 'setSourcePortRange',
        'status' => 'setStatus',
        'traffic_direction' => 'setTrafficDirection',
        'traffic_mirror_filter_id' => 'setTrafficMirrorFilterId',
        'traffic_mirror_filter_rule_id' => 'setTrafficMirrorFilterRuleId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'destination_cidr_block' => 'getDestinationCidrBlock',
        'destination_port_range' => 'getDestinationPortRange',
        'policy' => 'getPolicy',
        'priority' => 'getPriority',
        'project_name' => 'getProjectName',
        'protocol' => 'getProtocol',
        'source_cidr_block' => 'getSourceCidrBlock',
        'source_port_range' => 'getSourcePortRange',
        'status' => 'getStatus',
        'traffic_direction' => 'getTrafficDirection',
        'traffic_mirror_filter_id' => 'getTrafficMirrorFilterId',
        'traffic_mirror_filter_rule_id' => 'getTrafficMirrorFilterRuleId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['destination_cidr_block'] = isset($data['destination_cidr_block']) ? $data['destination_cidr_block'] : null;
        $this->container['destination_port_range'] = isset($data['destination_port_range']) ? $data['destination_port_range'] : null;
        $this->container['policy'] = isset($data['policy']) ? $data['policy'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['protocol'] = isset($data['protocol']) ? $data['protocol'] : null;
        $this->container['source_cidr_block'] = isset($data['source_cidr_block']) ? $data['source_cidr_block'] : null;
        $this->container['source_port_range'] = isset($data['source_port_range']) ? $data['source_port_range'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['traffic_direction'] = isset($data['traffic_direction']) ? $data['traffic_direction'] : null;
        $this->container['traffic_mirror_filter_id'] = isset($data['traffic_mirror_filter_id']) ? $data['traffic_mirror_filter_id'] : null;
        $this->container['traffic_mirror_filter_rule_id'] = isset($data['traffic_mirror_filter_rule_id']) ? $data['traffic_mirror_filter_rule_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets destination_cidr_block
     *
     * @return string
     */
    public function getDestinationCidrBlock()
    {
        return $this->container['destination_cidr_block'];
    }

    /**
     * Sets destination_cidr_block
     *
     * @param string $destination_cidr_block destination_cidr_block
     *
     * @return $this
     */
    public function setDestinationCidrBlock($destination_cidr_block)
    {
        $this->container['destination_cidr_block'] = $destination_cidr_block;

        return $this;
    }

    /**
     * Gets destination_port_range
     *
     * @return string
     */
    public function getDestinationPortRange()
    {
        return $this->container['destination_port_range'];
    }

    /**
     * Sets destination_port_range
     *
     * @param string $destination_port_range destination_port_range
     *
     * @return $this
     */
    public function setDestinationPortRange($destination_port_range)
    {
        $this->container['destination_port_range'] = $destination_port_range;

        return $this;
    }

    /**
     * Gets policy
     *
     * @return string
     */
    public function getPolicy()
    {
        return $this->container['policy'];
    }

    /**
     * Sets policy
     *
     * @param string $policy policy
     *
     * @return $this
     */
    public function setPolicy($policy)
    {
        $this->container['policy'] = $policy;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int $priority priority
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string $protocol protocol
     *
     * @return $this
     */
    public function setProtocol($protocol)
    {
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets source_cidr_block
     *
     * @return string
     */
    public function getSourceCidrBlock()
    {
        return $this->container['source_cidr_block'];
    }

    /**
     * Sets source_cidr_block
     *
     * @param string $source_cidr_block source_cidr_block
     *
     * @return $this
     */
    public function setSourceCidrBlock($source_cidr_block)
    {
        $this->container['source_cidr_block'] = $source_cidr_block;

        return $this;
    }

    /**
     * Gets source_port_range
     *
     * @return string
     */
    public function getSourcePortRange()
    {
        return $this->container['source_port_range'];
    }

    /**
     * Sets source_port_range
     *
     * @param string $source_port_range source_port_range
     *
     * @return $this
     */
    public function setSourcePortRange($source_port_range)
    {
        $this->container['source_port_range'] = $source_port_range;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets traffic_direction
     *
     * @return string
     */
    public function getTrafficDirection()
    {
        return $this->container['traffic_direction'];
    }

    /**
     * Sets traffic_direction
     *
     * @param string $traffic_direction traffic_direction
     *
     * @return $this
     */
    public function setTrafficDirection($traffic_direction)
    {
        $this->container['traffic_direction'] = $traffic_direction;

        return $this;
    }

    /**
     * Gets traffic_mirror_filter_id
     *
     * @return string
     */
    public function getTrafficMirrorFilterId()
    {
        return $this->container['traffic_mirror_filter_id'];
    }

    /**
     * Sets traffic_mirror_filter_id
     *
     * @param string $traffic_mirror_filter_id traffic_mirror_filter_id
     *
     * @return $this
     */
    public function setTrafficMirrorFilterId($traffic_mirror_filter_id)
    {
        $this->container['traffic_mirror_filter_id'] = $traffic_mirror_filter_id;

        return $this;
    }

    /**
     * Gets traffic_mirror_filter_rule_id
     *
     * @return string
     */
    public function getTrafficMirrorFilterRuleId()
    {
        return $this->container['traffic_mirror_filter_rule_id'];
    }

    /**
     * Sets traffic_mirror_filter_rule_id
     *
     * @param string $traffic_mirror_filter_rule_id traffic_mirror_filter_rule_id
     *
     * @return $this
     */
    public function setTrafficMirrorFilterRuleId($traffic_mirror_filter_rule_id)
    {
        $this->container['traffic_mirror_filter_rule_id'] = $traffic_mirror_filter_rule_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

