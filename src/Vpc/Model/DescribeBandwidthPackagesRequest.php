<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vpc\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DescribeBandwidthPackagesRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DescribeBandwidthPackagesRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bandwidth_package_ids' => 'string[]',
        'bandwidth_package_name' => 'string',
        'isp' => 'string',
        'max_results' => 'int',
        'next_token' => 'string',
        'page_number' => 'int',
        'page_size' => 'int',
        'project_name' => 'string',
        'protocol' => 'string',
        'security_protection_enabled' => 'bool',
        'tag_filters' => '\Volcengine\Vpc\Model\TagFilterForDescribeBandwidthPackagesInput[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bandwidth_package_ids' => null,
        'bandwidth_package_name' => null,
        'isp' => null,
        'max_results' => null,
        'next_token' => null,
        'page_number' => null,
        'page_size' => null,
        'project_name' => null,
        'protocol' => null,
        'security_protection_enabled' => null,
        'tag_filters' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bandwidth_package_ids' => 'BandwidthPackageIds',
        'bandwidth_package_name' => 'BandwidthPackageName',
        'isp' => 'ISP',
        'max_results' => 'MaxResults',
        'next_token' => 'NextToken',
        'page_number' => 'PageNumber',
        'page_size' => 'PageSize',
        'project_name' => 'ProjectName',
        'protocol' => 'Protocol',
        'security_protection_enabled' => 'SecurityProtectionEnabled',
        'tag_filters' => 'TagFilters'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bandwidth_package_ids' => 'setBandwidthPackageIds',
        'bandwidth_package_name' => 'setBandwidthPackageName',
        'isp' => 'setIsp',
        'max_results' => 'setMaxResults',
        'next_token' => 'setNextToken',
        'page_number' => 'setPageNumber',
        'page_size' => 'setPageSize',
        'project_name' => 'setProjectName',
        'protocol' => 'setProtocol',
        'security_protection_enabled' => 'setSecurityProtectionEnabled',
        'tag_filters' => 'setTagFilters'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bandwidth_package_ids' => 'getBandwidthPackageIds',
        'bandwidth_package_name' => 'getBandwidthPackageName',
        'isp' => 'getIsp',
        'max_results' => 'getMaxResults',
        'next_token' => 'getNextToken',
        'page_number' => 'getPageNumber',
        'page_size' => 'getPageSize',
        'project_name' => 'getProjectName',
        'protocol' => 'getProtocol',
        'security_protection_enabled' => 'getSecurityProtectionEnabled',
        'tag_filters' => 'getTagFilters'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ISP_BGP = 'BGP';
    const ISP_SINGLE_LINE_BGP = 'SingleLine_BGP';
    const ISP_STATIC_BGP = 'Static_BGP';
    const ISP_FUSION_BGP = 'Fusion_BGP';
    const ISP_CHINA_MOBILE = 'ChinaMobile';
    const ISP_CHINA_UNICOM = 'ChinaUnicom';
    const ISP_CHINA_TELECOM = 'ChinaTelecom';
    const ISP_CHINA_MOBILE_VALUE = 'ChinaMobile_Value';
    const ISP_CHINA_UNICOM_VALUE = 'ChinaUnicom_Value';
    const ISP_CHINA_TELECOM_VALUE = 'ChinaTelecom_Value';
    const PROTOCOL_I_PV4 = 'IPv4';
    const PROTOCOL_DUAL_STACK = 'Dual-stack';
    const PROTOCOL_I_PV6 = 'IPv6';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIspAllowableValues()
    {
        return [
            self::ISP_BGP,
            self::ISP_SINGLE_LINE_BGP,
            self::ISP_STATIC_BGP,
            self::ISP_FUSION_BGP,
            self::ISP_CHINA_MOBILE,
            self::ISP_CHINA_UNICOM,
            self::ISP_CHINA_TELECOM,
            self::ISP_CHINA_MOBILE_VALUE,
            self::ISP_CHINA_UNICOM_VALUE,
            self::ISP_CHINA_TELECOM_VALUE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProtocolAllowableValues()
    {
        return [
            self::PROTOCOL_I_PV4,
            self::PROTOCOL_DUAL_STACK,
            self::PROTOCOL_I_PV6,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bandwidth_package_ids'] = isset($data['bandwidth_package_ids']) ? $data['bandwidth_package_ids'] : null;
        $this->container['bandwidth_package_name'] = isset($data['bandwidth_package_name']) ? $data['bandwidth_package_name'] : null;
        $this->container['isp'] = isset($data['isp']) ? $data['isp'] : null;
        $this->container['max_results'] = isset($data['max_results']) ? $data['max_results'] : null;
        $this->container['next_token'] = isset($data['next_token']) ? $data['next_token'] : null;
        $this->container['page_number'] = isset($data['page_number']) ? $data['page_number'] : null;
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['protocol'] = isset($data['protocol']) ? $data['protocol'] : null;
        $this->container['security_protection_enabled'] = isset($data['security_protection_enabled']) ? $data['security_protection_enabled'] : null;
        $this->container['tag_filters'] = isset($data['tag_filters']) ? $data['tag_filters'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getIspAllowableValues();
        if (!is_null($this->container['isp']) && !in_array($this->container['isp'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'isp', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getProtocolAllowableValues();
        if (!is_null($this->container['protocol']) && !in_array($this->container['protocol'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'protocol', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bandwidth_package_ids
     *
     * @return string[]
     */
    public function getBandwidthPackageIds()
    {
        return $this->container['bandwidth_package_ids'];
    }

    /**
     * Sets bandwidth_package_ids
     *
     * @param string[] $bandwidth_package_ids bandwidth_package_ids
     *
     * @return $this
     */
    public function setBandwidthPackageIds($bandwidth_package_ids)
    {
        $this->container['bandwidth_package_ids'] = $bandwidth_package_ids;

        return $this;
    }

    /**
     * Gets bandwidth_package_name
     *
     * @return string
     */
    public function getBandwidthPackageName()
    {
        return $this->container['bandwidth_package_name'];
    }

    /**
     * Sets bandwidth_package_name
     *
     * @param string $bandwidth_package_name bandwidth_package_name
     *
     * @return $this
     */
    public function setBandwidthPackageName($bandwidth_package_name)
    {
        $this->container['bandwidth_package_name'] = $bandwidth_package_name;

        return $this;
    }

    /**
     * Gets isp
     *
     * @return string
     */
    public function getIsp()
    {
        return $this->container['isp'];
    }

    /**
     * Sets isp
     *
     * @param string $isp isp
     *
     * @return $this
     */
    public function setIsp($isp)
    {
        $allowedValues = $this->getIspAllowableValues();
        if (!is_null($isp) && !in_array($isp, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'isp', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['isp'] = $isp;

        return $this;
    }

    /**
     * Gets max_results
     *
     * @return int
     */
    public function getMaxResults()
    {
        return $this->container['max_results'];
    }

    /**
     * Sets max_results
     *
     * @param int $max_results max_results
     *
     * @return $this
     */
    public function setMaxResults($max_results)
    {
        $this->container['max_results'] = $max_results;

        return $this;
    }

    /**
     * Gets next_token
     *
     * @return string
     */
    public function getNextToken()
    {
        return $this->container['next_token'];
    }

    /**
     * Sets next_token
     *
     * @param string $next_token next_token
     *
     * @return $this
     */
    public function setNextToken($next_token)
    {
        $this->container['next_token'] = $next_token;

        return $this;
    }

    /**
     * Gets page_number
     *
     * @return int
     */
    public function getPageNumber()
    {
        return $this->container['page_number'];
    }

    /**
     * Sets page_number
     *
     * @param int $page_number page_number
     *
     * @return $this
     */
    public function setPageNumber($page_number)
    {
        $this->container['page_number'] = $page_number;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int $page_size page_size
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string $protocol protocol
     *
     * @return $this
     */
    public function setProtocol($protocol)
    {
        $allowedValues = $this->getProtocolAllowableValues();
        if (!is_null($protocol) && !in_array($protocol, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'protocol', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets security_protection_enabled
     *
     * @return bool
     */
    public function getSecurityProtectionEnabled()
    {
        return $this->container['security_protection_enabled'];
    }

    /**
     * Sets security_protection_enabled
     *
     * @param bool $security_protection_enabled security_protection_enabled
     *
     * @return $this
     */
    public function setSecurityProtectionEnabled($security_protection_enabled)
    {
        $this->container['security_protection_enabled'] = $security_protection_enabled;

        return $this;
    }

    /**
     * Gets tag_filters
     *
     * @return \Volcengine\Vpc\Model\TagFilterForDescribeBandwidthPackagesInput[]
     */
    public function getTagFilters()
    {
        return $this->container['tag_filters'];
    }

    /**
     * Sets tag_filters
     *
     * @param \Volcengine\Vpc\Model\TagFilterForDescribeBandwidthPackagesInput[] $tag_filters tag_filters
     *
     * @return $this
     */
    public function setTagFilters($tag_filters)
    {
        $this->container['tag_filters'] = $tag_filters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

