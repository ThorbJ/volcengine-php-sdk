<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vpc\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CreateFlowLogRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateFlowLogRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'aggregation_interval' => 'int',
        'client_token' => 'string',
        'description' => 'string',
        'flow_log_name' => 'string',
        'log_project_name' => 'string',
        'log_topic_name' => 'string',
        'project_name' => 'string',
        'resource_id' => 'string',
        'resource_type' => 'string',
        'tags' => '\Volcengine\Vpc\Model\TagForCreateFlowLogInput[]',
        'traffic_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'aggregation_interval' => null,
        'client_token' => null,
        'description' => null,
        'flow_log_name' => null,
        'log_project_name' => null,
        'log_topic_name' => null,
        'project_name' => null,
        'resource_id' => null,
        'resource_type' => null,
        'tags' => null,
        'traffic_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aggregation_interval' => 'AggregationInterval',
        'client_token' => 'ClientToken',
        'description' => 'Description',
        'flow_log_name' => 'FlowLogName',
        'log_project_name' => 'LogProjectName',
        'log_topic_name' => 'LogTopicName',
        'project_name' => 'ProjectName',
        'resource_id' => 'ResourceId',
        'resource_type' => 'ResourceType',
        'tags' => 'Tags',
        'traffic_type' => 'TrafficType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aggregation_interval' => 'setAggregationInterval',
        'client_token' => 'setClientToken',
        'description' => 'setDescription',
        'flow_log_name' => 'setFlowLogName',
        'log_project_name' => 'setLogProjectName',
        'log_topic_name' => 'setLogTopicName',
        'project_name' => 'setProjectName',
        'resource_id' => 'setResourceId',
        'resource_type' => 'setResourceType',
        'tags' => 'setTags',
        'traffic_type' => 'setTrafficType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aggregation_interval' => 'getAggregationInterval',
        'client_token' => 'getClientToken',
        'description' => 'getDescription',
        'flow_log_name' => 'getFlowLogName',
        'log_project_name' => 'getLogProjectName',
        'log_topic_name' => 'getLogTopicName',
        'project_name' => 'getProjectName',
        'resource_id' => 'getResourceId',
        'resource_type' => 'getResourceType',
        'tags' => 'getTags',
        'traffic_type' => 'getTrafficType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['aggregation_interval'] = isset($data['aggregation_interval']) ? $data['aggregation_interval'] : null;
        $this->container['client_token'] = isset($data['client_token']) ? $data['client_token'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['flow_log_name'] = isset($data['flow_log_name']) ? $data['flow_log_name'] : null;
        $this->container['log_project_name'] = isset($data['log_project_name']) ? $data['log_project_name'] : null;
        $this->container['log_topic_name'] = isset($data['log_topic_name']) ? $data['log_topic_name'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['resource_id'] = isset($data['resource_id']) ? $data['resource_id'] : null;
        $this->container['resource_type'] = isset($data['resource_type']) ? $data['resource_type'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['traffic_type'] = isset($data['traffic_type']) ? $data['traffic_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['aggregation_interval'] === null) {
            $invalidProperties[] = "'aggregation_interval' can't be null";
        }
        if ($this->container['flow_log_name'] === null) {
            $invalidProperties[] = "'flow_log_name' can't be null";
        }
        if ($this->container['log_project_name'] === null) {
            $invalidProperties[] = "'log_project_name' can't be null";
        }
        if ($this->container['log_topic_name'] === null) {
            $invalidProperties[] = "'log_topic_name' can't be null";
        }
        if ($this->container['resource_id'] === null) {
            $invalidProperties[] = "'resource_id' can't be null";
        }
        if ($this->container['resource_type'] === null) {
            $invalidProperties[] = "'resource_type' can't be null";
        }
        if ($this->container['traffic_type'] === null) {
            $invalidProperties[] = "'traffic_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets aggregation_interval
     *
     * @return int
     */
    public function getAggregationInterval()
    {
        return $this->container['aggregation_interval'];
    }

    /**
     * Sets aggregation_interval
     *
     * @param int $aggregation_interval aggregation_interval
     *
     * @return $this
     */
    public function setAggregationInterval($aggregation_interval)
    {
        $this->container['aggregation_interval'] = $aggregation_interval;

        return $this;
    }

    /**
     * Gets client_token
     *
     * @return string
     */
    public function getClientToken()
    {
        return $this->container['client_token'];
    }

    /**
     * Sets client_token
     *
     * @param string $client_token client_token
     *
     * @return $this
     */
    public function setClientToken($client_token)
    {
        $this->container['client_token'] = $client_token;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets flow_log_name
     *
     * @return string
     */
    public function getFlowLogName()
    {
        return $this->container['flow_log_name'];
    }

    /**
     * Sets flow_log_name
     *
     * @param string $flow_log_name flow_log_name
     *
     * @return $this
     */
    public function setFlowLogName($flow_log_name)
    {
        $this->container['flow_log_name'] = $flow_log_name;

        return $this;
    }

    /**
     * Gets log_project_name
     *
     * @return string
     */
    public function getLogProjectName()
    {
        return $this->container['log_project_name'];
    }

    /**
     * Sets log_project_name
     *
     * @param string $log_project_name log_project_name
     *
     * @return $this
     */
    public function setLogProjectName($log_project_name)
    {
        $this->container['log_project_name'] = $log_project_name;

        return $this;
    }

    /**
     * Gets log_topic_name
     *
     * @return string
     */
    public function getLogTopicName()
    {
        return $this->container['log_topic_name'];
    }

    /**
     * Sets log_topic_name
     *
     * @param string $log_topic_name log_topic_name
     *
     * @return $this
     */
    public function setLogTopicName($log_topic_name)
    {
        $this->container['log_topic_name'] = $log_topic_name;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets resource_id
     *
     * @return string
     */
    public function getResourceId()
    {
        return $this->container['resource_id'];
    }

    /**
     * Sets resource_id
     *
     * @param string $resource_id resource_id
     *
     * @return $this
     */
    public function setResourceId($resource_id)
    {
        $this->container['resource_id'] = $resource_id;

        return $this;
    }

    /**
     * Gets resource_type
     *
     * @return string
     */
    public function getResourceType()
    {
        return $this->container['resource_type'];
    }

    /**
     * Sets resource_type
     *
     * @param string $resource_type resource_type
     *
     * @return $this
     */
    public function setResourceType($resource_type)
    {
        $this->container['resource_type'] = $resource_type;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Vpc\Model\TagForCreateFlowLogInput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Vpc\Model\TagForCreateFlowLogInput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets traffic_type
     *
     * @return string
     */
    public function getTrafficType()
    {
        return $this->container['traffic_type'];
    }

    /**
     * Sets traffic_type
     *
     * @param string $traffic_type traffic_type
     *
     * @return $this
     */
    public function setTrafficType($traffic_type)
    {
        $this->container['traffic_type'] = $traffic_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

