<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vpc\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class VpcForDescribeVpcsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VpcForDescribeVpcsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'string',
        'associate_cens' => '\Volcengine\Vpc\Model\AssociateCenForDescribeVpcsOutput[]',
        'cidr_block' => 'string',
        'creation_time' => 'string',
        'description' => 'string',
        'dns_servers' => 'string[]',
        'ipv4_gateway_id' => 'string',
        'is_default' => 'bool',
        'nat_gateway_ids' => 'string[]',
        'network_acl_num' => 'string',
        'project_name' => 'string',
        'route_table_ids' => 'string[]',
        'secondary_cidr_blocks' => 'string[]',
        'security_group_ids' => 'string[]',
        'status' => 'string',
        'subnet_ids' => 'string[]',
        'support_ipv4_gateway' => 'bool',
        'tags' => '\Volcengine\Vpc\Model\TagForDescribeVpcsOutput[]',
        'update_time' => 'string',
        'user_cidr_blocks' => 'string[]',
        'vpc_id' => 'string',
        'vpc_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => null,
        'associate_cens' => null,
        'cidr_block' => null,
        'creation_time' => null,
        'description' => null,
        'dns_servers' => null,
        'ipv4_gateway_id' => null,
        'is_default' => null,
        'nat_gateway_ids' => null,
        'network_acl_num' => null,
        'project_name' => null,
        'route_table_ids' => null,
        'secondary_cidr_blocks' => null,
        'security_group_ids' => null,
        'status' => null,
        'subnet_ids' => null,
        'support_ipv4_gateway' => null,
        'tags' => null,
        'update_time' => null,
        'user_cidr_blocks' => null,
        'vpc_id' => null,
        'vpc_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'AccountId',
        'associate_cens' => 'AssociateCens',
        'cidr_block' => 'CidrBlock',
        'creation_time' => 'CreationTime',
        'description' => 'Description',
        'dns_servers' => 'DnsServers',
        'ipv4_gateway_id' => 'Ipv4GatewayId',
        'is_default' => 'IsDefault',
        'nat_gateway_ids' => 'NatGatewayIds',
        'network_acl_num' => 'NetworkAclNum',
        'project_name' => 'ProjectName',
        'route_table_ids' => 'RouteTableIds',
        'secondary_cidr_blocks' => 'SecondaryCidrBlocks',
        'security_group_ids' => 'SecurityGroupIds',
        'status' => 'Status',
        'subnet_ids' => 'SubnetIds',
        'support_ipv4_gateway' => 'SupportIpv4Gateway',
        'tags' => 'Tags',
        'update_time' => 'UpdateTime',
        'user_cidr_blocks' => 'UserCidrBlocks',
        'vpc_id' => 'VpcId',
        'vpc_name' => 'VpcName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'associate_cens' => 'setAssociateCens',
        'cidr_block' => 'setCidrBlock',
        'creation_time' => 'setCreationTime',
        'description' => 'setDescription',
        'dns_servers' => 'setDnsServers',
        'ipv4_gateway_id' => 'setIpv4GatewayId',
        'is_default' => 'setIsDefault',
        'nat_gateway_ids' => 'setNatGatewayIds',
        'network_acl_num' => 'setNetworkAclNum',
        'project_name' => 'setProjectName',
        'route_table_ids' => 'setRouteTableIds',
        'secondary_cidr_blocks' => 'setSecondaryCidrBlocks',
        'security_group_ids' => 'setSecurityGroupIds',
        'status' => 'setStatus',
        'subnet_ids' => 'setSubnetIds',
        'support_ipv4_gateway' => 'setSupportIpv4Gateway',
        'tags' => 'setTags',
        'update_time' => 'setUpdateTime',
        'user_cidr_blocks' => 'setUserCidrBlocks',
        'vpc_id' => 'setVpcId',
        'vpc_name' => 'setVpcName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'associate_cens' => 'getAssociateCens',
        'cidr_block' => 'getCidrBlock',
        'creation_time' => 'getCreationTime',
        'description' => 'getDescription',
        'dns_servers' => 'getDnsServers',
        'ipv4_gateway_id' => 'getIpv4GatewayId',
        'is_default' => 'getIsDefault',
        'nat_gateway_ids' => 'getNatGatewayIds',
        'network_acl_num' => 'getNetworkAclNum',
        'project_name' => 'getProjectName',
        'route_table_ids' => 'getRouteTableIds',
        'secondary_cidr_blocks' => 'getSecondaryCidrBlocks',
        'security_group_ids' => 'getSecurityGroupIds',
        'status' => 'getStatus',
        'subnet_ids' => 'getSubnetIds',
        'support_ipv4_gateway' => 'getSupportIpv4Gateway',
        'tags' => 'getTags',
        'update_time' => 'getUpdateTime',
        'user_cidr_blocks' => 'getUserCidrBlocks',
        'vpc_id' => 'getVpcId',
        'vpc_name' => 'getVpcName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['associate_cens'] = isset($data['associate_cens']) ? $data['associate_cens'] : null;
        $this->container['cidr_block'] = isset($data['cidr_block']) ? $data['cidr_block'] : null;
        $this->container['creation_time'] = isset($data['creation_time']) ? $data['creation_time'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['dns_servers'] = isset($data['dns_servers']) ? $data['dns_servers'] : null;
        $this->container['ipv4_gateway_id'] = isset($data['ipv4_gateway_id']) ? $data['ipv4_gateway_id'] : null;
        $this->container['is_default'] = isset($data['is_default']) ? $data['is_default'] : null;
        $this->container['nat_gateway_ids'] = isset($data['nat_gateway_ids']) ? $data['nat_gateway_ids'] : null;
        $this->container['network_acl_num'] = isset($data['network_acl_num']) ? $data['network_acl_num'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['route_table_ids'] = isset($data['route_table_ids']) ? $data['route_table_ids'] : null;
        $this->container['secondary_cidr_blocks'] = isset($data['secondary_cidr_blocks']) ? $data['secondary_cidr_blocks'] : null;
        $this->container['security_group_ids'] = isset($data['security_group_ids']) ? $data['security_group_ids'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['subnet_ids'] = isset($data['subnet_ids']) ? $data['subnet_ids'] : null;
        $this->container['support_ipv4_gateway'] = isset($data['support_ipv4_gateway']) ? $data['support_ipv4_gateway'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
        $this->container['user_cidr_blocks'] = isset($data['user_cidr_blocks']) ? $data['user_cidr_blocks'] : null;
        $this->container['vpc_id'] = isset($data['vpc_id']) ? $data['vpc_id'] : null;
        $this->container['vpc_name'] = isset($data['vpc_name']) ? $data['vpc_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets associate_cens
     *
     * @return \Volcengine\Vpc\Model\AssociateCenForDescribeVpcsOutput[]
     */
    public function getAssociateCens()
    {
        return $this->container['associate_cens'];
    }

    /**
     * Sets associate_cens
     *
     * @param \Volcengine\Vpc\Model\AssociateCenForDescribeVpcsOutput[] $associate_cens associate_cens
     *
     * @return $this
     */
    public function setAssociateCens($associate_cens)
    {
        $this->container['associate_cens'] = $associate_cens;

        return $this;
    }

    /**
     * Gets cidr_block
     *
     * @return string
     */
    public function getCidrBlock()
    {
        return $this->container['cidr_block'];
    }

    /**
     * Sets cidr_block
     *
     * @param string $cidr_block cidr_block
     *
     * @return $this
     */
    public function setCidrBlock($cidr_block)
    {
        $this->container['cidr_block'] = $cidr_block;

        return $this;
    }

    /**
     * Gets creation_time
     *
     * @return string
     */
    public function getCreationTime()
    {
        return $this->container['creation_time'];
    }

    /**
     * Sets creation_time
     *
     * @param string $creation_time creation_time
     *
     * @return $this
     */
    public function setCreationTime($creation_time)
    {
        $this->container['creation_time'] = $creation_time;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets dns_servers
     *
     * @return string[]
     */
    public function getDnsServers()
    {
        return $this->container['dns_servers'];
    }

    /**
     * Sets dns_servers
     *
     * @param string[] $dns_servers dns_servers
     *
     * @return $this
     */
    public function setDnsServers($dns_servers)
    {
        $this->container['dns_servers'] = $dns_servers;

        return $this;
    }

    /**
     * Gets ipv4_gateway_id
     *
     * @return string
     */
    public function getIpv4GatewayId()
    {
        return $this->container['ipv4_gateway_id'];
    }

    /**
     * Sets ipv4_gateway_id
     *
     * @param string $ipv4_gateway_id ipv4_gateway_id
     *
     * @return $this
     */
    public function setIpv4GatewayId($ipv4_gateway_id)
    {
        $this->container['ipv4_gateway_id'] = $ipv4_gateway_id;

        return $this;
    }

    /**
     * Gets is_default
     *
     * @return bool
     */
    public function getIsDefault()
    {
        return $this->container['is_default'];
    }

    /**
     * Sets is_default
     *
     * @param bool $is_default is_default
     *
     * @return $this
     */
    public function setIsDefault($is_default)
    {
        $this->container['is_default'] = $is_default;

        return $this;
    }

    /**
     * Gets nat_gateway_ids
     *
     * @return string[]
     */
    public function getNatGatewayIds()
    {
        return $this->container['nat_gateway_ids'];
    }

    /**
     * Sets nat_gateway_ids
     *
     * @param string[] $nat_gateway_ids nat_gateway_ids
     *
     * @return $this
     */
    public function setNatGatewayIds($nat_gateway_ids)
    {
        $this->container['nat_gateway_ids'] = $nat_gateway_ids;

        return $this;
    }

    /**
     * Gets network_acl_num
     *
     * @return string
     */
    public function getNetworkAclNum()
    {
        return $this->container['network_acl_num'];
    }

    /**
     * Sets network_acl_num
     *
     * @param string $network_acl_num network_acl_num
     *
     * @return $this
     */
    public function setNetworkAclNum($network_acl_num)
    {
        $this->container['network_acl_num'] = $network_acl_num;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets route_table_ids
     *
     * @return string[]
     */
    public function getRouteTableIds()
    {
        return $this->container['route_table_ids'];
    }

    /**
     * Sets route_table_ids
     *
     * @param string[] $route_table_ids route_table_ids
     *
     * @return $this
     */
    public function setRouteTableIds($route_table_ids)
    {
        $this->container['route_table_ids'] = $route_table_ids;

        return $this;
    }

    /**
     * Gets secondary_cidr_blocks
     *
     * @return string[]
     */
    public function getSecondaryCidrBlocks()
    {
        return $this->container['secondary_cidr_blocks'];
    }

    /**
     * Sets secondary_cidr_blocks
     *
     * @param string[] $secondary_cidr_blocks secondary_cidr_blocks
     *
     * @return $this
     */
    public function setSecondaryCidrBlocks($secondary_cidr_blocks)
    {
        $this->container['secondary_cidr_blocks'] = $secondary_cidr_blocks;

        return $this;
    }

    /**
     * Gets security_group_ids
     *
     * @return string[]
     */
    public function getSecurityGroupIds()
    {
        return $this->container['security_group_ids'];
    }

    /**
     * Sets security_group_ids
     *
     * @param string[] $security_group_ids security_group_ids
     *
     * @return $this
     */
    public function setSecurityGroupIds($security_group_ids)
    {
        $this->container['security_group_ids'] = $security_group_ids;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets subnet_ids
     *
     * @return string[]
     */
    public function getSubnetIds()
    {
        return $this->container['subnet_ids'];
    }

    /**
     * Sets subnet_ids
     *
     * @param string[] $subnet_ids subnet_ids
     *
     * @return $this
     */
    public function setSubnetIds($subnet_ids)
    {
        $this->container['subnet_ids'] = $subnet_ids;

        return $this;
    }

    /**
     * Gets support_ipv4_gateway
     *
     * @return bool
     */
    public function getSupportIpv4Gateway()
    {
        return $this->container['support_ipv4_gateway'];
    }

    /**
     * Sets support_ipv4_gateway
     *
     * @param bool $support_ipv4_gateway support_ipv4_gateway
     *
     * @return $this
     */
    public function setSupportIpv4Gateway($support_ipv4_gateway)
    {
        $this->container['support_ipv4_gateway'] = $support_ipv4_gateway;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Vpc\Model\TagForDescribeVpcsOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Vpc\Model\TagForDescribeVpcsOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }

    /**
     * Gets user_cidr_blocks
     *
     * @return string[]
     */
    public function getUserCidrBlocks()
    {
        return $this->container['user_cidr_blocks'];
    }

    /**
     * Sets user_cidr_blocks
     *
     * @param string[] $user_cidr_blocks user_cidr_blocks
     *
     * @return $this
     */
    public function setUserCidrBlocks($user_cidr_blocks)
    {
        $this->container['user_cidr_blocks'] = $user_cidr_blocks;

        return $this;
    }

    /**
     * Gets vpc_id
     *
     * @return string
     */
    public function getVpcId()
    {
        return $this->container['vpc_id'];
    }

    /**
     * Sets vpc_id
     *
     * @param string $vpc_id vpc_id
     *
     * @return $this
     */
    public function setVpcId($vpc_id)
    {
        $this->container['vpc_id'] = $vpc_id;

        return $this;
    }

    /**
     * Gets vpc_name
     *
     * @return string
     */
    public function getVpcName()
    {
        return $this->container['vpc_name'];
    }

    /**
     * Sets vpc_name
     *
     * @param string $vpc_name vpc_name
     *
     * @return $this
     */
    public function setVpcName($vpc_name)
    {
        $this->container['vpc_name'] = $vpc_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

