<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vpc\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Volcengine\Common\ApiException;
use Volcengine\Common\Configuration;
use Volcengine\Common\HeaderSelector;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\Utils;

class VPCApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    public function addBandwidthPackageIp($body)
    {
        list($response) = $this->addBandwidthPackageIpWithHttpInfo($body);
        return $response;
    }

    public function addBandwidthPackageIpWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\AddBandwidthPackageIpResponse';
        $request = $this->addBandwidthPackageIpRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function addBandwidthPackageIpAsync($body)
    {
        return $this->addBandwidthPackageIpAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function addBandwidthPackageIpAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\AddBandwidthPackageIpResponse';
        $request = $this->addBandwidthPackageIpRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function addBandwidthPackageIpRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addBandwidthPackageIp'
            );
        }

        $resourcePath = '/AddBandwidthPackageIp/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function allocateEipAddress($body)
    {
        list($response) = $this->allocateEipAddressWithHttpInfo($body);
        return $response;
    }

    public function allocateEipAddressWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\AllocateEipAddressResponse';
        $request = $this->allocateEipAddressRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function allocateEipAddressAsync($body)
    {
        return $this->allocateEipAddressAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function allocateEipAddressAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\AllocateEipAddressResponse';
        $request = $this->allocateEipAddressRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function allocateEipAddressRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling allocateEipAddress'
            );
        }

        $resourcePath = '/AllocateEipAddress/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function assignIpv6Addresses($body)
    {
        list($response) = $this->assignIpv6AddressesWithHttpInfo($body);
        return $response;
    }

    public function assignIpv6AddressesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\AssignIpv6AddressesResponse';
        $request = $this->assignIpv6AddressesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function assignIpv6AddressesAsync($body)
    {
        return $this->assignIpv6AddressesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function assignIpv6AddressesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\AssignIpv6AddressesResponse';
        $request = $this->assignIpv6AddressesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function assignIpv6AddressesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling assignIpv6Addresses'
            );
        }

        $resourcePath = '/AssignIpv6Addresses/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function assignPrivateIpAddresses($body)
    {
        list($response) = $this->assignPrivateIpAddressesWithHttpInfo($body);
        return $response;
    }

    public function assignPrivateIpAddressesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\AssignPrivateIpAddressesResponse';
        $request = $this->assignPrivateIpAddressesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function assignPrivateIpAddressesAsync($body)
    {
        return $this->assignPrivateIpAddressesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function assignPrivateIpAddressesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\AssignPrivateIpAddressesResponse';
        $request = $this->assignPrivateIpAddressesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function assignPrivateIpAddressesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling assignPrivateIpAddresses'
            );
        }

        $resourcePath = '/AssignPrivateIpAddresses/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function associateEipAddress($body)
    {
        list($response) = $this->associateEipAddressWithHttpInfo($body);
        return $response;
    }

    public function associateEipAddressWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\AssociateEipAddressResponse';
        $request = $this->associateEipAddressRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function associateEipAddressAsync($body)
    {
        return $this->associateEipAddressAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function associateEipAddressAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\AssociateEipAddressResponse';
        $request = $this->associateEipAddressRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function associateEipAddressRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling associateEipAddress'
            );
        }

        $resourcePath = '/AssociateEipAddress/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function associateHaVip($body)
    {
        list($response) = $this->associateHaVipWithHttpInfo($body);
        return $response;
    }

    public function associateHaVipWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\AssociateHaVipResponse';
        $request = $this->associateHaVipRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function associateHaVipAsync($body)
    {
        return $this->associateHaVipAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function associateHaVipAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\AssociateHaVipResponse';
        $request = $this->associateHaVipRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function associateHaVipRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling associateHaVip'
            );
        }

        $resourcePath = '/AssociateHaVip/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function associateNetworkAcl($body)
    {
        list($response) = $this->associateNetworkAclWithHttpInfo($body);
        return $response;
    }

    public function associateNetworkAclWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\AssociateNetworkAclResponse';
        $request = $this->associateNetworkAclRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function associateNetworkAclAsync($body)
    {
        return $this->associateNetworkAclAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function associateNetworkAclAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\AssociateNetworkAclResponse';
        $request = $this->associateNetworkAclRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function associateNetworkAclRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling associateNetworkAcl'
            );
        }

        $resourcePath = '/AssociateNetworkAcl/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function associateRouteTable($body)
    {
        list($response) = $this->associateRouteTableWithHttpInfo($body);
        return $response;
    }

    public function associateRouteTableWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\AssociateRouteTableResponse';
        $request = $this->associateRouteTableRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function associateRouteTableAsync($body)
    {
        return $this->associateRouteTableAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function associateRouteTableAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\AssociateRouteTableResponse';
        $request = $this->associateRouteTableRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function associateRouteTableRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling associateRouteTable'
            );
        }

        $resourcePath = '/AssociateRouteTable/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function associateVpcCidrBlock($body)
    {
        list($response) = $this->associateVpcCidrBlockWithHttpInfo($body);
        return $response;
    }

    public function associateVpcCidrBlockWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\AssociateVpcCidrBlockResponse';
        $request = $this->associateVpcCidrBlockRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function associateVpcCidrBlockAsync($body)
    {
        return $this->associateVpcCidrBlockAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function associateVpcCidrBlockAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\AssociateVpcCidrBlockResponse';
        $request = $this->associateVpcCidrBlockRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function associateVpcCidrBlockRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling associateVpcCidrBlock'
            );
        }

        $resourcePath = '/AssociateVpcCidrBlock/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function attachNetworkInterface($body)
    {
        list($response) = $this->attachNetworkInterfaceWithHttpInfo($body);
        return $response;
    }

    public function attachNetworkInterfaceWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\AttachNetworkInterfaceResponse';
        $request = $this->attachNetworkInterfaceRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function attachNetworkInterfaceAsync($body)
    {
        return $this->attachNetworkInterfaceAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function attachNetworkInterfaceAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\AttachNetworkInterfaceResponse';
        $request = $this->attachNetworkInterfaceRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function attachNetworkInterfaceRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling attachNetworkInterface'
            );
        }

        $resourcePath = '/AttachNetworkInterface/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function authorizeSecurityGroupEgress($body)
    {
        list($response) = $this->authorizeSecurityGroupEgressWithHttpInfo($body);
        return $response;
    }

    public function authorizeSecurityGroupEgressWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\AuthorizeSecurityGroupEgressResponse';
        $request = $this->authorizeSecurityGroupEgressRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function authorizeSecurityGroupEgressAsync($body)
    {
        return $this->authorizeSecurityGroupEgressAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function authorizeSecurityGroupEgressAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\AuthorizeSecurityGroupEgressResponse';
        $request = $this->authorizeSecurityGroupEgressRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function authorizeSecurityGroupEgressRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling authorizeSecurityGroupEgress'
            );
        }

        $resourcePath = '/AuthorizeSecurityGroupEgress/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function authorizeSecurityGroupIngress($body)
    {
        list($response) = $this->authorizeSecurityGroupIngressWithHttpInfo($body);
        return $response;
    }

    public function authorizeSecurityGroupIngressWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\AuthorizeSecurityGroupIngressResponse';
        $request = $this->authorizeSecurityGroupIngressRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function authorizeSecurityGroupIngressAsync($body)
    {
        return $this->authorizeSecurityGroupIngressAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function authorizeSecurityGroupIngressAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\AuthorizeSecurityGroupIngressResponse';
        $request = $this->authorizeSecurityGroupIngressRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function authorizeSecurityGroupIngressRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling authorizeSecurityGroupIngress'
            );
        }

        $resourcePath = '/AuthorizeSecurityGroupIngress/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function cancelBandwidthPackageEipBandwidth($body)
    {
        list($response) = $this->cancelBandwidthPackageEipBandwidthWithHttpInfo($body);
        return $response;
    }

    public function cancelBandwidthPackageEipBandwidthWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\CancelBandwidthPackageEipBandwidthResponse';
        $request = $this->cancelBandwidthPackageEipBandwidthRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function cancelBandwidthPackageEipBandwidthAsync($body)
    {
        return $this->cancelBandwidthPackageEipBandwidthAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function cancelBandwidthPackageEipBandwidthAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\CancelBandwidthPackageEipBandwidthResponse';
        $request = $this->cancelBandwidthPackageEipBandwidthRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function cancelBandwidthPackageEipBandwidthRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling cancelBandwidthPackageEipBandwidth'
            );
        }

        $resourcePath = '/CancelBandwidthPackageEipBandwidth/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function createBandwidthPackage($body)
    {
        list($response) = $this->createBandwidthPackageWithHttpInfo($body);
        return $response;
    }

    public function createBandwidthPackageWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\CreateBandwidthPackageResponse';
        $request = $this->createBandwidthPackageRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function createBandwidthPackageAsync($body)
    {
        return $this->createBandwidthPackageAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function createBandwidthPackageAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\CreateBandwidthPackageResponse';
        $request = $this->createBandwidthPackageRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function createBandwidthPackageRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createBandwidthPackage'
            );
        }

        $resourcePath = '/CreateBandwidthPackage/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function createHaVip($body)
    {
        list($response) = $this->createHaVipWithHttpInfo($body);
        return $response;
    }

    public function createHaVipWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\CreateHaVipResponse';
        $request = $this->createHaVipRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function createHaVipAsync($body)
    {
        return $this->createHaVipAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function createHaVipAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\CreateHaVipResponse';
        $request = $this->createHaVipRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function createHaVipRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createHaVip'
            );
        }

        $resourcePath = '/CreateHaVip/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function createNetworkAcl($body)
    {
        list($response) = $this->createNetworkAclWithHttpInfo($body);
        return $response;
    }

    public function createNetworkAclWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\CreateNetworkAclResponse';
        $request = $this->createNetworkAclRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function createNetworkAclAsync($body)
    {
        return $this->createNetworkAclAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function createNetworkAclAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\CreateNetworkAclResponse';
        $request = $this->createNetworkAclRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function createNetworkAclRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createNetworkAcl'
            );
        }

        $resourcePath = '/CreateNetworkAcl/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function createNetworkInterface($body)
    {
        list($response) = $this->createNetworkInterfaceWithHttpInfo($body);
        return $response;
    }

    public function createNetworkInterfaceWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\CreateNetworkInterfaceResponse';
        $request = $this->createNetworkInterfaceRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function createNetworkInterfaceAsync($body)
    {
        return $this->createNetworkInterfaceAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function createNetworkInterfaceAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\CreateNetworkInterfaceResponse';
        $request = $this->createNetworkInterfaceRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function createNetworkInterfaceRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createNetworkInterface'
            );
        }

        $resourcePath = '/CreateNetworkInterface/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function createPrefixList($body)
    {
        list($response) = $this->createPrefixListWithHttpInfo($body);
        return $response;
    }

    public function createPrefixListWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\CreatePrefixListResponse';
        $request = $this->createPrefixListRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function createPrefixListAsync($body)
    {
        return $this->createPrefixListAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function createPrefixListAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\CreatePrefixListResponse';
        $request = $this->createPrefixListRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function createPrefixListRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createPrefixList'
            );
        }

        $resourcePath = '/CreatePrefixList/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function createRouteEntry($body)
    {
        list($response) = $this->createRouteEntryWithHttpInfo($body);
        return $response;
    }

    public function createRouteEntryWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\CreateRouteEntryResponse';
        $request = $this->createRouteEntryRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function createRouteEntryAsync($body)
    {
        return $this->createRouteEntryAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function createRouteEntryAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\CreateRouteEntryResponse';
        $request = $this->createRouteEntryRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function createRouteEntryRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createRouteEntry'
            );
        }

        $resourcePath = '/CreateRouteEntry/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function createRouteTable($body)
    {
        list($response) = $this->createRouteTableWithHttpInfo($body);
        return $response;
    }

    public function createRouteTableWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\CreateRouteTableResponse';
        $request = $this->createRouteTableRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function createRouteTableAsync($body)
    {
        return $this->createRouteTableAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function createRouteTableAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\CreateRouteTableResponse';
        $request = $this->createRouteTableRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function createRouteTableRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createRouteTable'
            );
        }

        $resourcePath = '/CreateRouteTable/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function createSecurityGroup($body)
    {
        list($response) = $this->createSecurityGroupWithHttpInfo($body);
        return $response;
    }

    public function createSecurityGroupWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\CreateSecurityGroupResponse';
        $request = $this->createSecurityGroupRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function createSecurityGroupAsync($body)
    {
        return $this->createSecurityGroupAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function createSecurityGroupAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\CreateSecurityGroupResponse';
        $request = $this->createSecurityGroupRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function createSecurityGroupRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createSecurityGroup'
            );
        }

        $resourcePath = '/CreateSecurityGroup/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function createSubnet($body)
    {
        list($response) = $this->createSubnetWithHttpInfo($body);
        return $response;
    }

    public function createSubnetWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\CreateSubnetResponse';
        $request = $this->createSubnetRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function createSubnetAsync($body)
    {
        return $this->createSubnetAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function createSubnetAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\CreateSubnetResponse';
        $request = $this->createSubnetRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function createSubnetRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createSubnet'
            );
        }

        $resourcePath = '/CreateSubnet/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function createVpc($body)
    {
        list($response) = $this->createVpcWithHttpInfo($body);
        return $response;
    }

    public function createVpcWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\CreateVpcResponse';
        $request = $this->createVpcRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function createVpcAsync($body)
    {
        return $this->createVpcAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function createVpcAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\CreateVpcResponse';
        $request = $this->createVpcRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function createVpcRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createVpc'
            );
        }

        $resourcePath = '/CreateVpc/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function deleteBandwidthPackage($body)
    {
        list($response) = $this->deleteBandwidthPackageWithHttpInfo($body);
        return $response;
    }

    public function deleteBandwidthPackageWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DeleteBandwidthPackageResponse';
        $request = $this->deleteBandwidthPackageRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function deleteBandwidthPackageAsync($body)
    {
        return $this->deleteBandwidthPackageAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function deleteBandwidthPackageAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DeleteBandwidthPackageResponse';
        $request = $this->deleteBandwidthPackageRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function deleteBandwidthPackageRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling deleteBandwidthPackage'
            );
        }

        $resourcePath = '/DeleteBandwidthPackage/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function deleteHaVip($body)
    {
        list($response) = $this->deleteHaVipWithHttpInfo($body);
        return $response;
    }

    public function deleteHaVipWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DeleteHaVipResponse';
        $request = $this->deleteHaVipRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function deleteHaVipAsync($body)
    {
        return $this->deleteHaVipAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function deleteHaVipAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DeleteHaVipResponse';
        $request = $this->deleteHaVipRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function deleteHaVipRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling deleteHaVip'
            );
        }

        $resourcePath = '/DeleteHaVip/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function deleteNetworkAcl($body)
    {
        list($response) = $this->deleteNetworkAclWithHttpInfo($body);
        return $response;
    }

    public function deleteNetworkAclWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DeleteNetworkAclResponse';
        $request = $this->deleteNetworkAclRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function deleteNetworkAclAsync($body)
    {
        return $this->deleteNetworkAclAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function deleteNetworkAclAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DeleteNetworkAclResponse';
        $request = $this->deleteNetworkAclRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function deleteNetworkAclRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling deleteNetworkAcl'
            );
        }

        $resourcePath = '/DeleteNetworkAcl/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function deleteNetworkInterface($body)
    {
        list($response) = $this->deleteNetworkInterfaceWithHttpInfo($body);
        return $response;
    }

    public function deleteNetworkInterfaceWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DeleteNetworkInterfaceResponse';
        $request = $this->deleteNetworkInterfaceRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function deleteNetworkInterfaceAsync($body)
    {
        return $this->deleteNetworkInterfaceAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function deleteNetworkInterfaceAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DeleteNetworkInterfaceResponse';
        $request = $this->deleteNetworkInterfaceRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function deleteNetworkInterfaceRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling deleteNetworkInterface'
            );
        }

        $resourcePath = '/DeleteNetworkInterface/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function deletePrefixList($body)
    {
        list($response) = $this->deletePrefixListWithHttpInfo($body);
        return $response;
    }

    public function deletePrefixListWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DeletePrefixListResponse';
        $request = $this->deletePrefixListRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function deletePrefixListAsync($body)
    {
        return $this->deletePrefixListAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function deletePrefixListAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DeletePrefixListResponse';
        $request = $this->deletePrefixListRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function deletePrefixListRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling deletePrefixList'
            );
        }

        $resourcePath = '/DeletePrefixList/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function deleteRouteEntry($body)
    {
        list($response) = $this->deleteRouteEntryWithHttpInfo($body);
        return $response;
    }

    public function deleteRouteEntryWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DeleteRouteEntryResponse';
        $request = $this->deleteRouteEntryRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function deleteRouteEntryAsync($body)
    {
        return $this->deleteRouteEntryAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function deleteRouteEntryAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DeleteRouteEntryResponse';
        $request = $this->deleteRouteEntryRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function deleteRouteEntryRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling deleteRouteEntry'
            );
        }

        $resourcePath = '/DeleteRouteEntry/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function deleteRouteTable($body)
    {
        list($response) = $this->deleteRouteTableWithHttpInfo($body);
        return $response;
    }

    public function deleteRouteTableWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DeleteRouteTableResponse';
        $request = $this->deleteRouteTableRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function deleteRouteTableAsync($body)
    {
        return $this->deleteRouteTableAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function deleteRouteTableAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DeleteRouteTableResponse';
        $request = $this->deleteRouteTableRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function deleteRouteTableRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling deleteRouteTable'
            );
        }

        $resourcePath = '/DeleteRouteTable/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function deleteSecurityGroup($body)
    {
        list($response) = $this->deleteSecurityGroupWithHttpInfo($body);
        return $response;
    }

    public function deleteSecurityGroupWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DeleteSecurityGroupResponse';
        $request = $this->deleteSecurityGroupRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function deleteSecurityGroupAsync($body)
    {
        return $this->deleteSecurityGroupAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function deleteSecurityGroupAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DeleteSecurityGroupResponse';
        $request = $this->deleteSecurityGroupRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function deleteSecurityGroupRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling deleteSecurityGroup'
            );
        }

        $resourcePath = '/DeleteSecurityGroup/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function deleteSubnet($body)
    {
        list($response) = $this->deleteSubnetWithHttpInfo($body);
        return $response;
    }

    public function deleteSubnetWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DeleteSubnetResponse';
        $request = $this->deleteSubnetRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function deleteSubnetAsync($body)
    {
        return $this->deleteSubnetAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function deleteSubnetAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DeleteSubnetResponse';
        $request = $this->deleteSubnetRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function deleteSubnetRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling deleteSubnet'
            );
        }

        $resourcePath = '/DeleteSubnet/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function deleteVpc($body)
    {
        list($response) = $this->deleteVpcWithHttpInfo($body);
        return $response;
    }

    public function deleteVpcWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DeleteVpcResponse';
        $request = $this->deleteVpcRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function deleteVpcAsync($body)
    {
        return $this->deleteVpcAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function deleteVpcAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DeleteVpcResponse';
        $request = $this->deleteVpcRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function deleteVpcRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling deleteVpc'
            );
        }

        $resourcePath = '/DeleteVpc/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeBandwidthPackages($body)
    {
        list($response) = $this->describeBandwidthPackagesWithHttpInfo($body);
        return $response;
    }

    public function describeBandwidthPackagesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribeBandwidthPackagesResponse';
        $request = $this->describeBandwidthPackagesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeBandwidthPackagesAsync($body)
    {
        return $this->describeBandwidthPackagesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeBandwidthPackagesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribeBandwidthPackagesResponse';
        $request = $this->describeBandwidthPackagesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeBandwidthPackagesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeBandwidthPackages'
            );
        }

        $resourcePath = '/DescribeBandwidthPackages/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeEipAddressAttributes($body)
    {
        list($response) = $this->describeEipAddressAttributesWithHttpInfo($body);
        return $response;
    }

    public function describeEipAddressAttributesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribeEipAddressAttributesResponse';
        $request = $this->describeEipAddressAttributesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeEipAddressAttributesAsync($body)
    {
        return $this->describeEipAddressAttributesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeEipAddressAttributesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribeEipAddressAttributesResponse';
        $request = $this->describeEipAddressAttributesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeEipAddressAttributesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeEipAddressAttributes'
            );
        }

        $resourcePath = '/DescribeEipAddressAttributes/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeEipAddresses($body)
    {
        list($response) = $this->describeEipAddressesWithHttpInfo($body);
        return $response;
    }

    public function describeEipAddressesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribeEipAddressesResponse';
        $request = $this->describeEipAddressesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeEipAddressesAsync($body)
    {
        return $this->describeEipAddressesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeEipAddressesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribeEipAddressesResponse';
        $request = $this->describeEipAddressesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeEipAddressesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeEipAddresses'
            );
        }

        $resourcePath = '/DescribeEipAddresses/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeHaVips($body)
    {
        list($response) = $this->describeHaVipsWithHttpInfo($body);
        return $response;
    }

    public function describeHaVipsWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribeHaVipsResponse';
        $request = $this->describeHaVipsRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeHaVipsAsync($body)
    {
        return $this->describeHaVipsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeHaVipsAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribeHaVipsResponse';
        $request = $this->describeHaVipsRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeHaVipsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeHaVips'
            );
        }

        $resourcePath = '/DescribeHaVips/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeNetworkAclAttributes($body)
    {
        list($response) = $this->describeNetworkAclAttributesWithHttpInfo($body);
        return $response;
    }

    public function describeNetworkAclAttributesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribeNetworkAclAttributesResponse';
        $request = $this->describeNetworkAclAttributesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeNetworkAclAttributesAsync($body)
    {
        return $this->describeNetworkAclAttributesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeNetworkAclAttributesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribeNetworkAclAttributesResponse';
        $request = $this->describeNetworkAclAttributesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeNetworkAclAttributesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeNetworkAclAttributes'
            );
        }

        $resourcePath = '/DescribeNetworkAclAttributes/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeNetworkAcls($body)
    {
        list($response) = $this->describeNetworkAclsWithHttpInfo($body);
        return $response;
    }

    public function describeNetworkAclsWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribeNetworkAclsResponse';
        $request = $this->describeNetworkAclsRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeNetworkAclsAsync($body)
    {
        return $this->describeNetworkAclsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeNetworkAclsAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribeNetworkAclsResponse';
        $request = $this->describeNetworkAclsRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeNetworkAclsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeNetworkAcls'
            );
        }

        $resourcePath = '/DescribeNetworkAcls/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeNetworkInterfaceAttributes($body)
    {
        list($response) = $this->describeNetworkInterfaceAttributesWithHttpInfo($body);
        return $response;
    }

    public function describeNetworkInterfaceAttributesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribeNetworkInterfaceAttributesResponse';
        $request = $this->describeNetworkInterfaceAttributesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeNetworkInterfaceAttributesAsync($body)
    {
        return $this->describeNetworkInterfaceAttributesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeNetworkInterfaceAttributesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribeNetworkInterfaceAttributesResponse';
        $request = $this->describeNetworkInterfaceAttributesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeNetworkInterfaceAttributesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeNetworkInterfaceAttributes'
            );
        }

        $resourcePath = '/DescribeNetworkInterfaceAttributes/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeNetworkInterfaces($body)
    {
        list($response) = $this->describeNetworkInterfacesWithHttpInfo($body);
        return $response;
    }

    public function describeNetworkInterfacesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribeNetworkInterfacesResponse';
        $request = $this->describeNetworkInterfacesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeNetworkInterfacesAsync($body)
    {
        return $this->describeNetworkInterfacesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeNetworkInterfacesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribeNetworkInterfacesResponse';
        $request = $this->describeNetworkInterfacesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeNetworkInterfacesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeNetworkInterfaces'
            );
        }

        $resourcePath = '/DescribeNetworkInterfaces/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describePrefixListAssociations($body)
    {
        list($response) = $this->describePrefixListAssociationsWithHttpInfo($body);
        return $response;
    }

    public function describePrefixListAssociationsWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribePrefixListAssociationsResponse';
        $request = $this->describePrefixListAssociationsRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describePrefixListAssociationsAsync($body)
    {
        return $this->describePrefixListAssociationsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describePrefixListAssociationsAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribePrefixListAssociationsResponse';
        $request = $this->describePrefixListAssociationsRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describePrefixListAssociationsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describePrefixListAssociations'
            );
        }

        $resourcePath = '/DescribePrefixListAssociations/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describePrefixListEntries($body)
    {
        list($response) = $this->describePrefixListEntriesWithHttpInfo($body);
        return $response;
    }

    public function describePrefixListEntriesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribePrefixListEntriesResponse';
        $request = $this->describePrefixListEntriesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describePrefixListEntriesAsync($body)
    {
        return $this->describePrefixListEntriesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describePrefixListEntriesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribePrefixListEntriesResponse';
        $request = $this->describePrefixListEntriesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describePrefixListEntriesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describePrefixListEntries'
            );
        }

        $resourcePath = '/DescribePrefixListEntries/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describePrefixLists($body)
    {
        list($response) = $this->describePrefixListsWithHttpInfo($body);
        return $response;
    }

    public function describePrefixListsWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribePrefixListsResponse';
        $request = $this->describePrefixListsRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describePrefixListsAsync($body)
    {
        return $this->describePrefixListsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describePrefixListsAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribePrefixListsResponse';
        $request = $this->describePrefixListsRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describePrefixListsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describePrefixLists'
            );
        }

        $resourcePath = '/DescribePrefixLists/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeRouteEntryList($body)
    {
        list($response) = $this->describeRouteEntryListWithHttpInfo($body);
        return $response;
    }

    public function describeRouteEntryListWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribeRouteEntryListResponse';
        $request = $this->describeRouteEntryListRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeRouteEntryListAsync($body)
    {
        return $this->describeRouteEntryListAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeRouteEntryListAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribeRouteEntryListResponse';
        $request = $this->describeRouteEntryListRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeRouteEntryListRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeRouteEntryList'
            );
        }

        $resourcePath = '/DescribeRouteEntryList/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeRouteTableList($body)
    {
        list($response) = $this->describeRouteTableListWithHttpInfo($body);
        return $response;
    }

    public function describeRouteTableListWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribeRouteTableListResponse';
        $request = $this->describeRouteTableListRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeRouteTableListAsync($body)
    {
        return $this->describeRouteTableListAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeRouteTableListAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribeRouteTableListResponse';
        $request = $this->describeRouteTableListRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeRouteTableListRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeRouteTableList'
            );
        }

        $resourcePath = '/DescribeRouteTableList/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeSecurityGroupAttributes($body)
    {
        list($response) = $this->describeSecurityGroupAttributesWithHttpInfo($body);
        return $response;
    }

    public function describeSecurityGroupAttributesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribeSecurityGroupAttributesResponse';
        $request = $this->describeSecurityGroupAttributesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeSecurityGroupAttributesAsync($body)
    {
        return $this->describeSecurityGroupAttributesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeSecurityGroupAttributesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribeSecurityGroupAttributesResponse';
        $request = $this->describeSecurityGroupAttributesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeSecurityGroupAttributesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeSecurityGroupAttributes'
            );
        }

        $resourcePath = '/DescribeSecurityGroupAttributes/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeSecurityGroups($body)
    {
        list($response) = $this->describeSecurityGroupsWithHttpInfo($body);
        return $response;
    }

    public function describeSecurityGroupsWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribeSecurityGroupsResponse';
        $request = $this->describeSecurityGroupsRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeSecurityGroupsAsync($body)
    {
        return $this->describeSecurityGroupsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeSecurityGroupsAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribeSecurityGroupsResponse';
        $request = $this->describeSecurityGroupsRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeSecurityGroupsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeSecurityGroups'
            );
        }

        $resourcePath = '/DescribeSecurityGroups/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeSubnetAttributes($body)
    {
        list($response) = $this->describeSubnetAttributesWithHttpInfo($body);
        return $response;
    }

    public function describeSubnetAttributesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribeSubnetAttributesResponse';
        $request = $this->describeSubnetAttributesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeSubnetAttributesAsync($body)
    {
        return $this->describeSubnetAttributesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeSubnetAttributesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribeSubnetAttributesResponse';
        $request = $this->describeSubnetAttributesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeSubnetAttributesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeSubnetAttributes'
            );
        }

        $resourcePath = '/DescribeSubnetAttributes/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeSubnets($body)
    {
        list($response) = $this->describeSubnetsWithHttpInfo($body);
        return $response;
    }

    public function describeSubnetsWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribeSubnetsResponse';
        $request = $this->describeSubnetsRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeSubnetsAsync($body)
    {
        return $this->describeSubnetsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeSubnetsAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribeSubnetsResponse';
        $request = $this->describeSubnetsRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeSubnetsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeSubnets'
            );
        }

        $resourcePath = '/DescribeSubnets/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeVpcAttributes($body)
    {
        list($response) = $this->describeVpcAttributesWithHttpInfo($body);
        return $response;
    }

    public function describeVpcAttributesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribeVpcAttributesResponse';
        $request = $this->describeVpcAttributesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeVpcAttributesAsync($body)
    {
        return $this->describeVpcAttributesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeVpcAttributesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribeVpcAttributesResponse';
        $request = $this->describeVpcAttributesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeVpcAttributesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeVpcAttributes'
            );
        }

        $resourcePath = '/DescribeVpcAttributes/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function describeVpcs($body)
    {
        list($response) = $this->describeVpcsWithHttpInfo($body);
        return $response;
    }

    public function describeVpcsWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribeVpcsResponse';
        $request = $this->describeVpcsRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function describeVpcsAsync($body)
    {
        return $this->describeVpcsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function describeVpcsAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DescribeVpcsResponse';
        $request = $this->describeVpcsRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function describeVpcsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling describeVpcs'
            );
        }

        $resourcePath = '/DescribeVpcs/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function detachNetworkInterface($body)
    {
        list($response) = $this->detachNetworkInterfaceWithHttpInfo($body);
        return $response;
    }

    public function detachNetworkInterfaceWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DetachNetworkInterfaceResponse';
        $request = $this->detachNetworkInterfaceRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function detachNetworkInterfaceAsync($body)
    {
        return $this->detachNetworkInterfaceAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function detachNetworkInterfaceAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DetachNetworkInterfaceResponse';
        $request = $this->detachNetworkInterfaceRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function detachNetworkInterfaceRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling detachNetworkInterface'
            );
        }

        $resourcePath = '/DetachNetworkInterface/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function disassociateEipAddress($body)
    {
        list($response) = $this->disassociateEipAddressWithHttpInfo($body);
        return $response;
    }

    public function disassociateEipAddressWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DisassociateEipAddressResponse';
        $request = $this->disassociateEipAddressRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function disassociateEipAddressAsync($body)
    {
        return $this->disassociateEipAddressAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function disassociateEipAddressAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DisassociateEipAddressResponse';
        $request = $this->disassociateEipAddressRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function disassociateEipAddressRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling disassociateEipAddress'
            );
        }

        $resourcePath = '/DisassociateEipAddress/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function disassociateHaVip($body)
    {
        list($response) = $this->disassociateHaVipWithHttpInfo($body);
        return $response;
    }

    public function disassociateHaVipWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DisassociateHaVipResponse';
        $request = $this->disassociateHaVipRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function disassociateHaVipAsync($body)
    {
        return $this->disassociateHaVipAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function disassociateHaVipAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DisassociateHaVipResponse';
        $request = $this->disassociateHaVipRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function disassociateHaVipRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling disassociateHaVip'
            );
        }

        $resourcePath = '/DisassociateHaVip/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function disassociateNetworkAcl($body)
    {
        list($response) = $this->disassociateNetworkAclWithHttpInfo($body);
        return $response;
    }

    public function disassociateNetworkAclWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DisassociateNetworkAclResponse';
        $request = $this->disassociateNetworkAclRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function disassociateNetworkAclAsync($body)
    {
        return $this->disassociateNetworkAclAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function disassociateNetworkAclAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DisassociateNetworkAclResponse';
        $request = $this->disassociateNetworkAclRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function disassociateNetworkAclRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling disassociateNetworkAcl'
            );
        }

        $resourcePath = '/DisassociateNetworkAcl/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function disassociateRouteTable($body)
    {
        list($response) = $this->disassociateRouteTableWithHttpInfo($body);
        return $response;
    }

    public function disassociateRouteTableWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DisassociateRouteTableResponse';
        $request = $this->disassociateRouteTableRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function disassociateRouteTableAsync($body)
    {
        return $this->disassociateRouteTableAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function disassociateRouteTableAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DisassociateRouteTableResponse';
        $request = $this->disassociateRouteTableRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function disassociateRouteTableRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling disassociateRouteTable'
            );
        }

        $resourcePath = '/DisassociateRouteTable/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function disassociateVpcCidrBlock($body)
    {
        list($response) = $this->disassociateVpcCidrBlockWithHttpInfo($body);
        return $response;
    }

    public function disassociateVpcCidrBlockWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DisassociateVpcCidrBlockResponse';
        $request = $this->disassociateVpcCidrBlockRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function disassociateVpcCidrBlockAsync($body)
    {
        return $this->disassociateVpcCidrBlockAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function disassociateVpcCidrBlockAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\DisassociateVpcCidrBlockResponse';
        $request = $this->disassociateVpcCidrBlockRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function disassociateVpcCidrBlockRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling disassociateVpcCidrBlock'
            );
        }

        $resourcePath = '/DisassociateVpcCidrBlock/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function listTagsForResources($body)
    {
        list($response) = $this->listTagsForResourcesWithHttpInfo($body);
        return $response;
    }

    public function listTagsForResourcesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\ListTagsForResourcesResponse';
        $request = $this->listTagsForResourcesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function listTagsForResourcesAsync($body)
    {
        return $this->listTagsForResourcesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function listTagsForResourcesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\ListTagsForResourcesResponse';
        $request = $this->listTagsForResourcesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function listTagsForResourcesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling listTagsForResources'
            );
        }

        $resourcePath = '/ListTagsForResources/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifyBandwidthPackageAttributes($body)
    {
        list($response) = $this->modifyBandwidthPackageAttributesWithHttpInfo($body);
        return $response;
    }

    public function modifyBandwidthPackageAttributesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\ModifyBandwidthPackageAttributesResponse';
        $request = $this->modifyBandwidthPackageAttributesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifyBandwidthPackageAttributesAsync($body)
    {
        return $this->modifyBandwidthPackageAttributesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifyBandwidthPackageAttributesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\ModifyBandwidthPackageAttributesResponse';
        $request = $this->modifyBandwidthPackageAttributesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifyBandwidthPackageAttributesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyBandwidthPackageAttributes'
            );
        }

        $resourcePath = '/ModifyBandwidthPackageAttributes/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifyBandwidthPackageEipBandwidth($body)
    {
        list($response) = $this->modifyBandwidthPackageEipBandwidthWithHttpInfo($body);
        return $response;
    }

    public function modifyBandwidthPackageEipBandwidthWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\ModifyBandwidthPackageEipBandwidthResponse';
        $request = $this->modifyBandwidthPackageEipBandwidthRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifyBandwidthPackageEipBandwidthAsync($body)
    {
        return $this->modifyBandwidthPackageEipBandwidthAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifyBandwidthPackageEipBandwidthAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\ModifyBandwidthPackageEipBandwidthResponse';
        $request = $this->modifyBandwidthPackageEipBandwidthRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifyBandwidthPackageEipBandwidthRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyBandwidthPackageEipBandwidth'
            );
        }

        $resourcePath = '/ModifyBandwidthPackageEipBandwidth/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifyBandwidthPackageSpec($body)
    {
        list($response) = $this->modifyBandwidthPackageSpecWithHttpInfo($body);
        return $response;
    }

    public function modifyBandwidthPackageSpecWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\ModifyBandwidthPackageSpecResponse';
        $request = $this->modifyBandwidthPackageSpecRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifyBandwidthPackageSpecAsync($body)
    {
        return $this->modifyBandwidthPackageSpecAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifyBandwidthPackageSpecAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\ModifyBandwidthPackageSpecResponse';
        $request = $this->modifyBandwidthPackageSpecRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifyBandwidthPackageSpecRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyBandwidthPackageSpec'
            );
        }

        $resourcePath = '/ModifyBandwidthPackageSpec/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifyEipAddressAttributes($body)
    {
        list($response) = $this->modifyEipAddressAttributesWithHttpInfo($body);
        return $response;
    }

    public function modifyEipAddressAttributesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\ModifyEipAddressAttributesResponse';
        $request = $this->modifyEipAddressAttributesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifyEipAddressAttributesAsync($body)
    {
        return $this->modifyEipAddressAttributesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifyEipAddressAttributesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\ModifyEipAddressAttributesResponse';
        $request = $this->modifyEipAddressAttributesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifyEipAddressAttributesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyEipAddressAttributes'
            );
        }

        $resourcePath = '/ModifyEipAddressAttributes/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifyHaVipAttributes($body)
    {
        list($response) = $this->modifyHaVipAttributesWithHttpInfo($body);
        return $response;
    }

    public function modifyHaVipAttributesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\ModifyHaVipAttributesResponse';
        $request = $this->modifyHaVipAttributesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifyHaVipAttributesAsync($body)
    {
        return $this->modifyHaVipAttributesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifyHaVipAttributesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\ModifyHaVipAttributesResponse';
        $request = $this->modifyHaVipAttributesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifyHaVipAttributesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyHaVipAttributes'
            );
        }

        $resourcePath = '/ModifyHaVipAttributes/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifyNetworkAclAttributes($body)
    {
        list($response) = $this->modifyNetworkAclAttributesWithHttpInfo($body);
        return $response;
    }

    public function modifyNetworkAclAttributesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\ModifyNetworkAclAttributesResponse';
        $request = $this->modifyNetworkAclAttributesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifyNetworkAclAttributesAsync($body)
    {
        return $this->modifyNetworkAclAttributesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifyNetworkAclAttributesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\ModifyNetworkAclAttributesResponse';
        $request = $this->modifyNetworkAclAttributesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifyNetworkAclAttributesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyNetworkAclAttributes'
            );
        }

        $resourcePath = '/ModifyNetworkAclAttributes/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifyNetworkInterfaceAttributes($body)
    {
        list($response) = $this->modifyNetworkInterfaceAttributesWithHttpInfo($body);
        return $response;
    }

    public function modifyNetworkInterfaceAttributesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\ModifyNetworkInterfaceAttributesResponse';
        $request = $this->modifyNetworkInterfaceAttributesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifyNetworkInterfaceAttributesAsync($body)
    {
        return $this->modifyNetworkInterfaceAttributesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifyNetworkInterfaceAttributesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\ModifyNetworkInterfaceAttributesResponse';
        $request = $this->modifyNetworkInterfaceAttributesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifyNetworkInterfaceAttributesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyNetworkInterfaceAttributes'
            );
        }

        $resourcePath = '/ModifyNetworkInterfaceAttributes/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifyPrefixList($body)
    {
        list($response) = $this->modifyPrefixListWithHttpInfo($body);
        return $response;
    }

    public function modifyPrefixListWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\ModifyPrefixListResponse';
        $request = $this->modifyPrefixListRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifyPrefixListAsync($body)
    {
        return $this->modifyPrefixListAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifyPrefixListAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\ModifyPrefixListResponse';
        $request = $this->modifyPrefixListRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifyPrefixListRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyPrefixList'
            );
        }

        $resourcePath = '/ModifyPrefixList/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifyRouteEntry($body)
    {
        list($response) = $this->modifyRouteEntryWithHttpInfo($body);
        return $response;
    }

    public function modifyRouteEntryWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\ModifyRouteEntryResponse';
        $request = $this->modifyRouteEntryRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifyRouteEntryAsync($body)
    {
        return $this->modifyRouteEntryAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifyRouteEntryAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\ModifyRouteEntryResponse';
        $request = $this->modifyRouteEntryRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifyRouteEntryRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyRouteEntry'
            );
        }

        $resourcePath = '/ModifyRouteEntry/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifyRouteTableAttributes($body)
    {
        list($response) = $this->modifyRouteTableAttributesWithHttpInfo($body);
        return $response;
    }

    public function modifyRouteTableAttributesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\ModifyRouteTableAttributesResponse';
        $request = $this->modifyRouteTableAttributesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifyRouteTableAttributesAsync($body)
    {
        return $this->modifyRouteTableAttributesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifyRouteTableAttributesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\ModifyRouteTableAttributesResponse';
        $request = $this->modifyRouteTableAttributesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifyRouteTableAttributesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyRouteTableAttributes'
            );
        }

        $resourcePath = '/ModifyRouteTableAttributes/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifySecurityGroupAttributes($body)
    {
        list($response) = $this->modifySecurityGroupAttributesWithHttpInfo($body);
        return $response;
    }

    public function modifySecurityGroupAttributesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\ModifySecurityGroupAttributesResponse';
        $request = $this->modifySecurityGroupAttributesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifySecurityGroupAttributesAsync($body)
    {
        return $this->modifySecurityGroupAttributesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifySecurityGroupAttributesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\ModifySecurityGroupAttributesResponse';
        $request = $this->modifySecurityGroupAttributesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifySecurityGroupAttributesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifySecurityGroupAttributes'
            );
        }

        $resourcePath = '/ModifySecurityGroupAttributes/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifySecurityGroupRuleDescriptionsEgress($body)
    {
        list($response) = $this->modifySecurityGroupRuleDescriptionsEgressWithHttpInfo($body);
        return $response;
    }

    public function modifySecurityGroupRuleDescriptionsEgressWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\ModifySecurityGroupRuleDescriptionsEgressResponse';
        $request = $this->modifySecurityGroupRuleDescriptionsEgressRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifySecurityGroupRuleDescriptionsEgressAsync($body)
    {
        return $this->modifySecurityGroupRuleDescriptionsEgressAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifySecurityGroupRuleDescriptionsEgressAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\ModifySecurityGroupRuleDescriptionsEgressResponse';
        $request = $this->modifySecurityGroupRuleDescriptionsEgressRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifySecurityGroupRuleDescriptionsEgressRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifySecurityGroupRuleDescriptionsEgress'
            );
        }

        $resourcePath = '/ModifySecurityGroupRuleDescriptionsEgress/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifySecurityGroupRuleDescriptionsIngress($body)
    {
        list($response) = $this->modifySecurityGroupRuleDescriptionsIngressWithHttpInfo($body);
        return $response;
    }

    public function modifySecurityGroupRuleDescriptionsIngressWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\ModifySecurityGroupRuleDescriptionsIngressResponse';
        $request = $this->modifySecurityGroupRuleDescriptionsIngressRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifySecurityGroupRuleDescriptionsIngressAsync($body)
    {
        return $this->modifySecurityGroupRuleDescriptionsIngressAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifySecurityGroupRuleDescriptionsIngressAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\ModifySecurityGroupRuleDescriptionsIngressResponse';
        $request = $this->modifySecurityGroupRuleDescriptionsIngressRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifySecurityGroupRuleDescriptionsIngressRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifySecurityGroupRuleDescriptionsIngress'
            );
        }

        $resourcePath = '/ModifySecurityGroupRuleDescriptionsIngress/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifySubnetAttributes($body)
    {
        list($response) = $this->modifySubnetAttributesWithHttpInfo($body);
        return $response;
    }

    public function modifySubnetAttributesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\ModifySubnetAttributesResponse';
        $request = $this->modifySubnetAttributesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifySubnetAttributesAsync($body)
    {
        return $this->modifySubnetAttributesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifySubnetAttributesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\ModifySubnetAttributesResponse';
        $request = $this->modifySubnetAttributesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifySubnetAttributesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifySubnetAttributes'
            );
        }

        $resourcePath = '/ModifySubnetAttributes/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function modifyVpcAttributes($body)
    {
        list($response) = $this->modifyVpcAttributesWithHttpInfo($body);
        return $response;
    }

    public function modifyVpcAttributesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\ModifyVpcAttributesResponse';
        $request = $this->modifyVpcAttributesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function modifyVpcAttributesAsync($body)
    {
        return $this->modifyVpcAttributesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function modifyVpcAttributesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\ModifyVpcAttributesResponse';
        $request = $this->modifyVpcAttributesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function modifyVpcAttributesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyVpcAttributes'
            );
        }

        $resourcePath = '/ModifyVpcAttributes/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function releaseEipAddress($body)
    {
        list($response) = $this->releaseEipAddressWithHttpInfo($body);
        return $response;
    }

    public function releaseEipAddressWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\ReleaseEipAddressResponse';
        $request = $this->releaseEipAddressRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function releaseEipAddressAsync($body)
    {
        return $this->releaseEipAddressAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function releaseEipAddressAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\ReleaseEipAddressResponse';
        $request = $this->releaseEipAddressRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function releaseEipAddressRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling releaseEipAddress'
            );
        }

        $resourcePath = '/ReleaseEipAddress/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function removeBandwidthPackageIp($body)
    {
        list($response) = $this->removeBandwidthPackageIpWithHttpInfo($body);
        return $response;
    }

    public function removeBandwidthPackageIpWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\RemoveBandwidthPackageIpResponse';
        $request = $this->removeBandwidthPackageIpRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function removeBandwidthPackageIpAsync($body)
    {
        return $this->removeBandwidthPackageIpAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function removeBandwidthPackageIpAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\RemoveBandwidthPackageIpResponse';
        $request = $this->removeBandwidthPackageIpRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function removeBandwidthPackageIpRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling removeBandwidthPackageIp'
            );
        }

        $resourcePath = '/RemoveBandwidthPackageIp/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function revokeSecurityGroupEgress($body)
    {
        list($response) = $this->revokeSecurityGroupEgressWithHttpInfo($body);
        return $response;
    }

    public function revokeSecurityGroupEgressWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\RevokeSecurityGroupEgressResponse';
        $request = $this->revokeSecurityGroupEgressRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function revokeSecurityGroupEgressAsync($body)
    {
        return $this->revokeSecurityGroupEgressAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function revokeSecurityGroupEgressAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\RevokeSecurityGroupEgressResponse';
        $request = $this->revokeSecurityGroupEgressRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function revokeSecurityGroupEgressRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling revokeSecurityGroupEgress'
            );
        }

        $resourcePath = '/RevokeSecurityGroupEgress/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function revokeSecurityGroupIngress($body)
    {
        list($response) = $this->revokeSecurityGroupIngressWithHttpInfo($body);
        return $response;
    }

    public function revokeSecurityGroupIngressWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\RevokeSecurityGroupIngressResponse';
        $request = $this->revokeSecurityGroupIngressRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function revokeSecurityGroupIngressAsync($body)
    {
        return $this->revokeSecurityGroupIngressAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function revokeSecurityGroupIngressAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\RevokeSecurityGroupIngressResponse';
        $request = $this->revokeSecurityGroupIngressRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function revokeSecurityGroupIngressRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling revokeSecurityGroupIngress'
            );
        }

        $resourcePath = '/RevokeSecurityGroupIngress/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function tagResources($body)
    {
        list($response) = $this->tagResourcesWithHttpInfo($body);
        return $response;
    }

    public function tagResourcesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\TagResourcesResponse';
        $request = $this->tagResourcesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function tagResourcesAsync($body)
    {
        return $this->tagResourcesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function tagResourcesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\TagResourcesResponse';
        $request = $this->tagResourcesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function tagResourcesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling tagResources'
            );
        }

        $resourcePath = '/TagResources/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function temporaryUpgradeEipAddress($body)
    {
        list($response) = $this->temporaryUpgradeEipAddressWithHttpInfo($body);
        return $response;
    }

    public function temporaryUpgradeEipAddressWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\TemporaryUpgradeEipAddressResponse';
        $request = $this->temporaryUpgradeEipAddressRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function temporaryUpgradeEipAddressAsync($body)
    {
        return $this->temporaryUpgradeEipAddressAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function temporaryUpgradeEipAddressAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\TemporaryUpgradeEipAddressResponse';
        $request = $this->temporaryUpgradeEipAddressRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function temporaryUpgradeEipAddressRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling temporaryUpgradeEipAddress'
            );
        }

        $resourcePath = '/TemporaryUpgradeEipAddress/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function unassignIpv6Addresses($body)
    {
        list($response) = $this->unassignIpv6AddressesWithHttpInfo($body);
        return $response;
    }

    public function unassignIpv6AddressesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\UnassignIpv6AddressesResponse';
        $request = $this->unassignIpv6AddressesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function unassignIpv6AddressesAsync($body)
    {
        return $this->unassignIpv6AddressesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function unassignIpv6AddressesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\UnassignIpv6AddressesResponse';
        $request = $this->unassignIpv6AddressesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function unassignIpv6AddressesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling unassignIpv6Addresses'
            );
        }

        $resourcePath = '/UnassignIpv6Addresses/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function unassignPrivateIpAddresses($body)
    {
        list($response) = $this->unassignPrivateIpAddressesWithHttpInfo($body);
        return $response;
    }

    public function unassignPrivateIpAddressesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\UnassignPrivateIpAddressesResponse';
        $request = $this->unassignPrivateIpAddressesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function unassignPrivateIpAddressesAsync($body)
    {
        return $this->unassignPrivateIpAddressesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function unassignPrivateIpAddressesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\UnassignPrivateIpAddressesResponse';
        $request = $this->unassignPrivateIpAddressesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function unassignPrivateIpAddressesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling unassignPrivateIpAddresses'
            );
        }

        $resourcePath = '/UnassignPrivateIpAddresses/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function untagResources($body)
    {
        list($response) = $this->untagResourcesWithHttpInfo($body);
        return $response;
    }

    public function untagResourcesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\UntagResourcesResponse';
        $request = $this->untagResourcesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function untagResourcesAsync($body)
    {
        return $this->untagResourcesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function untagResourcesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\UntagResourcesResponse';
        $request = $this->untagResourcesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function untagResourcesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling untagResources'
            );
        }

        $resourcePath = '/UntagResources/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }

    public function updateNetworkAclEntries($body)
    {
        list($response) = $this->updateNetworkAclEntriesWithHttpInfo($body);
        return $response;
    }

    public function updateNetworkAclEntriesWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\UpdateNetworkAclEntriesResponse';
        $request = $this->updateNetworkAclEntriesRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                $e->getCode(),
                $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        $responseContent = $response->getBody()->getContents();
        $content = json_decode($responseContent);

        if (isset($content->{'ResponseMetadata'}->{'Error'})) {
            throw new ApiException(
                sprintf(
                    '[%d] Return Error From the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $responseContent);
        }
        $content = $content->{'Result'};

        return [
            ObjectSerializer::deserialize($content, $returnType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    public function updateNetworkAclEntriesAsync($body)
    {
        return $this->updateNetworkAclEntriesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    public function updateNetworkAclEntriesAsyncWithHttpInfo($body)
    {
        $returnType = '\Volcengine\Vpc\Model\UpdateNetworkAclEntriesResponse';
        $request = $this->updateNetworkAclEntriesRequest($body);
        $uri = $request->getUri();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($uri, $returnType) {
                    $responseContent = $response->getBody()->getContents();
                    $content = json_decode($responseContent);
                    $statusCode = $response->getStatusCode();

                    if (isset($content->{'ResponseMetadata'}->{'Error'})) {
                        throw new ApiException(
                            sprintf(
                                '[%d] Return Error From the API (%s)',
                                $statusCode,
                                $uri
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $responseContent);
                    }
                    $content = $content->{'Result'};

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    protected function updateNetworkAclEntriesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateNetworkAclEntries'
            );
        }

        $resourcePath = '/UpdateNetworkAclEntries/2020-04-01/vpc/get/text_plain/';
        $queryParams = [];
        $httpBody = $body;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['text/plain']
        );

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        if ($this->config->getHost()) {
            $defaultHeaders['Host'] = $this->config->getHost();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headers
        );

        $paths = explode("/", $resourcePath);
        $service = $paths[3];
        $method = strtoupper($paths[4]);

        // format request body
        if ($method == 'GET' && $headers['Content-Type'] === 'text/plain') {
            $queryParams = Utils::transRequest($httpBody);
            $httpBody = '';
        } else {
            $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
        }

        $queryParams['Action'] = $paths[1];
        $queryParams['Version'] = $paths[2];
        $resourcePath = '/';

        $query = '';
        ksort($queryParams);  // sort query first
        foreach ($queryParams as $k => $v) {
            $query .= rawurlencode($k) . '=' . rawurlencode($v) . '&';
        }
        $query = substr($query, 0, -1);

        $headers = Utils::signv4($this->config->getAk(), $this->config->getSk(), $this->config->getRegion(), $service,
            $httpBody, $query, $method, $resourcePath, $headers);

        return new Request($method,
            'https://' . $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers, $httpBody);
    }


    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
