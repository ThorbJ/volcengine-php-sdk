<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Cloudtrail\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class TrailForLookupEventsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TrailForLookupEventsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'access_key_id' => 'string',
        'error_code' => 'string',
        'event_detail' => 'string',
        'event_id' => 'string',
        'event_name' => 'string',
        'event_name_display' => 'string',
        'event_source' => 'string',
        'event_source_display' => 'string',
        'event_time' => 'string',
        'region' => 'string',
        'related_resources' => '\Volcengine\Cloudtrail\Model\RelatedResourceForLookupEventsOutput[]',
        'request_id' => 'string',
        'source_ip_address' => 'string',
        'user_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'access_key_id' => null,
        'error_code' => null,
        'event_detail' => null,
        'event_id' => null,
        'event_name' => null,
        'event_name_display' => null,
        'event_source' => null,
        'event_source_display' => null,
        'event_time' => null,
        'region' => null,
        'related_resources' => null,
        'request_id' => null,
        'source_ip_address' => null,
        'user_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'access_key_id' => 'AccessKeyID',
        'error_code' => 'ErrorCode',
        'event_detail' => 'EventDetail',
        'event_id' => 'EventID',
        'event_name' => 'EventName',
        'event_name_display' => 'EventNameDisplay',
        'event_source' => 'EventSource',
        'event_source_display' => 'EventSourceDisplay',
        'event_time' => 'EventTime',
        'region' => 'Region',
        'related_resources' => 'RelatedResources',
        'request_id' => 'RequestID',
        'source_ip_address' => 'SourceIPAddress',
        'user_name' => 'UserName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'access_key_id' => 'setAccessKeyId',
        'error_code' => 'setErrorCode',
        'event_detail' => 'setEventDetail',
        'event_id' => 'setEventId',
        'event_name' => 'setEventName',
        'event_name_display' => 'setEventNameDisplay',
        'event_source' => 'setEventSource',
        'event_source_display' => 'setEventSourceDisplay',
        'event_time' => 'setEventTime',
        'region' => 'setRegion',
        'related_resources' => 'setRelatedResources',
        'request_id' => 'setRequestId',
        'source_ip_address' => 'setSourceIpAddress',
        'user_name' => 'setUserName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'access_key_id' => 'getAccessKeyId',
        'error_code' => 'getErrorCode',
        'event_detail' => 'getEventDetail',
        'event_id' => 'getEventId',
        'event_name' => 'getEventName',
        'event_name_display' => 'getEventNameDisplay',
        'event_source' => 'getEventSource',
        'event_source_display' => 'getEventSourceDisplay',
        'event_time' => 'getEventTime',
        'region' => 'getRegion',
        'related_resources' => 'getRelatedResources',
        'request_id' => 'getRequestId',
        'source_ip_address' => 'getSourceIpAddress',
        'user_name' => 'getUserName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['access_key_id'] = isset($data['access_key_id']) ? $data['access_key_id'] : null;
        $this->container['error_code'] = isset($data['error_code']) ? $data['error_code'] : null;
        $this->container['event_detail'] = isset($data['event_detail']) ? $data['event_detail'] : null;
        $this->container['event_id'] = isset($data['event_id']) ? $data['event_id'] : null;
        $this->container['event_name'] = isset($data['event_name']) ? $data['event_name'] : null;
        $this->container['event_name_display'] = isset($data['event_name_display']) ? $data['event_name_display'] : null;
        $this->container['event_source'] = isset($data['event_source']) ? $data['event_source'] : null;
        $this->container['event_source_display'] = isset($data['event_source_display']) ? $data['event_source_display'] : null;
        $this->container['event_time'] = isset($data['event_time']) ? $data['event_time'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['related_resources'] = isset($data['related_resources']) ? $data['related_resources'] : null;
        $this->container['request_id'] = isset($data['request_id']) ? $data['request_id'] : null;
        $this->container['source_ip_address'] = isset($data['source_ip_address']) ? $data['source_ip_address'] : null;
        $this->container['user_name'] = isset($data['user_name']) ? $data['user_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets access_key_id
     *
     * @return string
     */
    public function getAccessKeyId()
    {
        return $this->container['access_key_id'];
    }

    /**
     * Sets access_key_id
     *
     * @param string $access_key_id access_key_id
     *
     * @return $this
     */
    public function setAccessKeyId($access_key_id)
    {
        $this->container['access_key_id'] = $access_key_id;

        return $this;
    }

    /**
     * Gets error_code
     *
     * @return string
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     *
     * @param string $error_code error_code
     *
     * @return $this
     */
    public function setErrorCode($error_code)
    {
        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets event_detail
     *
     * @return string
     */
    public function getEventDetail()
    {
        return $this->container['event_detail'];
    }

    /**
     * Sets event_detail
     *
     * @param string $event_detail event_detail
     *
     * @return $this
     */
    public function setEventDetail($event_detail)
    {
        $this->container['event_detail'] = $event_detail;

        return $this;
    }

    /**
     * Gets event_id
     *
     * @return string
     */
    public function getEventId()
    {
        return $this->container['event_id'];
    }

    /**
     * Sets event_id
     *
     * @param string $event_id event_id
     *
     * @return $this
     */
    public function setEventId($event_id)
    {
        $this->container['event_id'] = $event_id;

        return $this;
    }

    /**
     * Gets event_name
     *
     * @return string
     */
    public function getEventName()
    {
        return $this->container['event_name'];
    }

    /**
     * Sets event_name
     *
     * @param string $event_name event_name
     *
     * @return $this
     */
    public function setEventName($event_name)
    {
        $this->container['event_name'] = $event_name;

        return $this;
    }

    /**
     * Gets event_name_display
     *
     * @return string
     */
    public function getEventNameDisplay()
    {
        return $this->container['event_name_display'];
    }

    /**
     * Sets event_name_display
     *
     * @param string $event_name_display event_name_display
     *
     * @return $this
     */
    public function setEventNameDisplay($event_name_display)
    {
        $this->container['event_name_display'] = $event_name_display;

        return $this;
    }

    /**
     * Gets event_source
     *
     * @return string
     */
    public function getEventSource()
    {
        return $this->container['event_source'];
    }

    /**
     * Sets event_source
     *
     * @param string $event_source event_source
     *
     * @return $this
     */
    public function setEventSource($event_source)
    {
        $this->container['event_source'] = $event_source;

        return $this;
    }

    /**
     * Gets event_source_display
     *
     * @return string
     */
    public function getEventSourceDisplay()
    {
        return $this->container['event_source_display'];
    }

    /**
     * Sets event_source_display
     *
     * @param string $event_source_display event_source_display
     *
     * @return $this
     */
    public function setEventSourceDisplay($event_source_display)
    {
        $this->container['event_source_display'] = $event_source_display;

        return $this;
    }

    /**
     * Gets event_time
     *
     * @return string
     */
    public function getEventTime()
    {
        return $this->container['event_time'];
    }

    /**
     * Sets event_time
     *
     * @param string $event_time event_time
     *
     * @return $this
     */
    public function setEventTime($event_time)
    {
        $this->container['event_time'] = $event_time;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region region
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets related_resources
     *
     * @return \Volcengine\Cloudtrail\Model\RelatedResourceForLookupEventsOutput[]
     */
    public function getRelatedResources()
    {
        return $this->container['related_resources'];
    }

    /**
     * Sets related_resources
     *
     * @param \Volcengine\Cloudtrail\Model\RelatedResourceForLookupEventsOutput[] $related_resources related_resources
     *
     * @return $this
     */
    public function setRelatedResources($related_resources)
    {
        $this->container['related_resources'] = $related_resources;

        return $this;
    }

    /**
     * Gets request_id
     *
     * @return string
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     *
     * @param string $request_id request_id
     *
     * @return $this
     */
    public function setRequestId($request_id)
    {
        $this->container['request_id'] = $request_id;

        return $this;
    }

    /**
     * Gets source_ip_address
     *
     * @return string
     */
    public function getSourceIpAddress()
    {
        return $this->container['source_ip_address'];
    }

    /**
     * Sets source_ip_address
     *
     * @param string $source_ip_address source_ip_address
     *
     * @return $this
     */
    public function setSourceIpAddress($source_ip_address)
    {
        $this->container['source_ip_address'] = $source_ip_address;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string $user_name user_name
     *
     * @return $this
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

