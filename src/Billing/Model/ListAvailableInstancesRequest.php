<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Billing\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ListAvailableInstancesRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListAvailableInstancesRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'begin_time_end' => 'string',
        'begin_time_start' => 'string',
        'expired_time_end' => 'string',
        'expired_time_start' => 'string',
        'instance_ids' => 'string[]',
        'max_results' => 'int',
        'next_token' => 'string',
        'product' => 'string',
        'renew_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'begin_time_end' => null,
        'begin_time_start' => null,
        'expired_time_end' => null,
        'expired_time_start' => null,
        'instance_ids' => null,
        'max_results' => 'int32',
        'next_token' => null,
        'product' => null,
        'renew_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'begin_time_end' => 'BeginTimeEnd',
        'begin_time_start' => 'BeginTimeStart',
        'expired_time_end' => 'ExpiredTimeEnd',
        'expired_time_start' => 'ExpiredTimeStart',
        'instance_ids' => 'InstanceIDs',
        'max_results' => 'MaxResults',
        'next_token' => 'NextToken',
        'product' => 'Product',
        'renew_type' => 'RenewType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'begin_time_end' => 'setBeginTimeEnd',
        'begin_time_start' => 'setBeginTimeStart',
        'expired_time_end' => 'setExpiredTimeEnd',
        'expired_time_start' => 'setExpiredTimeStart',
        'instance_ids' => 'setInstanceIds',
        'max_results' => 'setMaxResults',
        'next_token' => 'setNextToken',
        'product' => 'setProduct',
        'renew_type' => 'setRenewType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'begin_time_end' => 'getBeginTimeEnd',
        'begin_time_start' => 'getBeginTimeStart',
        'expired_time_end' => 'getExpiredTimeEnd',
        'expired_time_start' => 'getExpiredTimeStart',
        'instance_ids' => 'getInstanceIds',
        'max_results' => 'getMaxResults',
        'next_token' => 'getNextToken',
        'product' => 'getProduct',
        'renew_type' => 'getRenewType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['begin_time_end'] = isset($data['begin_time_end']) ? $data['begin_time_end'] : null;
        $this->container['begin_time_start'] = isset($data['begin_time_start']) ? $data['begin_time_start'] : null;
        $this->container['expired_time_end'] = isset($data['expired_time_end']) ? $data['expired_time_end'] : null;
        $this->container['expired_time_start'] = isset($data['expired_time_start']) ? $data['expired_time_start'] : null;
        $this->container['instance_ids'] = isset($data['instance_ids']) ? $data['instance_ids'] : null;
        $this->container['max_results'] = isset($data['max_results']) ? $data['max_results'] : null;
        $this->container['next_token'] = isset($data['next_token']) ? $data['next_token'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['renew_type'] = isset($data['renew_type']) ? $data['renew_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['max_results'] === null) {
            $invalidProperties[] = "'max_results' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets begin_time_end
     *
     * @return string
     */
    public function getBeginTimeEnd()
    {
        return $this->container['begin_time_end'];
    }

    /**
     * Sets begin_time_end
     *
     * @param string $begin_time_end begin_time_end
     *
     * @return $this
     */
    public function setBeginTimeEnd($begin_time_end)
    {
        $this->container['begin_time_end'] = $begin_time_end;

        return $this;
    }

    /**
     * Gets begin_time_start
     *
     * @return string
     */
    public function getBeginTimeStart()
    {
        return $this->container['begin_time_start'];
    }

    /**
     * Sets begin_time_start
     *
     * @param string $begin_time_start begin_time_start
     *
     * @return $this
     */
    public function setBeginTimeStart($begin_time_start)
    {
        $this->container['begin_time_start'] = $begin_time_start;

        return $this;
    }

    /**
     * Gets expired_time_end
     *
     * @return string
     */
    public function getExpiredTimeEnd()
    {
        return $this->container['expired_time_end'];
    }

    /**
     * Sets expired_time_end
     *
     * @param string $expired_time_end expired_time_end
     *
     * @return $this
     */
    public function setExpiredTimeEnd($expired_time_end)
    {
        $this->container['expired_time_end'] = $expired_time_end;

        return $this;
    }

    /**
     * Gets expired_time_start
     *
     * @return string
     */
    public function getExpiredTimeStart()
    {
        return $this->container['expired_time_start'];
    }

    /**
     * Sets expired_time_start
     *
     * @param string $expired_time_start expired_time_start
     *
     * @return $this
     */
    public function setExpiredTimeStart($expired_time_start)
    {
        $this->container['expired_time_start'] = $expired_time_start;

        return $this;
    }

    /**
     * Gets instance_ids
     *
     * @return string[]
     */
    public function getInstanceIds()
    {
        return $this->container['instance_ids'];
    }

    /**
     * Sets instance_ids
     *
     * @param string[] $instance_ids instance_ids
     *
     * @return $this
     */
    public function setInstanceIds($instance_ids)
    {
        $this->container['instance_ids'] = $instance_ids;

        return $this;
    }

    /**
     * Gets max_results
     *
     * @return int
     */
    public function getMaxResults()
    {
        return $this->container['max_results'];
    }

    /**
     * Sets max_results
     *
     * @param int $max_results max_results
     *
     * @return $this
     */
    public function setMaxResults($max_results)
    {
        $this->container['max_results'] = $max_results;

        return $this;
    }

    /**
     * Gets next_token
     *
     * @return string
     */
    public function getNextToken()
    {
        return $this->container['next_token'];
    }

    /**
     * Sets next_token
     *
     * @param string $next_token next_token
     *
     * @return $this
     */
    public function setNextToken($next_token)
    {
        $this->container['next_token'] = $next_token;

        return $this;
    }

    /**
     * Gets product
     *
     * @return string
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string $product product
     *
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets renew_type
     *
     * @return string
     */
    public function getRenewType()
    {
        return $this->container['renew_type'];
    }

    /**
     * Sets renew_type
     *
     * @param string $renew_type renew_type
     *
     * @return $this
     */
    public function setRenewType($renew_type)
    {
        $this->container['renew_type'] = $renew_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

