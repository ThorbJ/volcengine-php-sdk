<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Billing\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ListForListPackageUsageDetailsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListForListPackageUsageDetailsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'after_amount' => 'string',
        'before_amount' => 'string',
        'begin_time' => 'string',
        'configuration_code' => 'string',
        'configuration_name' => 'string',
        'deduct_billing_factor' => 'string',
        'deduction_account_id' => 'string',
        'deduction_amount' => 'string',
        'deduction_calculate_factor' => 'string',
        'deduction_element_code' => 'string',
        'deduction_instance_no' => 'string',
        'deduction_instance_unit' => 'string',
        'deduction_product' => 'string',
        'deduction_ratio' => 'string',
        'deduction_region_code' => 'string',
        'deduction_specification' => 'string',
        'deduction_specification_unit' => 'string',
        'deduction_time' => 'string',
        'deduction_use_amount' => 'string',
        'deduction_user_name' => 'string',
        'end_time' => 'string',
        'instance_name' => 'string',
        'instance_no' => 'string',
        'owner_id' => 'string',
        'package_type' => 'string',
        'product' => 'string',
        'product_name' => 'string',
        'region_code' => 'string',
        'spec_calculate_factor' => 'string',
        'specification' => 'string',
        'specification_unit' => 'string',
        'subject_no' => 'string',
        'unit' => 'string',
        'user_name' => 'string',
        'zone_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'after_amount' => null,
        'before_amount' => null,
        'begin_time' => null,
        'configuration_code' => null,
        'configuration_name' => null,
        'deduct_billing_factor' => null,
        'deduction_account_id' => null,
        'deduction_amount' => null,
        'deduction_calculate_factor' => null,
        'deduction_element_code' => null,
        'deduction_instance_no' => null,
        'deduction_instance_unit' => null,
        'deduction_product' => null,
        'deduction_ratio' => null,
        'deduction_region_code' => null,
        'deduction_specification' => null,
        'deduction_specification_unit' => null,
        'deduction_time' => null,
        'deduction_use_amount' => null,
        'deduction_user_name' => null,
        'end_time' => null,
        'instance_name' => null,
        'instance_no' => null,
        'owner_id' => null,
        'package_type' => null,
        'product' => null,
        'product_name' => null,
        'region_code' => null,
        'spec_calculate_factor' => null,
        'specification' => null,
        'specification_unit' => null,
        'subject_no' => null,
        'unit' => null,
        'user_name' => null,
        'zone_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'after_amount' => 'AfterAmount',
        'before_amount' => 'BeforeAmount',
        'begin_time' => 'BeginTime',
        'configuration_code' => 'ConfigurationCode',
        'configuration_name' => 'ConfigurationName',
        'deduct_billing_factor' => 'DeductBillingFactor',
        'deduction_account_id' => 'DeductionAccountID',
        'deduction_amount' => 'DeductionAmount',
        'deduction_calculate_factor' => 'DeductionCalculateFactor',
        'deduction_element_code' => 'DeductionElementCode',
        'deduction_instance_no' => 'DeductionInstanceNo',
        'deduction_instance_unit' => 'DeductionInstanceUnit',
        'deduction_product' => 'DeductionProduct',
        'deduction_ratio' => 'DeductionRatio',
        'deduction_region_code' => 'DeductionRegionCode',
        'deduction_specification' => 'DeductionSpecification',
        'deduction_specification_unit' => 'DeductionSpecificationUnit',
        'deduction_time' => 'DeductionTime',
        'deduction_use_amount' => 'DeductionUseAmount',
        'deduction_user_name' => 'DeductionUserName',
        'end_time' => 'EndTime',
        'instance_name' => 'InstanceName',
        'instance_no' => 'InstanceNo',
        'owner_id' => 'OwnerID',
        'package_type' => 'PackageType',
        'product' => 'Product',
        'product_name' => 'ProductName',
        'region_code' => 'RegionCode',
        'spec_calculate_factor' => 'SpecCalculateFactor',
        'specification' => 'Specification',
        'specification_unit' => 'SpecificationUnit',
        'subject_no' => 'SubjectNo',
        'unit' => 'Unit',
        'user_name' => 'UserName',
        'zone_code' => 'ZoneCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'after_amount' => 'setAfterAmount',
        'before_amount' => 'setBeforeAmount',
        'begin_time' => 'setBeginTime',
        'configuration_code' => 'setConfigurationCode',
        'configuration_name' => 'setConfigurationName',
        'deduct_billing_factor' => 'setDeductBillingFactor',
        'deduction_account_id' => 'setDeductionAccountId',
        'deduction_amount' => 'setDeductionAmount',
        'deduction_calculate_factor' => 'setDeductionCalculateFactor',
        'deduction_element_code' => 'setDeductionElementCode',
        'deduction_instance_no' => 'setDeductionInstanceNo',
        'deduction_instance_unit' => 'setDeductionInstanceUnit',
        'deduction_product' => 'setDeductionProduct',
        'deduction_ratio' => 'setDeductionRatio',
        'deduction_region_code' => 'setDeductionRegionCode',
        'deduction_specification' => 'setDeductionSpecification',
        'deduction_specification_unit' => 'setDeductionSpecificationUnit',
        'deduction_time' => 'setDeductionTime',
        'deduction_use_amount' => 'setDeductionUseAmount',
        'deduction_user_name' => 'setDeductionUserName',
        'end_time' => 'setEndTime',
        'instance_name' => 'setInstanceName',
        'instance_no' => 'setInstanceNo',
        'owner_id' => 'setOwnerId',
        'package_type' => 'setPackageType',
        'product' => 'setProduct',
        'product_name' => 'setProductName',
        'region_code' => 'setRegionCode',
        'spec_calculate_factor' => 'setSpecCalculateFactor',
        'specification' => 'setSpecification',
        'specification_unit' => 'setSpecificationUnit',
        'subject_no' => 'setSubjectNo',
        'unit' => 'setUnit',
        'user_name' => 'setUserName',
        'zone_code' => 'setZoneCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'after_amount' => 'getAfterAmount',
        'before_amount' => 'getBeforeAmount',
        'begin_time' => 'getBeginTime',
        'configuration_code' => 'getConfigurationCode',
        'configuration_name' => 'getConfigurationName',
        'deduct_billing_factor' => 'getDeductBillingFactor',
        'deduction_account_id' => 'getDeductionAccountId',
        'deduction_amount' => 'getDeductionAmount',
        'deduction_calculate_factor' => 'getDeductionCalculateFactor',
        'deduction_element_code' => 'getDeductionElementCode',
        'deduction_instance_no' => 'getDeductionInstanceNo',
        'deduction_instance_unit' => 'getDeductionInstanceUnit',
        'deduction_product' => 'getDeductionProduct',
        'deduction_ratio' => 'getDeductionRatio',
        'deduction_region_code' => 'getDeductionRegionCode',
        'deduction_specification' => 'getDeductionSpecification',
        'deduction_specification_unit' => 'getDeductionSpecificationUnit',
        'deduction_time' => 'getDeductionTime',
        'deduction_use_amount' => 'getDeductionUseAmount',
        'deduction_user_name' => 'getDeductionUserName',
        'end_time' => 'getEndTime',
        'instance_name' => 'getInstanceName',
        'instance_no' => 'getInstanceNo',
        'owner_id' => 'getOwnerId',
        'package_type' => 'getPackageType',
        'product' => 'getProduct',
        'product_name' => 'getProductName',
        'region_code' => 'getRegionCode',
        'spec_calculate_factor' => 'getSpecCalculateFactor',
        'specification' => 'getSpecification',
        'specification_unit' => 'getSpecificationUnit',
        'subject_no' => 'getSubjectNo',
        'unit' => 'getUnit',
        'user_name' => 'getUserName',
        'zone_code' => 'getZoneCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PACKAGE_TYPE_PERIODIC = 'Periodic';
    const PACKAGE_TYPE_DIMINISHING = 'Diminishing';
    const PACKAGE_TYPE_HYBRID = 'Hybrid';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPackageTypeAllowableValues()
    {
        return [
            self::PACKAGE_TYPE_PERIODIC,
            self::PACKAGE_TYPE_DIMINISHING,
            self::PACKAGE_TYPE_HYBRID,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['after_amount'] = isset($data['after_amount']) ? $data['after_amount'] : null;
        $this->container['before_amount'] = isset($data['before_amount']) ? $data['before_amount'] : null;
        $this->container['begin_time'] = isset($data['begin_time']) ? $data['begin_time'] : null;
        $this->container['configuration_code'] = isset($data['configuration_code']) ? $data['configuration_code'] : null;
        $this->container['configuration_name'] = isset($data['configuration_name']) ? $data['configuration_name'] : null;
        $this->container['deduct_billing_factor'] = isset($data['deduct_billing_factor']) ? $data['deduct_billing_factor'] : null;
        $this->container['deduction_account_id'] = isset($data['deduction_account_id']) ? $data['deduction_account_id'] : null;
        $this->container['deduction_amount'] = isset($data['deduction_amount']) ? $data['deduction_amount'] : null;
        $this->container['deduction_calculate_factor'] = isset($data['deduction_calculate_factor']) ? $data['deduction_calculate_factor'] : null;
        $this->container['deduction_element_code'] = isset($data['deduction_element_code']) ? $data['deduction_element_code'] : null;
        $this->container['deduction_instance_no'] = isset($data['deduction_instance_no']) ? $data['deduction_instance_no'] : null;
        $this->container['deduction_instance_unit'] = isset($data['deduction_instance_unit']) ? $data['deduction_instance_unit'] : null;
        $this->container['deduction_product'] = isset($data['deduction_product']) ? $data['deduction_product'] : null;
        $this->container['deduction_ratio'] = isset($data['deduction_ratio']) ? $data['deduction_ratio'] : null;
        $this->container['deduction_region_code'] = isset($data['deduction_region_code']) ? $data['deduction_region_code'] : null;
        $this->container['deduction_specification'] = isset($data['deduction_specification']) ? $data['deduction_specification'] : null;
        $this->container['deduction_specification_unit'] = isset($data['deduction_specification_unit']) ? $data['deduction_specification_unit'] : null;
        $this->container['deduction_time'] = isset($data['deduction_time']) ? $data['deduction_time'] : null;
        $this->container['deduction_use_amount'] = isset($data['deduction_use_amount']) ? $data['deduction_use_amount'] : null;
        $this->container['deduction_user_name'] = isset($data['deduction_user_name']) ? $data['deduction_user_name'] : null;
        $this->container['end_time'] = isset($data['end_time']) ? $data['end_time'] : null;
        $this->container['instance_name'] = isset($data['instance_name']) ? $data['instance_name'] : null;
        $this->container['instance_no'] = isset($data['instance_no']) ? $data['instance_no'] : null;
        $this->container['owner_id'] = isset($data['owner_id']) ? $data['owner_id'] : null;
        $this->container['package_type'] = isset($data['package_type']) ? $data['package_type'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['product_name'] = isset($data['product_name']) ? $data['product_name'] : null;
        $this->container['region_code'] = isset($data['region_code']) ? $data['region_code'] : null;
        $this->container['spec_calculate_factor'] = isset($data['spec_calculate_factor']) ? $data['spec_calculate_factor'] : null;
        $this->container['specification'] = isset($data['specification']) ? $data['specification'] : null;
        $this->container['specification_unit'] = isset($data['specification_unit']) ? $data['specification_unit'] : null;
        $this->container['subject_no'] = isset($data['subject_no']) ? $data['subject_no'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
        $this->container['user_name'] = isset($data['user_name']) ? $data['user_name'] : null;
        $this->container['zone_code'] = isset($data['zone_code']) ? $data['zone_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPackageTypeAllowableValues();
        if (!is_null($this->container['package_type']) && !in_array($this->container['package_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'package_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets after_amount
     *
     * @return string
     */
    public function getAfterAmount()
    {
        return $this->container['after_amount'];
    }

    /**
     * Sets after_amount
     *
     * @param string $after_amount after_amount
     *
     * @return $this
     */
    public function setAfterAmount($after_amount)
    {
        $this->container['after_amount'] = $after_amount;

        return $this;
    }

    /**
     * Gets before_amount
     *
     * @return string
     */
    public function getBeforeAmount()
    {
        return $this->container['before_amount'];
    }

    /**
     * Sets before_amount
     *
     * @param string $before_amount before_amount
     *
     * @return $this
     */
    public function setBeforeAmount($before_amount)
    {
        $this->container['before_amount'] = $before_amount;

        return $this;
    }

    /**
     * Gets begin_time
     *
     * @return string
     */
    public function getBeginTime()
    {
        return $this->container['begin_time'];
    }

    /**
     * Sets begin_time
     *
     * @param string $begin_time begin_time
     *
     * @return $this
     */
    public function setBeginTime($begin_time)
    {
        $this->container['begin_time'] = $begin_time;

        return $this;
    }

    /**
     * Gets configuration_code
     *
     * @return string
     */
    public function getConfigurationCode()
    {
        return $this->container['configuration_code'];
    }

    /**
     * Sets configuration_code
     *
     * @param string $configuration_code configuration_code
     *
     * @return $this
     */
    public function setConfigurationCode($configuration_code)
    {
        $this->container['configuration_code'] = $configuration_code;

        return $this;
    }

    /**
     * Gets configuration_name
     *
     * @return string
     */
    public function getConfigurationName()
    {
        return $this->container['configuration_name'];
    }

    /**
     * Sets configuration_name
     *
     * @param string $configuration_name configuration_name
     *
     * @return $this
     */
    public function setConfigurationName($configuration_name)
    {
        $this->container['configuration_name'] = $configuration_name;

        return $this;
    }

    /**
     * Gets deduct_billing_factor
     *
     * @return string
     */
    public function getDeductBillingFactor()
    {
        return $this->container['deduct_billing_factor'];
    }

    /**
     * Sets deduct_billing_factor
     *
     * @param string $deduct_billing_factor deduct_billing_factor
     *
     * @return $this
     */
    public function setDeductBillingFactor($deduct_billing_factor)
    {
        $this->container['deduct_billing_factor'] = $deduct_billing_factor;

        return $this;
    }

    /**
     * Gets deduction_account_id
     *
     * @return string
     */
    public function getDeductionAccountId()
    {
        return $this->container['deduction_account_id'];
    }

    /**
     * Sets deduction_account_id
     *
     * @param string $deduction_account_id deduction_account_id
     *
     * @return $this
     */
    public function setDeductionAccountId($deduction_account_id)
    {
        $this->container['deduction_account_id'] = $deduction_account_id;

        return $this;
    }

    /**
     * Gets deduction_amount
     *
     * @return string
     */
    public function getDeductionAmount()
    {
        return $this->container['deduction_amount'];
    }

    /**
     * Sets deduction_amount
     *
     * @param string $deduction_amount deduction_amount
     *
     * @return $this
     */
    public function setDeductionAmount($deduction_amount)
    {
        $this->container['deduction_amount'] = $deduction_amount;

        return $this;
    }

    /**
     * Gets deduction_calculate_factor
     *
     * @return string
     */
    public function getDeductionCalculateFactor()
    {
        return $this->container['deduction_calculate_factor'];
    }

    /**
     * Sets deduction_calculate_factor
     *
     * @param string $deduction_calculate_factor deduction_calculate_factor
     *
     * @return $this
     */
    public function setDeductionCalculateFactor($deduction_calculate_factor)
    {
        $this->container['deduction_calculate_factor'] = $deduction_calculate_factor;

        return $this;
    }

    /**
     * Gets deduction_element_code
     *
     * @return string
     */
    public function getDeductionElementCode()
    {
        return $this->container['deduction_element_code'];
    }

    /**
     * Sets deduction_element_code
     *
     * @param string $deduction_element_code deduction_element_code
     *
     * @return $this
     */
    public function setDeductionElementCode($deduction_element_code)
    {
        $this->container['deduction_element_code'] = $deduction_element_code;

        return $this;
    }

    /**
     * Gets deduction_instance_no
     *
     * @return string
     */
    public function getDeductionInstanceNo()
    {
        return $this->container['deduction_instance_no'];
    }

    /**
     * Sets deduction_instance_no
     *
     * @param string $deduction_instance_no deduction_instance_no
     *
     * @return $this
     */
    public function setDeductionInstanceNo($deduction_instance_no)
    {
        $this->container['deduction_instance_no'] = $deduction_instance_no;

        return $this;
    }

    /**
     * Gets deduction_instance_unit
     *
     * @return string
     */
    public function getDeductionInstanceUnit()
    {
        return $this->container['deduction_instance_unit'];
    }

    /**
     * Sets deduction_instance_unit
     *
     * @param string $deduction_instance_unit deduction_instance_unit
     *
     * @return $this
     */
    public function setDeductionInstanceUnit($deduction_instance_unit)
    {
        $this->container['deduction_instance_unit'] = $deduction_instance_unit;

        return $this;
    }

    /**
     * Gets deduction_product
     *
     * @return string
     */
    public function getDeductionProduct()
    {
        return $this->container['deduction_product'];
    }

    /**
     * Sets deduction_product
     *
     * @param string $deduction_product deduction_product
     *
     * @return $this
     */
    public function setDeductionProduct($deduction_product)
    {
        $this->container['deduction_product'] = $deduction_product;

        return $this;
    }

    /**
     * Gets deduction_ratio
     *
     * @return string
     */
    public function getDeductionRatio()
    {
        return $this->container['deduction_ratio'];
    }

    /**
     * Sets deduction_ratio
     *
     * @param string $deduction_ratio deduction_ratio
     *
     * @return $this
     */
    public function setDeductionRatio($deduction_ratio)
    {
        $this->container['deduction_ratio'] = $deduction_ratio;

        return $this;
    }

    /**
     * Gets deduction_region_code
     *
     * @return string
     */
    public function getDeductionRegionCode()
    {
        return $this->container['deduction_region_code'];
    }

    /**
     * Sets deduction_region_code
     *
     * @param string $deduction_region_code deduction_region_code
     *
     * @return $this
     */
    public function setDeductionRegionCode($deduction_region_code)
    {
        $this->container['deduction_region_code'] = $deduction_region_code;

        return $this;
    }

    /**
     * Gets deduction_specification
     *
     * @return string
     */
    public function getDeductionSpecification()
    {
        return $this->container['deduction_specification'];
    }

    /**
     * Sets deduction_specification
     *
     * @param string $deduction_specification deduction_specification
     *
     * @return $this
     */
    public function setDeductionSpecification($deduction_specification)
    {
        $this->container['deduction_specification'] = $deduction_specification;

        return $this;
    }

    /**
     * Gets deduction_specification_unit
     *
     * @return string
     */
    public function getDeductionSpecificationUnit()
    {
        return $this->container['deduction_specification_unit'];
    }

    /**
     * Sets deduction_specification_unit
     *
     * @param string $deduction_specification_unit deduction_specification_unit
     *
     * @return $this
     */
    public function setDeductionSpecificationUnit($deduction_specification_unit)
    {
        $this->container['deduction_specification_unit'] = $deduction_specification_unit;

        return $this;
    }

    /**
     * Gets deduction_time
     *
     * @return string
     */
    public function getDeductionTime()
    {
        return $this->container['deduction_time'];
    }

    /**
     * Sets deduction_time
     *
     * @param string $deduction_time deduction_time
     *
     * @return $this
     */
    public function setDeductionTime($deduction_time)
    {
        $this->container['deduction_time'] = $deduction_time;

        return $this;
    }

    /**
     * Gets deduction_use_amount
     *
     * @return string
     */
    public function getDeductionUseAmount()
    {
        return $this->container['deduction_use_amount'];
    }

    /**
     * Sets deduction_use_amount
     *
     * @param string $deduction_use_amount deduction_use_amount
     *
     * @return $this
     */
    public function setDeductionUseAmount($deduction_use_amount)
    {
        $this->container['deduction_use_amount'] = $deduction_use_amount;

        return $this;
    }

    /**
     * Gets deduction_user_name
     *
     * @return string
     */
    public function getDeductionUserName()
    {
        return $this->container['deduction_user_name'];
    }

    /**
     * Sets deduction_user_name
     *
     * @param string $deduction_user_name deduction_user_name
     *
     * @return $this
     */
    public function setDeductionUserName($deduction_user_name)
    {
        $this->container['deduction_user_name'] = $deduction_user_name;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return string
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param string $end_time end_time
     *
     * @return $this
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets instance_name
     *
     * @return string
     */
    public function getInstanceName()
    {
        return $this->container['instance_name'];
    }

    /**
     * Sets instance_name
     *
     * @param string $instance_name instance_name
     *
     * @return $this
     */
    public function setInstanceName($instance_name)
    {
        $this->container['instance_name'] = $instance_name;

        return $this;
    }

    /**
     * Gets instance_no
     *
     * @return string
     */
    public function getInstanceNo()
    {
        return $this->container['instance_no'];
    }

    /**
     * Sets instance_no
     *
     * @param string $instance_no instance_no
     *
     * @return $this
     */
    public function setInstanceNo($instance_no)
    {
        $this->container['instance_no'] = $instance_no;

        return $this;
    }

    /**
     * Gets owner_id
     *
     * @return string
     */
    public function getOwnerId()
    {
        return $this->container['owner_id'];
    }

    /**
     * Sets owner_id
     *
     * @param string $owner_id owner_id
     *
     * @return $this
     */
    public function setOwnerId($owner_id)
    {
        $this->container['owner_id'] = $owner_id;

        return $this;
    }

    /**
     * Gets package_type
     *
     * @return string
     */
    public function getPackageType()
    {
        return $this->container['package_type'];
    }

    /**
     * Sets package_type
     *
     * @param string $package_type package_type
     *
     * @return $this
     */
    public function setPackageType($package_type)
    {
        $allowedValues = $this->getPackageTypeAllowableValues();
        if (!is_null($package_type) && !in_array($package_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'package_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['package_type'] = $package_type;

        return $this;
    }

    /**
     * Gets product
     *
     * @return string
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string $product product
     *
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets product_name
     *
     * @return string
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string $product_name product_name
     *
     * @return $this
     */
    public function setProductName($product_name)
    {
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets region_code
     *
     * @return string
     */
    public function getRegionCode()
    {
        return $this->container['region_code'];
    }

    /**
     * Sets region_code
     *
     * @param string $region_code region_code
     *
     * @return $this
     */
    public function setRegionCode($region_code)
    {
        $this->container['region_code'] = $region_code;

        return $this;
    }

    /**
     * Gets spec_calculate_factor
     *
     * @return string
     */
    public function getSpecCalculateFactor()
    {
        return $this->container['spec_calculate_factor'];
    }

    /**
     * Sets spec_calculate_factor
     *
     * @param string $spec_calculate_factor spec_calculate_factor
     *
     * @return $this
     */
    public function setSpecCalculateFactor($spec_calculate_factor)
    {
        $this->container['spec_calculate_factor'] = $spec_calculate_factor;

        return $this;
    }

    /**
     * Gets specification
     *
     * @return string
     */
    public function getSpecification()
    {
        return $this->container['specification'];
    }

    /**
     * Sets specification
     *
     * @param string $specification specification
     *
     * @return $this
     */
    public function setSpecification($specification)
    {
        $this->container['specification'] = $specification;

        return $this;
    }

    /**
     * Gets specification_unit
     *
     * @return string
     */
    public function getSpecificationUnit()
    {
        return $this->container['specification_unit'];
    }

    /**
     * Sets specification_unit
     *
     * @param string $specification_unit specification_unit
     *
     * @return $this
     */
    public function setSpecificationUnit($specification_unit)
    {
        $this->container['specification_unit'] = $specification_unit;

        return $this;
    }

    /**
     * Gets subject_no
     *
     * @return string
     */
    public function getSubjectNo()
    {
        return $this->container['subject_no'];
    }

    /**
     * Sets subject_no
     *
     * @param string $subject_no subject_no
     *
     * @return $this
     */
    public function setSubjectNo($subject_no)
    {
        $this->container['subject_no'] = $subject_no;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string $unit unit
     *
     * @return $this
     */
    public function setUnit($unit)
    {
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string $user_name user_name
     *
     * @return $this
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets zone_code
     *
     * @return string
     */
    public function getZoneCode()
    {
        return $this->container['zone_code'];
    }

    /**
     * Sets zone_code
     *
     * @param string $zone_code zone_code
     *
     * @return $this
     */
    public function setZoneCode($zone_code)
    {
        $this->container['zone_code'] = $zone_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

