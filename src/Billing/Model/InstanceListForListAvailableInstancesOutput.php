<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Billing\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class InstanceListForListAvailableInstancesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InstanceListForListAvailableInstancesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'int',
        'begin_time' => 'string',
        'configuration_code' => 'string',
        'expired_time' => 'string',
        'instance_id' => 'string',
        'instance_name' => 'string',
        'payment_method' => 'string',
        'product' => 'string',
        'remain_renew_times' => 'string',
        'renew_type' => 'string',
        'renewal_duration_unit' => 'string',
        'renewal_times' => 'string',
        'status' => 'string',
        'sub_status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => 'int32',
        'begin_time' => null,
        'configuration_code' => null,
        'expired_time' => null,
        'instance_id' => null,
        'instance_name' => null,
        'payment_method' => null,
        'product' => null,
        'remain_renew_times' => null,
        'renew_type' => null,
        'renewal_duration_unit' => null,
        'renewal_times' => null,
        'status' => null,
        'sub_status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'AccountID',
        'begin_time' => 'BeginTime',
        'configuration_code' => 'ConfigurationCode',
        'expired_time' => 'ExpiredTime',
        'instance_id' => 'InstanceID',
        'instance_name' => 'InstanceName',
        'payment_method' => 'PaymentMethod',
        'product' => 'Product',
        'remain_renew_times' => 'RemainRenewTimes',
        'renew_type' => 'RenewType',
        'renewal_duration_unit' => 'RenewalDurationUnit',
        'renewal_times' => 'RenewalTimes',
        'status' => 'Status',
        'sub_status' => 'SubStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'begin_time' => 'setBeginTime',
        'configuration_code' => 'setConfigurationCode',
        'expired_time' => 'setExpiredTime',
        'instance_id' => 'setInstanceId',
        'instance_name' => 'setInstanceName',
        'payment_method' => 'setPaymentMethod',
        'product' => 'setProduct',
        'remain_renew_times' => 'setRemainRenewTimes',
        'renew_type' => 'setRenewType',
        'renewal_duration_unit' => 'setRenewalDurationUnit',
        'renewal_times' => 'setRenewalTimes',
        'status' => 'setStatus',
        'sub_status' => 'setSubStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'begin_time' => 'getBeginTime',
        'configuration_code' => 'getConfigurationCode',
        'expired_time' => 'getExpiredTime',
        'instance_id' => 'getInstanceId',
        'instance_name' => 'getInstanceName',
        'payment_method' => 'getPaymentMethod',
        'product' => 'getProduct',
        'remain_renew_times' => 'getRemainRenewTimes',
        'renew_type' => 'getRenewType',
        'renewal_duration_unit' => 'getRenewalDurationUnit',
        'renewal_times' => 'getRenewalTimes',
        'status' => 'getStatus',
        'sub_status' => 'getSubStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['begin_time'] = isset($data['begin_time']) ? $data['begin_time'] : null;
        $this->container['configuration_code'] = isset($data['configuration_code']) ? $data['configuration_code'] : null;
        $this->container['expired_time'] = isset($data['expired_time']) ? $data['expired_time'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['instance_name'] = isset($data['instance_name']) ? $data['instance_name'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['remain_renew_times'] = isset($data['remain_renew_times']) ? $data['remain_renew_times'] : null;
        $this->container['renew_type'] = isset($data['renew_type']) ? $data['renew_type'] : null;
        $this->container['renewal_duration_unit'] = isset($data['renewal_duration_unit']) ? $data['renewal_duration_unit'] : null;
        $this->container['renewal_times'] = isset($data['renewal_times']) ? $data['renewal_times'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['sub_status'] = isset($data['sub_status']) ? $data['sub_status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets begin_time
     *
     * @return string
     */
    public function getBeginTime()
    {
        return $this->container['begin_time'];
    }

    /**
     * Sets begin_time
     *
     * @param string $begin_time begin_time
     *
     * @return $this
     */
    public function setBeginTime($begin_time)
    {
        $this->container['begin_time'] = $begin_time;

        return $this;
    }

    /**
     * Gets configuration_code
     *
     * @return string
     */
    public function getConfigurationCode()
    {
        return $this->container['configuration_code'];
    }

    /**
     * Sets configuration_code
     *
     * @param string $configuration_code configuration_code
     *
     * @return $this
     */
    public function setConfigurationCode($configuration_code)
    {
        $this->container['configuration_code'] = $configuration_code;

        return $this;
    }

    /**
     * Gets expired_time
     *
     * @return string
     */
    public function getExpiredTime()
    {
        return $this->container['expired_time'];
    }

    /**
     * Sets expired_time
     *
     * @param string $expired_time expired_time
     *
     * @return $this
     */
    public function setExpiredTime($expired_time)
    {
        $this->container['expired_time'] = $expired_time;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets instance_name
     *
     * @return string
     */
    public function getInstanceName()
    {
        return $this->container['instance_name'];
    }

    /**
     * Sets instance_name
     *
     * @param string $instance_name instance_name
     *
     * @return $this
     */
    public function setInstanceName($instance_name)
    {
        $this->container['instance_name'] = $instance_name;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string $payment_method payment_method
     *
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets product
     *
     * @return string
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string $product product
     *
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets remain_renew_times
     *
     * @return string
     */
    public function getRemainRenewTimes()
    {
        return $this->container['remain_renew_times'];
    }

    /**
     * Sets remain_renew_times
     *
     * @param string $remain_renew_times remain_renew_times
     *
     * @return $this
     */
    public function setRemainRenewTimes($remain_renew_times)
    {
        $this->container['remain_renew_times'] = $remain_renew_times;

        return $this;
    }

    /**
     * Gets renew_type
     *
     * @return string
     */
    public function getRenewType()
    {
        return $this->container['renew_type'];
    }

    /**
     * Sets renew_type
     *
     * @param string $renew_type renew_type
     *
     * @return $this
     */
    public function setRenewType($renew_type)
    {
        $this->container['renew_type'] = $renew_type;

        return $this;
    }

    /**
     * Gets renewal_duration_unit
     *
     * @return string
     */
    public function getRenewalDurationUnit()
    {
        return $this->container['renewal_duration_unit'];
    }

    /**
     * Sets renewal_duration_unit
     *
     * @param string $renewal_duration_unit renewal_duration_unit
     *
     * @return $this
     */
    public function setRenewalDurationUnit($renewal_duration_unit)
    {
        $this->container['renewal_duration_unit'] = $renewal_duration_unit;

        return $this;
    }

    /**
     * Gets renewal_times
     *
     * @return string
     */
    public function getRenewalTimes()
    {
        return $this->container['renewal_times'];
    }

    /**
     * Sets renewal_times
     *
     * @param string $renewal_times renewal_times
     *
     * @return $this
     */
    public function setRenewalTimes($renewal_times)
    {
        $this->container['renewal_times'] = $renewal_times;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets sub_status
     *
     * @return string
     */
    public function getSubStatus()
    {
        return $this->container['sub_status'];
    }

    /**
     * Sets sub_status
     *
     * @param string $sub_status sub_status
     *
     * @return $this
     */
    public function setSubStatus($sub_status)
    {
        $this->container['sub_status'] = $sub_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

