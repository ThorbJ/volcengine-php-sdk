<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Billing\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class RelationForListInvitationOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RelationForListInvitationOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_alias' => 'string',
        'auth_info' => '\Volcengine\Billing\Model\AuthInfoForListInvitationOutput[]',
        'filiation' => 'int',
        'filiation_desc' => 'string',
        'major_account_id' => 'int',
        'major_account_name' => 'string',
        'relation' => 'int',
        'relation_desc' => 'string',
        'relation_id' => 'string',
        'status' => 'int',
        'status_desc' => 'string',
        'sub_account_id' => 'int',
        'sub_account_name' => 'string',
        'update_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_alias' => null,
        'auth_info' => null,
        'filiation' => 'int32',
        'filiation_desc' => null,
        'major_account_id' => 'int64',
        'major_account_name' => null,
        'relation' => 'int32',
        'relation_desc' => null,
        'relation_id' => null,
        'status' => 'int32',
        'status_desc' => null,
        'sub_account_id' => 'int64',
        'sub_account_name' => null,
        'update_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_alias' => 'AccountAlias',
        'auth_info' => 'AuthInfo',
        'filiation' => 'Filiation',
        'filiation_desc' => 'FiliationDesc',
        'major_account_id' => 'MajorAccountID',
        'major_account_name' => 'MajorAccountName',
        'relation' => 'Relation',
        'relation_desc' => 'RelationDesc',
        'relation_id' => 'RelationID',
        'status' => 'Status',
        'status_desc' => 'StatusDesc',
        'sub_account_id' => 'SubAccountID',
        'sub_account_name' => 'SubAccountName',
        'update_time' => 'UpdateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_alias' => 'setAccountAlias',
        'auth_info' => 'setAuthInfo',
        'filiation' => 'setFiliation',
        'filiation_desc' => 'setFiliationDesc',
        'major_account_id' => 'setMajorAccountId',
        'major_account_name' => 'setMajorAccountName',
        'relation' => 'setRelation',
        'relation_desc' => 'setRelationDesc',
        'relation_id' => 'setRelationId',
        'status' => 'setStatus',
        'status_desc' => 'setStatusDesc',
        'sub_account_id' => 'setSubAccountId',
        'sub_account_name' => 'setSubAccountName',
        'update_time' => 'setUpdateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_alias' => 'getAccountAlias',
        'auth_info' => 'getAuthInfo',
        'filiation' => 'getFiliation',
        'filiation_desc' => 'getFiliationDesc',
        'major_account_id' => 'getMajorAccountId',
        'major_account_name' => 'getMajorAccountName',
        'relation' => 'getRelation',
        'relation_desc' => 'getRelationDesc',
        'relation_id' => 'getRelationId',
        'status' => 'getStatus',
        'status_desc' => 'getStatusDesc',
        'sub_account_id' => 'getSubAccountId',
        'sub_account_name' => 'getSubAccountName',
        'update_time' => 'getUpdateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_alias'] = isset($data['account_alias']) ? $data['account_alias'] : null;
        $this->container['auth_info'] = isset($data['auth_info']) ? $data['auth_info'] : null;
        $this->container['filiation'] = isset($data['filiation']) ? $data['filiation'] : null;
        $this->container['filiation_desc'] = isset($data['filiation_desc']) ? $data['filiation_desc'] : null;
        $this->container['major_account_id'] = isset($data['major_account_id']) ? $data['major_account_id'] : null;
        $this->container['major_account_name'] = isset($data['major_account_name']) ? $data['major_account_name'] : null;
        $this->container['relation'] = isset($data['relation']) ? $data['relation'] : null;
        $this->container['relation_desc'] = isset($data['relation_desc']) ? $data['relation_desc'] : null;
        $this->container['relation_id'] = isset($data['relation_id']) ? $data['relation_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['status_desc'] = isset($data['status_desc']) ? $data['status_desc'] : null;
        $this->container['sub_account_id'] = isset($data['sub_account_id']) ? $data['sub_account_id'] : null;
        $this->container['sub_account_name'] = isset($data['sub_account_name']) ? $data['sub_account_name'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_alias
     *
     * @return string
     */
    public function getAccountAlias()
    {
        return $this->container['account_alias'];
    }

    /**
     * Sets account_alias
     *
     * @param string $account_alias account_alias
     *
     * @return $this
     */
    public function setAccountAlias($account_alias)
    {
        $this->container['account_alias'] = $account_alias;

        return $this;
    }

    /**
     * Gets auth_info
     *
     * @return \Volcengine\Billing\Model\AuthInfoForListInvitationOutput[]
     */
    public function getAuthInfo()
    {
        return $this->container['auth_info'];
    }

    /**
     * Sets auth_info
     *
     * @param \Volcengine\Billing\Model\AuthInfoForListInvitationOutput[] $auth_info auth_info
     *
     * @return $this
     */
    public function setAuthInfo($auth_info)
    {
        $this->container['auth_info'] = $auth_info;

        return $this;
    }

    /**
     * Gets filiation
     *
     * @return int
     */
    public function getFiliation()
    {
        return $this->container['filiation'];
    }

    /**
     * Sets filiation
     *
     * @param int $filiation filiation
     *
     * @return $this
     */
    public function setFiliation($filiation)
    {
        $this->container['filiation'] = $filiation;

        return $this;
    }

    /**
     * Gets filiation_desc
     *
     * @return string
     */
    public function getFiliationDesc()
    {
        return $this->container['filiation_desc'];
    }

    /**
     * Sets filiation_desc
     *
     * @param string $filiation_desc filiation_desc
     *
     * @return $this
     */
    public function setFiliationDesc($filiation_desc)
    {
        $this->container['filiation_desc'] = $filiation_desc;

        return $this;
    }

    /**
     * Gets major_account_id
     *
     * @return int
     */
    public function getMajorAccountId()
    {
        return $this->container['major_account_id'];
    }

    /**
     * Sets major_account_id
     *
     * @param int $major_account_id major_account_id
     *
     * @return $this
     */
    public function setMajorAccountId($major_account_id)
    {
        $this->container['major_account_id'] = $major_account_id;

        return $this;
    }

    /**
     * Gets major_account_name
     *
     * @return string
     */
    public function getMajorAccountName()
    {
        return $this->container['major_account_name'];
    }

    /**
     * Sets major_account_name
     *
     * @param string $major_account_name major_account_name
     *
     * @return $this
     */
    public function setMajorAccountName($major_account_name)
    {
        $this->container['major_account_name'] = $major_account_name;

        return $this;
    }

    /**
     * Gets relation
     *
     * @return int
     */
    public function getRelation()
    {
        return $this->container['relation'];
    }

    /**
     * Sets relation
     *
     * @param int $relation relation
     *
     * @return $this
     */
    public function setRelation($relation)
    {
        $this->container['relation'] = $relation;

        return $this;
    }

    /**
     * Gets relation_desc
     *
     * @return string
     */
    public function getRelationDesc()
    {
        return $this->container['relation_desc'];
    }

    /**
     * Sets relation_desc
     *
     * @param string $relation_desc relation_desc
     *
     * @return $this
     */
    public function setRelationDesc($relation_desc)
    {
        $this->container['relation_desc'] = $relation_desc;

        return $this;
    }

    /**
     * Gets relation_id
     *
     * @return string
     */
    public function getRelationId()
    {
        return $this->container['relation_id'];
    }

    /**
     * Sets relation_id
     *
     * @param string $relation_id relation_id
     *
     * @return $this
     */
    public function setRelationId($relation_id)
    {
        $this->container['relation_id'] = $relation_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_desc
     *
     * @return string
     */
    public function getStatusDesc()
    {
        return $this->container['status_desc'];
    }

    /**
     * Sets status_desc
     *
     * @param string $status_desc status_desc
     *
     * @return $this
     */
    public function setStatusDesc($status_desc)
    {
        $this->container['status_desc'] = $status_desc;

        return $this;
    }

    /**
     * Gets sub_account_id
     *
     * @return int
     */
    public function getSubAccountId()
    {
        return $this->container['sub_account_id'];
    }

    /**
     * Sets sub_account_id
     *
     * @param int $sub_account_id sub_account_id
     *
     * @return $this
     */
    public function setSubAccountId($sub_account_id)
    {
        $this->container['sub_account_id'] = $sub_account_id;

        return $this;
    }

    /**
     * Gets sub_account_name
     *
     * @return string
     */
    public function getSubAccountName()
    {
        return $this->container['sub_account_name'];
    }

    /**
     * Sets sub_account_name
     *
     * @param string $sub_account_name sub_account_name
     *
     * @return $this
     */
    public function setSubAccountName($sub_account_name)
    {
        $this->container['sub_account_name'] = $sub_account_name;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

