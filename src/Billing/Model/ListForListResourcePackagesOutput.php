<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Billing\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ListForListResourcePackagesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListForListResourcePackagesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'available_amount' => 'string',
        'bill_time' => 'string',
        'configuration_code' => 'string',
        'configuration_name' => 'string',
        'effective_time' => 'string',
        'expiry_time' => 'string',
        'instance_name' => 'string',
        'instance_no' => 'string',
        'owner_id' => 'string',
        'package_type' => 'string',
        'product' => 'string',
        'product_name' => 'string',
        'region_code' => 'string',
        'reset_by_natural_month' => 'string',
        'reset_period' => 'string',
        'spec_calculate_factor' => 'string',
        'specification' => 'string',
        'specification_unit' => 'string',
        'status' => 'string',
        'subject_no' => 'string',
        'total_amount' => 'string',
        'unit' => 'string',
        'user_name' => 'string',
        'zone_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'available_amount' => null,
        'bill_time' => null,
        'configuration_code' => null,
        'configuration_name' => null,
        'effective_time' => null,
        'expiry_time' => null,
        'instance_name' => null,
        'instance_no' => null,
        'owner_id' => null,
        'package_type' => null,
        'product' => null,
        'product_name' => null,
        'region_code' => null,
        'reset_by_natural_month' => null,
        'reset_period' => null,
        'spec_calculate_factor' => null,
        'specification' => null,
        'specification_unit' => null,
        'status' => null,
        'subject_no' => null,
        'total_amount' => null,
        'unit' => null,
        'user_name' => null,
        'zone_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'available_amount' => 'AvailableAmount',
        'bill_time' => 'BillTime',
        'configuration_code' => 'ConfigurationCode',
        'configuration_name' => 'ConfigurationName',
        'effective_time' => 'EffectiveTime',
        'expiry_time' => 'ExpiryTime',
        'instance_name' => 'InstanceName',
        'instance_no' => 'InstanceNo',
        'owner_id' => 'OwnerID',
        'package_type' => 'PackageType',
        'product' => 'Product',
        'product_name' => 'ProductName',
        'region_code' => 'RegionCode',
        'reset_by_natural_month' => 'ResetByNaturalMonth',
        'reset_period' => 'ResetPeriod',
        'spec_calculate_factor' => 'SpecCalculateFactor',
        'specification' => 'Specification',
        'specification_unit' => 'SpecificationUnit',
        'status' => 'Status',
        'subject_no' => 'SubjectNo',
        'total_amount' => 'TotalAmount',
        'unit' => 'Unit',
        'user_name' => 'UserName',
        'zone_code' => 'ZoneCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'available_amount' => 'setAvailableAmount',
        'bill_time' => 'setBillTime',
        'configuration_code' => 'setConfigurationCode',
        'configuration_name' => 'setConfigurationName',
        'effective_time' => 'setEffectiveTime',
        'expiry_time' => 'setExpiryTime',
        'instance_name' => 'setInstanceName',
        'instance_no' => 'setInstanceNo',
        'owner_id' => 'setOwnerId',
        'package_type' => 'setPackageType',
        'product' => 'setProduct',
        'product_name' => 'setProductName',
        'region_code' => 'setRegionCode',
        'reset_by_natural_month' => 'setResetByNaturalMonth',
        'reset_period' => 'setResetPeriod',
        'spec_calculate_factor' => 'setSpecCalculateFactor',
        'specification' => 'setSpecification',
        'specification_unit' => 'setSpecificationUnit',
        'status' => 'setStatus',
        'subject_no' => 'setSubjectNo',
        'total_amount' => 'setTotalAmount',
        'unit' => 'setUnit',
        'user_name' => 'setUserName',
        'zone_code' => 'setZoneCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'available_amount' => 'getAvailableAmount',
        'bill_time' => 'getBillTime',
        'configuration_code' => 'getConfigurationCode',
        'configuration_name' => 'getConfigurationName',
        'effective_time' => 'getEffectiveTime',
        'expiry_time' => 'getExpiryTime',
        'instance_name' => 'getInstanceName',
        'instance_no' => 'getInstanceNo',
        'owner_id' => 'getOwnerId',
        'package_type' => 'getPackageType',
        'product' => 'getProduct',
        'product_name' => 'getProductName',
        'region_code' => 'getRegionCode',
        'reset_by_natural_month' => 'getResetByNaturalMonth',
        'reset_period' => 'getResetPeriod',
        'spec_calculate_factor' => 'getSpecCalculateFactor',
        'specification' => 'getSpecification',
        'specification_unit' => 'getSpecificationUnit',
        'status' => 'getStatus',
        'subject_no' => 'getSubjectNo',
        'total_amount' => 'getTotalAmount',
        'unit' => 'getUnit',
        'user_name' => 'getUserName',
        'zone_code' => 'getZoneCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_EFFECTIVE = 'Effective';
    const STATUS_NOT_EFFECTIVE = 'NotEffective';
    const STATUS_FAILED_TO_CREATE = 'FailedToCreate';
    const STATUS_USED_UP = 'UsedUp';
    const STATUS_EXPIRED = 'Expired';
    const STATUS_REFUNDED = 'Refunded';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_EFFECTIVE,
            self::STATUS_NOT_EFFECTIVE,
            self::STATUS_FAILED_TO_CREATE,
            self::STATUS_USED_UP,
            self::STATUS_EXPIRED,
            self::STATUS_REFUNDED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['available_amount'] = isset($data['available_amount']) ? $data['available_amount'] : null;
        $this->container['bill_time'] = isset($data['bill_time']) ? $data['bill_time'] : null;
        $this->container['configuration_code'] = isset($data['configuration_code']) ? $data['configuration_code'] : null;
        $this->container['configuration_name'] = isset($data['configuration_name']) ? $data['configuration_name'] : null;
        $this->container['effective_time'] = isset($data['effective_time']) ? $data['effective_time'] : null;
        $this->container['expiry_time'] = isset($data['expiry_time']) ? $data['expiry_time'] : null;
        $this->container['instance_name'] = isset($data['instance_name']) ? $data['instance_name'] : null;
        $this->container['instance_no'] = isset($data['instance_no']) ? $data['instance_no'] : null;
        $this->container['owner_id'] = isset($data['owner_id']) ? $data['owner_id'] : null;
        $this->container['package_type'] = isset($data['package_type']) ? $data['package_type'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['product_name'] = isset($data['product_name']) ? $data['product_name'] : null;
        $this->container['region_code'] = isset($data['region_code']) ? $data['region_code'] : null;
        $this->container['reset_by_natural_month'] = isset($data['reset_by_natural_month']) ? $data['reset_by_natural_month'] : null;
        $this->container['reset_period'] = isset($data['reset_period']) ? $data['reset_period'] : null;
        $this->container['spec_calculate_factor'] = isset($data['spec_calculate_factor']) ? $data['spec_calculate_factor'] : null;
        $this->container['specification'] = isset($data['specification']) ? $data['specification'] : null;
        $this->container['specification_unit'] = isset($data['specification_unit']) ? $data['specification_unit'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['subject_no'] = isset($data['subject_no']) ? $data['subject_no'] : null;
        $this->container['total_amount'] = isset($data['total_amount']) ? $data['total_amount'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
        $this->container['user_name'] = isset($data['user_name']) ? $data['user_name'] : null;
        $this->container['zone_code'] = isset($data['zone_code']) ? $data['zone_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets available_amount
     *
     * @return string
     */
    public function getAvailableAmount()
    {
        return $this->container['available_amount'];
    }

    /**
     * Sets available_amount
     *
     * @param string $available_amount available_amount
     *
     * @return $this
     */
    public function setAvailableAmount($available_amount)
    {
        $this->container['available_amount'] = $available_amount;

        return $this;
    }

    /**
     * Gets bill_time
     *
     * @return string
     */
    public function getBillTime()
    {
        return $this->container['bill_time'];
    }

    /**
     * Sets bill_time
     *
     * @param string $bill_time bill_time
     *
     * @return $this
     */
    public function setBillTime($bill_time)
    {
        $this->container['bill_time'] = $bill_time;

        return $this;
    }

    /**
     * Gets configuration_code
     *
     * @return string
     */
    public function getConfigurationCode()
    {
        return $this->container['configuration_code'];
    }

    /**
     * Sets configuration_code
     *
     * @param string $configuration_code configuration_code
     *
     * @return $this
     */
    public function setConfigurationCode($configuration_code)
    {
        $this->container['configuration_code'] = $configuration_code;

        return $this;
    }

    /**
     * Gets configuration_name
     *
     * @return string
     */
    public function getConfigurationName()
    {
        return $this->container['configuration_name'];
    }

    /**
     * Sets configuration_name
     *
     * @param string $configuration_name configuration_name
     *
     * @return $this
     */
    public function setConfigurationName($configuration_name)
    {
        $this->container['configuration_name'] = $configuration_name;

        return $this;
    }

    /**
     * Gets effective_time
     *
     * @return string
     */
    public function getEffectiveTime()
    {
        return $this->container['effective_time'];
    }

    /**
     * Sets effective_time
     *
     * @param string $effective_time effective_time
     *
     * @return $this
     */
    public function setEffectiveTime($effective_time)
    {
        $this->container['effective_time'] = $effective_time;

        return $this;
    }

    /**
     * Gets expiry_time
     *
     * @return string
     */
    public function getExpiryTime()
    {
        return $this->container['expiry_time'];
    }

    /**
     * Sets expiry_time
     *
     * @param string $expiry_time expiry_time
     *
     * @return $this
     */
    public function setExpiryTime($expiry_time)
    {
        $this->container['expiry_time'] = $expiry_time;

        return $this;
    }

    /**
     * Gets instance_name
     *
     * @return string
     */
    public function getInstanceName()
    {
        return $this->container['instance_name'];
    }

    /**
     * Sets instance_name
     *
     * @param string $instance_name instance_name
     *
     * @return $this
     */
    public function setInstanceName($instance_name)
    {
        $this->container['instance_name'] = $instance_name;

        return $this;
    }

    /**
     * Gets instance_no
     *
     * @return string
     */
    public function getInstanceNo()
    {
        return $this->container['instance_no'];
    }

    /**
     * Sets instance_no
     *
     * @param string $instance_no instance_no
     *
     * @return $this
     */
    public function setInstanceNo($instance_no)
    {
        $this->container['instance_no'] = $instance_no;

        return $this;
    }

    /**
     * Gets owner_id
     *
     * @return string
     */
    public function getOwnerId()
    {
        return $this->container['owner_id'];
    }

    /**
     * Sets owner_id
     *
     * @param string $owner_id owner_id
     *
     * @return $this
     */
    public function setOwnerId($owner_id)
    {
        $this->container['owner_id'] = $owner_id;

        return $this;
    }

    /**
     * Gets package_type
     *
     * @return string
     */
    public function getPackageType()
    {
        return $this->container['package_type'];
    }

    /**
     * Sets package_type
     *
     * @param string $package_type package_type
     *
     * @return $this
     */
    public function setPackageType($package_type)
    {
        $this->container['package_type'] = $package_type;

        return $this;
    }

    /**
     * Gets product
     *
     * @return string
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string $product product
     *
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets product_name
     *
     * @return string
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string $product_name product_name
     *
     * @return $this
     */
    public function setProductName($product_name)
    {
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets region_code
     *
     * @return string
     */
    public function getRegionCode()
    {
        return $this->container['region_code'];
    }

    /**
     * Sets region_code
     *
     * @param string $region_code region_code
     *
     * @return $this
     */
    public function setRegionCode($region_code)
    {
        $this->container['region_code'] = $region_code;

        return $this;
    }

    /**
     * Gets reset_by_natural_month
     *
     * @return string
     */
    public function getResetByNaturalMonth()
    {
        return $this->container['reset_by_natural_month'];
    }

    /**
     * Sets reset_by_natural_month
     *
     * @param string $reset_by_natural_month reset_by_natural_month
     *
     * @return $this
     */
    public function setResetByNaturalMonth($reset_by_natural_month)
    {
        $this->container['reset_by_natural_month'] = $reset_by_natural_month;

        return $this;
    }

    /**
     * Gets reset_period
     *
     * @return string
     */
    public function getResetPeriod()
    {
        return $this->container['reset_period'];
    }

    /**
     * Sets reset_period
     *
     * @param string $reset_period reset_period
     *
     * @return $this
     */
    public function setResetPeriod($reset_period)
    {
        $this->container['reset_period'] = $reset_period;

        return $this;
    }

    /**
     * Gets spec_calculate_factor
     *
     * @return string
     */
    public function getSpecCalculateFactor()
    {
        return $this->container['spec_calculate_factor'];
    }

    /**
     * Sets spec_calculate_factor
     *
     * @param string $spec_calculate_factor spec_calculate_factor
     *
     * @return $this
     */
    public function setSpecCalculateFactor($spec_calculate_factor)
    {
        $this->container['spec_calculate_factor'] = $spec_calculate_factor;

        return $this;
    }

    /**
     * Gets specification
     *
     * @return string
     */
    public function getSpecification()
    {
        return $this->container['specification'];
    }

    /**
     * Sets specification
     *
     * @param string $specification specification
     *
     * @return $this
     */
    public function setSpecification($specification)
    {
        $this->container['specification'] = $specification;

        return $this;
    }

    /**
     * Gets specification_unit
     *
     * @return string
     */
    public function getSpecificationUnit()
    {
        return $this->container['specification_unit'];
    }

    /**
     * Sets specification_unit
     *
     * @param string $specification_unit specification_unit
     *
     * @return $this
     */
    public function setSpecificationUnit($specification_unit)
    {
        $this->container['specification_unit'] = $specification_unit;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets subject_no
     *
     * @return string
     */
    public function getSubjectNo()
    {
        return $this->container['subject_no'];
    }

    /**
     * Sets subject_no
     *
     * @param string $subject_no subject_no
     *
     * @return $this
     */
    public function setSubjectNo($subject_no)
    {
        $this->container['subject_no'] = $subject_no;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return string
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param string $total_amount total_amount
     *
     * @return $this
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string $unit unit
     *
     * @return $this
     */
    public function setUnit($unit)
    {
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string $user_name user_name
     *
     * @return $this
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets zone_code
     *
     * @return string
     */
    public function getZoneCode()
    {
        return $this->container['zone_code'];
    }

    /**
     * Sets zone_code
     *
     * @param string $zone_code zone_code
     *
     * @return $this
     */
    public function setZoneCode($zone_code)
    {
        $this->container['zone_code'] = $zone_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

