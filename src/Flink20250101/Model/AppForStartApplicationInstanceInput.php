<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Flink20250101\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class AppForStartApplicationInstanceInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AppForStartApplicationInstanceInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'string',
        'args' => 'string',
        'conf' => 'string',
        'dependency' => '\Volcengine\Flink20250101\Model\DependencyForStartApplicationInstanceInput',
        'deploy_request' => '\Volcengine\Flink20250101\Model\DeployRequestForStartApplicationInstanceInput',
        'engine_version' => 'string',
        'jar' => 'string',
        'job_name' => 'string',
        'job_type' => 'string',
        'main_class' => 'string',
        'project_id' => 'string',
        'sql_text' => 'string',
        'unique_key' => 'string',
        'user_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => null,
        'args' => null,
        'conf' => null,
        'dependency' => null,
        'deploy_request' => null,
        'engine_version' => null,
        'jar' => null,
        'job_name' => null,
        'job_type' => null,
        'main_class' => null,
        'project_id' => null,
        'sql_text' => null,
        'unique_key' => null,
        'user_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'AccountId',
        'args' => 'Args',
        'conf' => 'Conf',
        'dependency' => 'Dependency',
        'deploy_request' => 'DeployRequest',
        'engine_version' => 'EngineVersion',
        'jar' => 'Jar',
        'job_name' => 'JobName',
        'job_type' => 'JobType',
        'main_class' => 'MainClass',
        'project_id' => 'ProjectId',
        'sql_text' => 'SqlText',
        'unique_key' => 'UniqueKey',
        'user_id' => 'UserId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'args' => 'setArgs',
        'conf' => 'setConf',
        'dependency' => 'setDependency',
        'deploy_request' => 'setDeployRequest',
        'engine_version' => 'setEngineVersion',
        'jar' => 'setJar',
        'job_name' => 'setJobName',
        'job_type' => 'setJobType',
        'main_class' => 'setMainClass',
        'project_id' => 'setProjectId',
        'sql_text' => 'setSqlText',
        'unique_key' => 'setUniqueKey',
        'user_id' => 'setUserId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'args' => 'getArgs',
        'conf' => 'getConf',
        'dependency' => 'getDependency',
        'deploy_request' => 'getDeployRequest',
        'engine_version' => 'getEngineVersion',
        'jar' => 'getJar',
        'job_name' => 'getJobName',
        'job_type' => 'getJobType',
        'main_class' => 'getMainClass',
        'project_id' => 'getProjectId',
        'sql_text' => 'getSqlText',
        'unique_key' => 'getUniqueKey',
        'user_id' => 'getUserId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ENGINE_VERSION_FLINK_VERSION_1_11 = 'FLINK_VERSION_1_11';
    const ENGINE_VERSION_FLINK_VERSION_1_16 = 'FLINK_VERSION_1_16';
    const JOB_TYPE_FLINK_STREAMING_JAR = 'FLINK_STREAMING_JAR';
    const JOB_TYPE_FLINK_STREAMING_SQL = 'FLINK_STREAMING_SQL';
    const JOB_TYPE_FLINK_BATCH_SQL = 'FLINK_BATCH_SQL';
    const JOB_TYPE_FLINK_BATCH_JAR = 'FLINK_BATCH_JAR';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEngineVersionAllowableValues()
    {
        return [
            self::ENGINE_VERSION_FLINK_VERSION_1_11,
            self::ENGINE_VERSION_FLINK_VERSION_1_16,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getJobTypeAllowableValues()
    {
        return [
            self::JOB_TYPE_FLINK_STREAMING_JAR,
            self::JOB_TYPE_FLINK_STREAMING_SQL,
            self::JOB_TYPE_FLINK_BATCH_SQL,
            self::JOB_TYPE_FLINK_BATCH_JAR,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['args'] = isset($data['args']) ? $data['args'] : null;
        $this->container['conf'] = isset($data['conf']) ? $data['conf'] : null;
        $this->container['dependency'] = isset($data['dependency']) ? $data['dependency'] : null;
        $this->container['deploy_request'] = isset($data['deploy_request']) ? $data['deploy_request'] : null;
        $this->container['engine_version'] = isset($data['engine_version']) ? $data['engine_version'] : null;
        $this->container['jar'] = isset($data['jar']) ? $data['jar'] : null;
        $this->container['job_name'] = isset($data['job_name']) ? $data['job_name'] : null;
        $this->container['job_type'] = isset($data['job_type']) ? $data['job_type'] : null;
        $this->container['main_class'] = isset($data['main_class']) ? $data['main_class'] : null;
        $this->container['project_id'] = isset($data['project_id']) ? $data['project_id'] : null;
        $this->container['sql_text'] = isset($data['sql_text']) ? $data['sql_text'] : null;
        $this->container['unique_key'] = isset($data['unique_key']) ? $data['unique_key'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEngineVersionAllowableValues();
        if (!is_null($this->container['engine_version']) && !in_array($this->container['engine_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'engine_version', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getJobTypeAllowableValues();
        if (!is_null($this->container['job_type']) && !in_array($this->container['job_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'job_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets args
     *
     * @return string
     */
    public function getArgs()
    {
        return $this->container['args'];
    }

    /**
     * Sets args
     *
     * @param string $args args
     *
     * @return $this
     */
    public function setArgs($args)
    {
        $this->container['args'] = $args;

        return $this;
    }

    /**
     * Gets conf
     *
     * @return string
     */
    public function getConf()
    {
        return $this->container['conf'];
    }

    /**
     * Sets conf
     *
     * @param string $conf conf
     *
     * @return $this
     */
    public function setConf($conf)
    {
        $this->container['conf'] = $conf;

        return $this;
    }

    /**
     * Gets dependency
     *
     * @return \Volcengine\Flink20250101\Model\DependencyForStartApplicationInstanceInput
     */
    public function getDependency()
    {
        return $this->container['dependency'];
    }

    /**
     * Sets dependency
     *
     * @param \Volcengine\Flink20250101\Model\DependencyForStartApplicationInstanceInput $dependency dependency
     *
     * @return $this
     */
    public function setDependency($dependency)
    {
        $this->container['dependency'] = $dependency;

        return $this;
    }

    /**
     * Gets deploy_request
     *
     * @return \Volcengine\Flink20250101\Model\DeployRequestForStartApplicationInstanceInput
     */
    public function getDeployRequest()
    {
        return $this->container['deploy_request'];
    }

    /**
     * Sets deploy_request
     *
     * @param \Volcengine\Flink20250101\Model\DeployRequestForStartApplicationInstanceInput $deploy_request deploy_request
     *
     * @return $this
     */
    public function setDeployRequest($deploy_request)
    {
        $this->container['deploy_request'] = $deploy_request;

        return $this;
    }

    /**
     * Gets engine_version
     *
     * @return string
     */
    public function getEngineVersion()
    {
        return $this->container['engine_version'];
    }

    /**
     * Sets engine_version
     *
     * @param string $engine_version engine_version
     *
     * @return $this
     */
    public function setEngineVersion($engine_version)
    {
        $allowedValues = $this->getEngineVersionAllowableValues();
        if (!is_null($engine_version) && !in_array($engine_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'engine_version', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['engine_version'] = $engine_version;

        return $this;
    }

    /**
     * Gets jar
     *
     * @return string
     */
    public function getJar()
    {
        return $this->container['jar'];
    }

    /**
     * Sets jar
     *
     * @param string $jar jar
     *
     * @return $this
     */
    public function setJar($jar)
    {
        $this->container['jar'] = $jar;

        return $this;
    }

    /**
     * Gets job_name
     *
     * @return string
     */
    public function getJobName()
    {
        return $this->container['job_name'];
    }

    /**
     * Sets job_name
     *
     * @param string $job_name job_name
     *
     * @return $this
     */
    public function setJobName($job_name)
    {
        $this->container['job_name'] = $job_name;

        return $this;
    }

    /**
     * Gets job_type
     *
     * @return string
     */
    public function getJobType()
    {
        return $this->container['job_type'];
    }

    /**
     * Sets job_type
     *
     * @param string $job_type job_type
     *
     * @return $this
     */
    public function setJobType($job_type)
    {
        $allowedValues = $this->getJobTypeAllowableValues();
        if (!is_null($job_type) && !in_array($job_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'job_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['job_type'] = $job_type;

        return $this;
    }

    /**
     * Gets main_class
     *
     * @return string
     */
    public function getMainClass()
    {
        return $this->container['main_class'];
    }

    /**
     * Sets main_class
     *
     * @param string $main_class main_class
     *
     * @return $this
     */
    public function setMainClass($main_class)
    {
        $this->container['main_class'] = $main_class;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return string
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param string $project_id project_id
     *
     * @return $this
     */
    public function setProjectId($project_id)
    {
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets sql_text
     *
     * @return string
     */
    public function getSqlText()
    {
        return $this->container['sql_text'];
    }

    /**
     * Sets sql_text
     *
     * @param string $sql_text sql_text
     *
     * @return $this
     */
    public function setSqlText($sql_text)
    {
        $this->container['sql_text'] = $sql_text;

        return $this;
    }

    /**
     * Gets unique_key
     *
     * @return string
     */
    public function getUniqueKey()
    {
        return $this->container['unique_key'];
    }

    /**
     * Sets unique_key
     *
     * @param string $unique_key unique_key
     *
     * @return $this
     */
    public function setUniqueKey($unique_key)
    {
        $this->container['unique_key'] = $unique_key;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

