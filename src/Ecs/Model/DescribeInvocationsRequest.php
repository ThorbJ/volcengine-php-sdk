<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Ecs\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DescribeInvocationsRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DescribeInvocationsRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'command_id' => 'string',
        'command_name' => 'string',
        'command_type' => 'string',
        'content_encoding' => 'string',
        'invocation_id' => 'string',
        'invocation_name' => 'string',
        'invocation_status' => 'string',
        'page_number' => 'int',
        'page_size' => 'int',
        'project_name' => 'string',
        'repeat_mode' => 'string',
        'tag_filters' => '\Volcengine\Ecs\Model\TagFilterForDescribeInvocationsInput[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'command_id' => null,
        'command_name' => null,
        'command_type' => null,
        'content_encoding' => null,
        'invocation_id' => null,
        'invocation_name' => null,
        'invocation_status' => null,
        'page_number' => 'int32',
        'page_size' => 'int32',
        'project_name' => null,
        'repeat_mode' => null,
        'tag_filters' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'command_id' => 'CommandId',
        'command_name' => 'CommandName',
        'command_type' => 'CommandType',
        'content_encoding' => 'ContentEncoding',
        'invocation_id' => 'InvocationId',
        'invocation_name' => 'InvocationName',
        'invocation_status' => 'InvocationStatus',
        'page_number' => 'PageNumber',
        'page_size' => 'PageSize',
        'project_name' => 'ProjectName',
        'repeat_mode' => 'RepeatMode',
        'tag_filters' => 'TagFilters'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'command_id' => 'setCommandId',
        'command_name' => 'setCommandName',
        'command_type' => 'setCommandType',
        'content_encoding' => 'setContentEncoding',
        'invocation_id' => 'setInvocationId',
        'invocation_name' => 'setInvocationName',
        'invocation_status' => 'setInvocationStatus',
        'page_number' => 'setPageNumber',
        'page_size' => 'setPageSize',
        'project_name' => 'setProjectName',
        'repeat_mode' => 'setRepeatMode',
        'tag_filters' => 'setTagFilters'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'command_id' => 'getCommandId',
        'command_name' => 'getCommandName',
        'command_type' => 'getCommandType',
        'content_encoding' => 'getContentEncoding',
        'invocation_id' => 'getInvocationId',
        'invocation_name' => 'getInvocationName',
        'invocation_status' => 'getInvocationStatus',
        'page_number' => 'getPageNumber',
        'page_size' => 'getPageSize',
        'project_name' => 'getProjectName',
        'repeat_mode' => 'getRepeatMode',
        'tag_filters' => 'getTagFilters'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['command_id'] = isset($data['command_id']) ? $data['command_id'] : null;
        $this->container['command_name'] = isset($data['command_name']) ? $data['command_name'] : null;
        $this->container['command_type'] = isset($data['command_type']) ? $data['command_type'] : null;
        $this->container['content_encoding'] = isset($data['content_encoding']) ? $data['content_encoding'] : null;
        $this->container['invocation_id'] = isset($data['invocation_id']) ? $data['invocation_id'] : null;
        $this->container['invocation_name'] = isset($data['invocation_name']) ? $data['invocation_name'] : null;
        $this->container['invocation_status'] = isset($data['invocation_status']) ? $data['invocation_status'] : null;
        $this->container['page_number'] = isset($data['page_number']) ? $data['page_number'] : null;
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['repeat_mode'] = isset($data['repeat_mode']) ? $data['repeat_mode'] : null;
        $this->container['tag_filters'] = isset($data['tag_filters']) ? $data['tag_filters'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets command_id
     *
     * @return string
     */
    public function getCommandId()
    {
        return $this->container['command_id'];
    }

    /**
     * Sets command_id
     *
     * @param string $command_id command_id
     *
     * @return $this
     */
    public function setCommandId($command_id)
    {
        $this->container['command_id'] = $command_id;

        return $this;
    }

    /**
     * Gets command_name
     *
     * @return string
     */
    public function getCommandName()
    {
        return $this->container['command_name'];
    }

    /**
     * Sets command_name
     *
     * @param string $command_name command_name
     *
     * @return $this
     */
    public function setCommandName($command_name)
    {
        $this->container['command_name'] = $command_name;

        return $this;
    }

    /**
     * Gets command_type
     *
     * @return string
     */
    public function getCommandType()
    {
        return $this->container['command_type'];
    }

    /**
     * Sets command_type
     *
     * @param string $command_type command_type
     *
     * @return $this
     */
    public function setCommandType($command_type)
    {
        $this->container['command_type'] = $command_type;

        return $this;
    }

    /**
     * Gets content_encoding
     *
     * @return string
     */
    public function getContentEncoding()
    {
        return $this->container['content_encoding'];
    }

    /**
     * Sets content_encoding
     *
     * @param string $content_encoding content_encoding
     *
     * @return $this
     */
    public function setContentEncoding($content_encoding)
    {
        $this->container['content_encoding'] = $content_encoding;

        return $this;
    }

    /**
     * Gets invocation_id
     *
     * @return string
     */
    public function getInvocationId()
    {
        return $this->container['invocation_id'];
    }

    /**
     * Sets invocation_id
     *
     * @param string $invocation_id invocation_id
     *
     * @return $this
     */
    public function setInvocationId($invocation_id)
    {
        $this->container['invocation_id'] = $invocation_id;

        return $this;
    }

    /**
     * Gets invocation_name
     *
     * @return string
     */
    public function getInvocationName()
    {
        return $this->container['invocation_name'];
    }

    /**
     * Sets invocation_name
     *
     * @param string $invocation_name invocation_name
     *
     * @return $this
     */
    public function setInvocationName($invocation_name)
    {
        $this->container['invocation_name'] = $invocation_name;

        return $this;
    }

    /**
     * Gets invocation_status
     *
     * @return string
     */
    public function getInvocationStatus()
    {
        return $this->container['invocation_status'];
    }

    /**
     * Sets invocation_status
     *
     * @param string $invocation_status invocation_status
     *
     * @return $this
     */
    public function setInvocationStatus($invocation_status)
    {
        $this->container['invocation_status'] = $invocation_status;

        return $this;
    }

    /**
     * Gets page_number
     *
     * @return int
     */
    public function getPageNumber()
    {
        return $this->container['page_number'];
    }

    /**
     * Sets page_number
     *
     * @param int $page_number page_number
     *
     * @return $this
     */
    public function setPageNumber($page_number)
    {
        $this->container['page_number'] = $page_number;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int $page_size page_size
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets repeat_mode
     *
     * @return string
     */
    public function getRepeatMode()
    {
        return $this->container['repeat_mode'];
    }

    /**
     * Sets repeat_mode
     *
     * @param string $repeat_mode repeat_mode
     *
     * @return $this
     */
    public function setRepeatMode($repeat_mode)
    {
        $this->container['repeat_mode'] = $repeat_mode;

        return $this;
    }

    /**
     * Gets tag_filters
     *
     * @return \Volcengine\Ecs\Model\TagFilterForDescribeInvocationsInput[]
     */
    public function getTagFilters()
    {
        return $this->container['tag_filters'];
    }

    /**
     * Sets tag_filters
     *
     * @param \Volcengine\Ecs\Model\TagFilterForDescribeInvocationsInput[] $tag_filters tag_filters
     *
     * @return $this
     */
    public function setTagFilters($tag_filters)
    {
        $this->container['tag_filters'] = $tag_filters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

