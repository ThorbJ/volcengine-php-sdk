<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Ecs\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DedicatedHostClusterForDescribeDedicatedHostClustersOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DedicatedHostClusterForDescribeDedicatedHostClustersOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'created_at' => 'string',
        'dedicated_host_cluster_capacity' => '\Volcengine\Ecs\Model\DedicatedHostClusterCapacityForDescribeDedicatedHostClustersOutput',
        'dedicated_host_cluster_id' => 'string',
        'dedicated_host_cluster_name' => 'string',
        'dedicated_host_ids' => 'string[]',
        'description' => 'string',
        'updated_at' => 'string',
        'zone_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'created_at' => null,
        'dedicated_host_cluster_capacity' => null,
        'dedicated_host_cluster_id' => null,
        'dedicated_host_cluster_name' => null,
        'dedicated_host_ids' => null,
        'description' => null,
        'updated_at' => null,
        'zone_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created_at' => 'CreatedAt',
        'dedicated_host_cluster_capacity' => 'DedicatedHostClusterCapacity',
        'dedicated_host_cluster_id' => 'DedicatedHostClusterId',
        'dedicated_host_cluster_name' => 'DedicatedHostClusterName',
        'dedicated_host_ids' => 'DedicatedHostIds',
        'description' => 'Description',
        'updated_at' => 'UpdatedAt',
        'zone_id' => 'ZoneId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created_at' => 'setCreatedAt',
        'dedicated_host_cluster_capacity' => 'setDedicatedHostClusterCapacity',
        'dedicated_host_cluster_id' => 'setDedicatedHostClusterId',
        'dedicated_host_cluster_name' => 'setDedicatedHostClusterName',
        'dedicated_host_ids' => 'setDedicatedHostIds',
        'description' => 'setDescription',
        'updated_at' => 'setUpdatedAt',
        'zone_id' => 'setZoneId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created_at' => 'getCreatedAt',
        'dedicated_host_cluster_capacity' => 'getDedicatedHostClusterCapacity',
        'dedicated_host_cluster_id' => 'getDedicatedHostClusterId',
        'dedicated_host_cluster_name' => 'getDedicatedHostClusterName',
        'dedicated_host_ids' => 'getDedicatedHostIds',
        'description' => 'getDescription',
        'updated_at' => 'getUpdatedAt',
        'zone_id' => 'getZoneId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['dedicated_host_cluster_capacity'] = isset($data['dedicated_host_cluster_capacity']) ? $data['dedicated_host_cluster_capacity'] : null;
        $this->container['dedicated_host_cluster_id'] = isset($data['dedicated_host_cluster_id']) ? $data['dedicated_host_cluster_id'] : null;
        $this->container['dedicated_host_cluster_name'] = isset($data['dedicated_host_cluster_name']) ? $data['dedicated_host_cluster_name'] : null;
        $this->container['dedicated_host_ids'] = isset($data['dedicated_host_ids']) ? $data['dedicated_host_ids'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['zone_id'] = isset($data['zone_id']) ? $data['zone_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets dedicated_host_cluster_capacity
     *
     * @return \Volcengine\Ecs\Model\DedicatedHostClusterCapacityForDescribeDedicatedHostClustersOutput
     */
    public function getDedicatedHostClusterCapacity()
    {
        return $this->container['dedicated_host_cluster_capacity'];
    }

    /**
     * Sets dedicated_host_cluster_capacity
     *
     * @param \Volcengine\Ecs\Model\DedicatedHostClusterCapacityForDescribeDedicatedHostClustersOutput $dedicated_host_cluster_capacity dedicated_host_cluster_capacity
     *
     * @return $this
     */
    public function setDedicatedHostClusterCapacity($dedicated_host_cluster_capacity)
    {
        $this->container['dedicated_host_cluster_capacity'] = $dedicated_host_cluster_capacity;

        return $this;
    }

    /**
     * Gets dedicated_host_cluster_id
     *
     * @return string
     */
    public function getDedicatedHostClusterId()
    {
        return $this->container['dedicated_host_cluster_id'];
    }

    /**
     * Sets dedicated_host_cluster_id
     *
     * @param string $dedicated_host_cluster_id dedicated_host_cluster_id
     *
     * @return $this
     */
    public function setDedicatedHostClusterId($dedicated_host_cluster_id)
    {
        $this->container['dedicated_host_cluster_id'] = $dedicated_host_cluster_id;

        return $this;
    }

    /**
     * Gets dedicated_host_cluster_name
     *
     * @return string
     */
    public function getDedicatedHostClusterName()
    {
        return $this->container['dedicated_host_cluster_name'];
    }

    /**
     * Sets dedicated_host_cluster_name
     *
     * @param string $dedicated_host_cluster_name dedicated_host_cluster_name
     *
     * @return $this
     */
    public function setDedicatedHostClusterName($dedicated_host_cluster_name)
    {
        $this->container['dedicated_host_cluster_name'] = $dedicated_host_cluster_name;

        return $this;
    }

    /**
     * Gets dedicated_host_ids
     *
     * @return string[]
     */
    public function getDedicatedHostIds()
    {
        return $this->container['dedicated_host_ids'];
    }

    /**
     * Sets dedicated_host_ids
     *
     * @param string[] $dedicated_host_ids dedicated_host_ids
     *
     * @return $this
     */
    public function setDedicatedHostIds($dedicated_host_ids)
    {
        $this->container['dedicated_host_ids'] = $dedicated_host_ids;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets zone_id
     *
     * @return string
     */
    public function getZoneId()
    {
        return $this->container['zone_id'];
    }

    /**
     * Sets zone_id
     *
     * @param string $zone_id zone_id
     *
     * @return $this
     */
    public function setZoneId($zone_id)
    {
        $this->container['zone_id'] = $zone_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

