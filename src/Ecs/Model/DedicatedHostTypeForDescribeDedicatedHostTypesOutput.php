<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Ecs\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DedicatedHostTypeForDescribeDedicatedHostTypesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DedicatedHostTypeForDescribeDedicatedHostTypesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cores' => 'int',
        'dedicated_host_type_id' => 'string',
        'is_supported_cpu_overcommit_ratio' => 'bool',
        'local_volumes' => '\Volcengine\Ecs\Model\LocalVolumeForDescribeDedicatedHostTypesOutput[]',
        'max_cpu_overcommit_ratio' => 'float',
        'processor_model' => 'string',
        'sockets' => 'int',
        'support_instance_type_families' => 'string[]',
        'support_instance_types_list' => 'string[]',
        'total_memory' => 'int',
        'total_vcpus' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cores' => 'int32',
        'dedicated_host_type_id' => null,
        'is_supported_cpu_overcommit_ratio' => null,
        'local_volumes' => null,
        'max_cpu_overcommit_ratio' => 'float',
        'processor_model' => null,
        'sockets' => 'int32',
        'support_instance_type_families' => null,
        'support_instance_types_list' => null,
        'total_memory' => 'int32',
        'total_vcpus' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cores' => 'Cores',
        'dedicated_host_type_id' => 'DedicatedHostTypeId',
        'is_supported_cpu_overcommit_ratio' => 'IsSupportedCpuOvercommitRatio',
        'local_volumes' => 'LocalVolumes',
        'max_cpu_overcommit_ratio' => 'MaxCpuOvercommitRatio',
        'processor_model' => 'ProcessorModel',
        'sockets' => 'Sockets',
        'support_instance_type_families' => 'SupportInstanceTypeFamilies',
        'support_instance_types_list' => 'SupportInstanceTypesList',
        'total_memory' => 'TotalMemory',
        'total_vcpus' => 'TotalVcpus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cores' => 'setCores',
        'dedicated_host_type_id' => 'setDedicatedHostTypeId',
        'is_supported_cpu_overcommit_ratio' => 'setIsSupportedCpuOvercommitRatio',
        'local_volumes' => 'setLocalVolumes',
        'max_cpu_overcommit_ratio' => 'setMaxCpuOvercommitRatio',
        'processor_model' => 'setProcessorModel',
        'sockets' => 'setSockets',
        'support_instance_type_families' => 'setSupportInstanceTypeFamilies',
        'support_instance_types_list' => 'setSupportInstanceTypesList',
        'total_memory' => 'setTotalMemory',
        'total_vcpus' => 'setTotalVcpus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cores' => 'getCores',
        'dedicated_host_type_id' => 'getDedicatedHostTypeId',
        'is_supported_cpu_overcommit_ratio' => 'getIsSupportedCpuOvercommitRatio',
        'local_volumes' => 'getLocalVolumes',
        'max_cpu_overcommit_ratio' => 'getMaxCpuOvercommitRatio',
        'processor_model' => 'getProcessorModel',
        'sockets' => 'getSockets',
        'support_instance_type_families' => 'getSupportInstanceTypeFamilies',
        'support_instance_types_list' => 'getSupportInstanceTypesList',
        'total_memory' => 'getTotalMemory',
        'total_vcpus' => 'getTotalVcpus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cores'] = isset($data['cores']) ? $data['cores'] : null;
        $this->container['dedicated_host_type_id'] = isset($data['dedicated_host_type_id']) ? $data['dedicated_host_type_id'] : null;
        $this->container['is_supported_cpu_overcommit_ratio'] = isset($data['is_supported_cpu_overcommit_ratio']) ? $data['is_supported_cpu_overcommit_ratio'] : null;
        $this->container['local_volumes'] = isset($data['local_volumes']) ? $data['local_volumes'] : null;
        $this->container['max_cpu_overcommit_ratio'] = isset($data['max_cpu_overcommit_ratio']) ? $data['max_cpu_overcommit_ratio'] : null;
        $this->container['processor_model'] = isset($data['processor_model']) ? $data['processor_model'] : null;
        $this->container['sockets'] = isset($data['sockets']) ? $data['sockets'] : null;
        $this->container['support_instance_type_families'] = isset($data['support_instance_type_families']) ? $data['support_instance_type_families'] : null;
        $this->container['support_instance_types_list'] = isset($data['support_instance_types_list']) ? $data['support_instance_types_list'] : null;
        $this->container['total_memory'] = isset($data['total_memory']) ? $data['total_memory'] : null;
        $this->container['total_vcpus'] = isset($data['total_vcpus']) ? $data['total_vcpus'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cores
     *
     * @return int
     */
    public function getCores()
    {
        return $this->container['cores'];
    }

    /**
     * Sets cores
     *
     * @param int $cores cores
     *
     * @return $this
     */
    public function setCores($cores)
    {
        $this->container['cores'] = $cores;

        return $this;
    }

    /**
     * Gets dedicated_host_type_id
     *
     * @return string
     */
    public function getDedicatedHostTypeId()
    {
        return $this->container['dedicated_host_type_id'];
    }

    /**
     * Sets dedicated_host_type_id
     *
     * @param string $dedicated_host_type_id dedicated_host_type_id
     *
     * @return $this
     */
    public function setDedicatedHostTypeId($dedicated_host_type_id)
    {
        $this->container['dedicated_host_type_id'] = $dedicated_host_type_id;

        return $this;
    }

    /**
     * Gets is_supported_cpu_overcommit_ratio
     *
     * @return bool
     */
    public function getIsSupportedCpuOvercommitRatio()
    {
        return $this->container['is_supported_cpu_overcommit_ratio'];
    }

    /**
     * Sets is_supported_cpu_overcommit_ratio
     *
     * @param bool $is_supported_cpu_overcommit_ratio is_supported_cpu_overcommit_ratio
     *
     * @return $this
     */
    public function setIsSupportedCpuOvercommitRatio($is_supported_cpu_overcommit_ratio)
    {
        $this->container['is_supported_cpu_overcommit_ratio'] = $is_supported_cpu_overcommit_ratio;

        return $this;
    }

    /**
     * Gets local_volumes
     *
     * @return \Volcengine\Ecs\Model\LocalVolumeForDescribeDedicatedHostTypesOutput[]
     */
    public function getLocalVolumes()
    {
        return $this->container['local_volumes'];
    }

    /**
     * Sets local_volumes
     *
     * @param \Volcengine\Ecs\Model\LocalVolumeForDescribeDedicatedHostTypesOutput[] $local_volumes local_volumes
     *
     * @return $this
     */
    public function setLocalVolumes($local_volumes)
    {
        $this->container['local_volumes'] = $local_volumes;

        return $this;
    }

    /**
     * Gets max_cpu_overcommit_ratio
     *
     * @return float
     */
    public function getMaxCpuOvercommitRatio()
    {
        return $this->container['max_cpu_overcommit_ratio'];
    }

    /**
     * Sets max_cpu_overcommit_ratio
     *
     * @param float $max_cpu_overcommit_ratio max_cpu_overcommit_ratio
     *
     * @return $this
     */
    public function setMaxCpuOvercommitRatio($max_cpu_overcommit_ratio)
    {
        $this->container['max_cpu_overcommit_ratio'] = $max_cpu_overcommit_ratio;

        return $this;
    }

    /**
     * Gets processor_model
     *
     * @return string
     */
    public function getProcessorModel()
    {
        return $this->container['processor_model'];
    }

    /**
     * Sets processor_model
     *
     * @param string $processor_model processor_model
     *
     * @return $this
     */
    public function setProcessorModel($processor_model)
    {
        $this->container['processor_model'] = $processor_model;

        return $this;
    }

    /**
     * Gets sockets
     *
     * @return int
     */
    public function getSockets()
    {
        return $this->container['sockets'];
    }

    /**
     * Sets sockets
     *
     * @param int $sockets sockets
     *
     * @return $this
     */
    public function setSockets($sockets)
    {
        $this->container['sockets'] = $sockets;

        return $this;
    }

    /**
     * Gets support_instance_type_families
     *
     * @return string[]
     */
    public function getSupportInstanceTypeFamilies()
    {
        return $this->container['support_instance_type_families'];
    }

    /**
     * Sets support_instance_type_families
     *
     * @param string[] $support_instance_type_families support_instance_type_families
     *
     * @return $this
     */
    public function setSupportInstanceTypeFamilies($support_instance_type_families)
    {
        $this->container['support_instance_type_families'] = $support_instance_type_families;

        return $this;
    }

    /**
     * Gets support_instance_types_list
     *
     * @return string[]
     */
    public function getSupportInstanceTypesList()
    {
        return $this->container['support_instance_types_list'];
    }

    /**
     * Sets support_instance_types_list
     *
     * @param string[] $support_instance_types_list support_instance_types_list
     *
     * @return $this
     */
    public function setSupportInstanceTypesList($support_instance_types_list)
    {
        $this->container['support_instance_types_list'] = $support_instance_types_list;

        return $this;
    }

    /**
     * Gets total_memory
     *
     * @return int
     */
    public function getTotalMemory()
    {
        return $this->container['total_memory'];
    }

    /**
     * Sets total_memory
     *
     * @param int $total_memory total_memory
     *
     * @return $this
     */
    public function setTotalMemory($total_memory)
    {
        $this->container['total_memory'] = $total_memory;

        return $this;
    }

    /**
     * Gets total_vcpus
     *
     * @return int
     */
    public function getTotalVcpus()
    {
        return $this->container['total_vcpus'];
    }

    /**
     * Sets total_vcpus
     *
     * @param int $total_vcpus total_vcpus
     *
     * @return $this
     */
    public function setTotalVcpus($total_vcpus)
    {
        $this->container['total_vcpus'] = $total_vcpus;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

