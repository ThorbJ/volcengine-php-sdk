<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Ecs\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DedicatedHostForDescribeDedicatedHostsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DedicatedHostForDescribeDedicatedHostsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'auto_placement' => 'string',
        'capacity' => '\Volcengine\Ecs\Model\CapacityForDescribeDedicatedHostsOutput',
        'charge_type' => 'string',
        'cpu_overcommit_ratio' => 'float',
        'created_at' => 'string',
        'dedicated_host_cluster_id' => 'string',
        'dedicated_host_id' => 'string',
        'dedicated_host_name' => 'string',
        'dedicated_host_type_id' => 'string',
        'description' => 'string',
        'expired_at' => 'string',
        'host_recovery' => 'string',
        'instances' => '\Volcengine\Ecs\Model\InstanceForDescribeDedicatedHostsOutput[]',
        'status' => 'string',
        'updated_at' => 'string',
        'zone_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'auto_placement' => null,
        'capacity' => null,
        'charge_type' => null,
        'cpu_overcommit_ratio' => 'float',
        'created_at' => null,
        'dedicated_host_cluster_id' => null,
        'dedicated_host_id' => null,
        'dedicated_host_name' => null,
        'dedicated_host_type_id' => null,
        'description' => null,
        'expired_at' => null,
        'host_recovery' => null,
        'instances' => null,
        'status' => null,
        'updated_at' => null,
        'zone_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auto_placement' => 'AutoPlacement',
        'capacity' => 'Capacity',
        'charge_type' => 'ChargeType',
        'cpu_overcommit_ratio' => 'CpuOvercommitRatio',
        'created_at' => 'CreatedAt',
        'dedicated_host_cluster_id' => 'DedicatedHostClusterId',
        'dedicated_host_id' => 'DedicatedHostId',
        'dedicated_host_name' => 'DedicatedHostName',
        'dedicated_host_type_id' => 'DedicatedHostTypeId',
        'description' => 'Description',
        'expired_at' => 'ExpiredAt',
        'host_recovery' => 'HostRecovery',
        'instances' => 'Instances',
        'status' => 'Status',
        'updated_at' => 'UpdatedAt',
        'zone_id' => 'ZoneId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auto_placement' => 'setAutoPlacement',
        'capacity' => 'setCapacity',
        'charge_type' => 'setChargeType',
        'cpu_overcommit_ratio' => 'setCpuOvercommitRatio',
        'created_at' => 'setCreatedAt',
        'dedicated_host_cluster_id' => 'setDedicatedHostClusterId',
        'dedicated_host_id' => 'setDedicatedHostId',
        'dedicated_host_name' => 'setDedicatedHostName',
        'dedicated_host_type_id' => 'setDedicatedHostTypeId',
        'description' => 'setDescription',
        'expired_at' => 'setExpiredAt',
        'host_recovery' => 'setHostRecovery',
        'instances' => 'setInstances',
        'status' => 'setStatus',
        'updated_at' => 'setUpdatedAt',
        'zone_id' => 'setZoneId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auto_placement' => 'getAutoPlacement',
        'capacity' => 'getCapacity',
        'charge_type' => 'getChargeType',
        'cpu_overcommit_ratio' => 'getCpuOvercommitRatio',
        'created_at' => 'getCreatedAt',
        'dedicated_host_cluster_id' => 'getDedicatedHostClusterId',
        'dedicated_host_id' => 'getDedicatedHostId',
        'dedicated_host_name' => 'getDedicatedHostName',
        'dedicated_host_type_id' => 'getDedicatedHostTypeId',
        'description' => 'getDescription',
        'expired_at' => 'getExpiredAt',
        'host_recovery' => 'getHostRecovery',
        'instances' => 'getInstances',
        'status' => 'getStatus',
        'updated_at' => 'getUpdatedAt',
        'zone_id' => 'getZoneId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auto_placement'] = isset($data['auto_placement']) ? $data['auto_placement'] : null;
        $this->container['capacity'] = isset($data['capacity']) ? $data['capacity'] : null;
        $this->container['charge_type'] = isset($data['charge_type']) ? $data['charge_type'] : null;
        $this->container['cpu_overcommit_ratio'] = isset($data['cpu_overcommit_ratio']) ? $data['cpu_overcommit_ratio'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['dedicated_host_cluster_id'] = isset($data['dedicated_host_cluster_id']) ? $data['dedicated_host_cluster_id'] : null;
        $this->container['dedicated_host_id'] = isset($data['dedicated_host_id']) ? $data['dedicated_host_id'] : null;
        $this->container['dedicated_host_name'] = isset($data['dedicated_host_name']) ? $data['dedicated_host_name'] : null;
        $this->container['dedicated_host_type_id'] = isset($data['dedicated_host_type_id']) ? $data['dedicated_host_type_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['expired_at'] = isset($data['expired_at']) ? $data['expired_at'] : null;
        $this->container['host_recovery'] = isset($data['host_recovery']) ? $data['host_recovery'] : null;
        $this->container['instances'] = isset($data['instances']) ? $data['instances'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['zone_id'] = isset($data['zone_id']) ? $data['zone_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auto_placement
     *
     * @return string
     */
    public function getAutoPlacement()
    {
        return $this->container['auto_placement'];
    }

    /**
     * Sets auto_placement
     *
     * @param string $auto_placement auto_placement
     *
     * @return $this
     */
    public function setAutoPlacement($auto_placement)
    {
        $this->container['auto_placement'] = $auto_placement;

        return $this;
    }

    /**
     * Gets capacity
     *
     * @return \Volcengine\Ecs\Model\CapacityForDescribeDedicatedHostsOutput
     */
    public function getCapacity()
    {
        return $this->container['capacity'];
    }

    /**
     * Sets capacity
     *
     * @param \Volcengine\Ecs\Model\CapacityForDescribeDedicatedHostsOutput $capacity capacity
     *
     * @return $this
     */
    public function setCapacity($capacity)
    {
        $this->container['capacity'] = $capacity;

        return $this;
    }

    /**
     * Gets charge_type
     *
     * @return string
     */
    public function getChargeType()
    {
        return $this->container['charge_type'];
    }

    /**
     * Sets charge_type
     *
     * @param string $charge_type charge_type
     *
     * @return $this
     */
    public function setChargeType($charge_type)
    {
        $this->container['charge_type'] = $charge_type;

        return $this;
    }

    /**
     * Gets cpu_overcommit_ratio
     *
     * @return float
     */
    public function getCpuOvercommitRatio()
    {
        return $this->container['cpu_overcommit_ratio'];
    }

    /**
     * Sets cpu_overcommit_ratio
     *
     * @param float $cpu_overcommit_ratio cpu_overcommit_ratio
     *
     * @return $this
     */
    public function setCpuOvercommitRatio($cpu_overcommit_ratio)
    {
        $this->container['cpu_overcommit_ratio'] = $cpu_overcommit_ratio;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets dedicated_host_cluster_id
     *
     * @return string
     */
    public function getDedicatedHostClusterId()
    {
        return $this->container['dedicated_host_cluster_id'];
    }

    /**
     * Sets dedicated_host_cluster_id
     *
     * @param string $dedicated_host_cluster_id dedicated_host_cluster_id
     *
     * @return $this
     */
    public function setDedicatedHostClusterId($dedicated_host_cluster_id)
    {
        $this->container['dedicated_host_cluster_id'] = $dedicated_host_cluster_id;

        return $this;
    }

    /**
     * Gets dedicated_host_id
     *
     * @return string
     */
    public function getDedicatedHostId()
    {
        return $this->container['dedicated_host_id'];
    }

    /**
     * Sets dedicated_host_id
     *
     * @param string $dedicated_host_id dedicated_host_id
     *
     * @return $this
     */
    public function setDedicatedHostId($dedicated_host_id)
    {
        $this->container['dedicated_host_id'] = $dedicated_host_id;

        return $this;
    }

    /**
     * Gets dedicated_host_name
     *
     * @return string
     */
    public function getDedicatedHostName()
    {
        return $this->container['dedicated_host_name'];
    }

    /**
     * Sets dedicated_host_name
     *
     * @param string $dedicated_host_name dedicated_host_name
     *
     * @return $this
     */
    public function setDedicatedHostName($dedicated_host_name)
    {
        $this->container['dedicated_host_name'] = $dedicated_host_name;

        return $this;
    }

    /**
     * Gets dedicated_host_type_id
     *
     * @return string
     */
    public function getDedicatedHostTypeId()
    {
        return $this->container['dedicated_host_type_id'];
    }

    /**
     * Sets dedicated_host_type_id
     *
     * @param string $dedicated_host_type_id dedicated_host_type_id
     *
     * @return $this
     */
    public function setDedicatedHostTypeId($dedicated_host_type_id)
    {
        $this->container['dedicated_host_type_id'] = $dedicated_host_type_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets expired_at
     *
     * @return string
     */
    public function getExpiredAt()
    {
        return $this->container['expired_at'];
    }

    /**
     * Sets expired_at
     *
     * @param string $expired_at expired_at
     *
     * @return $this
     */
    public function setExpiredAt($expired_at)
    {
        $this->container['expired_at'] = $expired_at;

        return $this;
    }

    /**
     * Gets host_recovery
     *
     * @return string
     */
    public function getHostRecovery()
    {
        return $this->container['host_recovery'];
    }

    /**
     * Sets host_recovery
     *
     * @param string $host_recovery host_recovery
     *
     * @return $this
     */
    public function setHostRecovery($host_recovery)
    {
        $this->container['host_recovery'] = $host_recovery;

        return $this;
    }

    /**
     * Gets instances
     *
     * @return \Volcengine\Ecs\Model\InstanceForDescribeDedicatedHostsOutput[]
     */
    public function getInstances()
    {
        return $this->container['instances'];
    }

    /**
     * Sets instances
     *
     * @param \Volcengine\Ecs\Model\InstanceForDescribeDedicatedHostsOutput[] $instances instances
     *
     * @return $this
     */
    public function setInstances($instances)
    {
        $this->container['instances'] = $instances;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets zone_id
     *
     * @return string
     */
    public function getZoneId()
    {
        return $this->container['zone_id'];
    }

    /**
     * Sets zone_id
     *
     * @param string $zone_id zone_id
     *
     * @return $this
     */
    public function setZoneId($zone_id)
    {
        $this->container['zone_id'] = $zone_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

