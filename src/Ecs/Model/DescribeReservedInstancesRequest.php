<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Ecs\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DescribeReservedInstancesRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DescribeReservedInstancesRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'hpc_cluster_id' => 'string',
        'instance_type_families' => 'string[]',
        'instance_type_ids' => 'string[]',
        'max_results' => 'int',
        'next_token' => 'string',
        'project_name' => 'string',
        'reserved_instance_ids' => 'string[]',
        'reserved_instance_name' => 'string',
        'scope' => 'string',
        'status' => 'string',
        'support_modify' => 'string',
        'tag_filters' => '\Volcengine\Ecs\Model\TagFilterForDescribeReservedInstancesInput[]',
        'zone_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'hpc_cluster_id' => null,
        'instance_type_families' => null,
        'instance_type_ids' => null,
        'max_results' => 'int32',
        'next_token' => null,
        'project_name' => null,
        'reserved_instance_ids' => null,
        'reserved_instance_name' => null,
        'scope' => null,
        'status' => null,
        'support_modify' => null,
        'tag_filters' => null,
        'zone_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hpc_cluster_id' => 'HpcClusterId',
        'instance_type_families' => 'InstanceTypeFamilies',
        'instance_type_ids' => 'InstanceTypeIds',
        'max_results' => 'MaxResults',
        'next_token' => 'NextToken',
        'project_name' => 'ProjectName',
        'reserved_instance_ids' => 'ReservedInstanceIds',
        'reserved_instance_name' => 'ReservedInstanceName',
        'scope' => 'Scope',
        'status' => 'Status',
        'support_modify' => 'SupportModify',
        'tag_filters' => 'TagFilters',
        'zone_id' => 'ZoneId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hpc_cluster_id' => 'setHpcClusterId',
        'instance_type_families' => 'setInstanceTypeFamilies',
        'instance_type_ids' => 'setInstanceTypeIds',
        'max_results' => 'setMaxResults',
        'next_token' => 'setNextToken',
        'project_name' => 'setProjectName',
        'reserved_instance_ids' => 'setReservedInstanceIds',
        'reserved_instance_name' => 'setReservedInstanceName',
        'scope' => 'setScope',
        'status' => 'setStatus',
        'support_modify' => 'setSupportModify',
        'tag_filters' => 'setTagFilters',
        'zone_id' => 'setZoneId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hpc_cluster_id' => 'getHpcClusterId',
        'instance_type_families' => 'getInstanceTypeFamilies',
        'instance_type_ids' => 'getInstanceTypeIds',
        'max_results' => 'getMaxResults',
        'next_token' => 'getNextToken',
        'project_name' => 'getProjectName',
        'reserved_instance_ids' => 'getReservedInstanceIds',
        'reserved_instance_name' => 'getReservedInstanceName',
        'scope' => 'getScope',
        'status' => 'getStatus',
        'support_modify' => 'getSupportModify',
        'tag_filters' => 'getTagFilters',
        'zone_id' => 'getZoneId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['hpc_cluster_id'] = isset($data['hpc_cluster_id']) ? $data['hpc_cluster_id'] : null;
        $this->container['instance_type_families'] = isset($data['instance_type_families']) ? $data['instance_type_families'] : null;
        $this->container['instance_type_ids'] = isset($data['instance_type_ids']) ? $data['instance_type_ids'] : null;
        $this->container['max_results'] = isset($data['max_results']) ? $data['max_results'] : null;
        $this->container['next_token'] = isset($data['next_token']) ? $data['next_token'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['reserved_instance_ids'] = isset($data['reserved_instance_ids']) ? $data['reserved_instance_ids'] : null;
        $this->container['reserved_instance_name'] = isset($data['reserved_instance_name']) ? $data['reserved_instance_name'] : null;
        $this->container['scope'] = isset($data['scope']) ? $data['scope'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['support_modify'] = isset($data['support_modify']) ? $data['support_modify'] : null;
        $this->container['tag_filters'] = isset($data['tag_filters']) ? $data['tag_filters'] : null;
        $this->container['zone_id'] = isset($data['zone_id']) ? $data['zone_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets hpc_cluster_id
     *
     * @return string
     */
    public function getHpcClusterId()
    {
        return $this->container['hpc_cluster_id'];
    }

    /**
     * Sets hpc_cluster_id
     *
     * @param string $hpc_cluster_id hpc_cluster_id
     *
     * @return $this
     */
    public function setHpcClusterId($hpc_cluster_id)
    {
        $this->container['hpc_cluster_id'] = $hpc_cluster_id;

        return $this;
    }

    /**
     * Gets instance_type_families
     *
     * @return string[]
     */
    public function getInstanceTypeFamilies()
    {
        return $this->container['instance_type_families'];
    }

    /**
     * Sets instance_type_families
     *
     * @param string[] $instance_type_families instance_type_families
     *
     * @return $this
     */
    public function setInstanceTypeFamilies($instance_type_families)
    {
        $this->container['instance_type_families'] = $instance_type_families;

        return $this;
    }

    /**
     * Gets instance_type_ids
     *
     * @return string[]
     */
    public function getInstanceTypeIds()
    {
        return $this->container['instance_type_ids'];
    }

    /**
     * Sets instance_type_ids
     *
     * @param string[] $instance_type_ids instance_type_ids
     *
     * @return $this
     */
    public function setInstanceTypeIds($instance_type_ids)
    {
        $this->container['instance_type_ids'] = $instance_type_ids;

        return $this;
    }

    /**
     * Gets max_results
     *
     * @return int
     */
    public function getMaxResults()
    {
        return $this->container['max_results'];
    }

    /**
     * Sets max_results
     *
     * @param int $max_results max_results
     *
     * @return $this
     */
    public function setMaxResults($max_results)
    {
        $this->container['max_results'] = $max_results;

        return $this;
    }

    /**
     * Gets next_token
     *
     * @return string
     */
    public function getNextToken()
    {
        return $this->container['next_token'];
    }

    /**
     * Sets next_token
     *
     * @param string $next_token next_token
     *
     * @return $this
     */
    public function setNextToken($next_token)
    {
        $this->container['next_token'] = $next_token;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets reserved_instance_ids
     *
     * @return string[]
     */
    public function getReservedInstanceIds()
    {
        return $this->container['reserved_instance_ids'];
    }

    /**
     * Sets reserved_instance_ids
     *
     * @param string[] $reserved_instance_ids reserved_instance_ids
     *
     * @return $this
     */
    public function setReservedInstanceIds($reserved_instance_ids)
    {
        $this->container['reserved_instance_ids'] = $reserved_instance_ids;

        return $this;
    }

    /**
     * Gets reserved_instance_name
     *
     * @return string
     */
    public function getReservedInstanceName()
    {
        return $this->container['reserved_instance_name'];
    }

    /**
     * Sets reserved_instance_name
     *
     * @param string $reserved_instance_name reserved_instance_name
     *
     * @return $this
     */
    public function setReservedInstanceName($reserved_instance_name)
    {
        $this->container['reserved_instance_name'] = $reserved_instance_name;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return string
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param string $scope scope
     *
     * @return $this
     */
    public function setScope($scope)
    {
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets support_modify
     *
     * @return string
     */
    public function getSupportModify()
    {
        return $this->container['support_modify'];
    }

    /**
     * Sets support_modify
     *
     * @param string $support_modify support_modify
     *
     * @return $this
     */
    public function setSupportModify($support_modify)
    {
        $this->container['support_modify'] = $support_modify;

        return $this;
    }

    /**
     * Gets tag_filters
     *
     * @return \Volcengine\Ecs\Model\TagFilterForDescribeReservedInstancesInput[]
     */
    public function getTagFilters()
    {
        return $this->container['tag_filters'];
    }

    /**
     * Sets tag_filters
     *
     * @param \Volcengine\Ecs\Model\TagFilterForDescribeReservedInstancesInput[] $tag_filters tag_filters
     *
     * @return $this
     */
    public function setTagFilters($tag_filters)
    {
        $this->container['tag_filters'] = $tag_filters;

        return $this;
    }

    /**
     * Gets zone_id
     *
     * @return string
     */
    public function getZoneId()
    {
        return $this->container['zone_id'];
    }

    /**
     * Sets zone_id
     *
     * @param string $zone_id zone_id
     *
     * @return $this
     */
    public function setZoneId($zone_id)
    {
        $this->container['zone_id'] = $zone_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

