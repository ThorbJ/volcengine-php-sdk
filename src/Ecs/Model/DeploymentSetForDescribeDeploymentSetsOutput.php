<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Ecs\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DeploymentSetForDescribeDeploymentSetsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DeploymentSetForDescribeDeploymentSetsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'capacities' => '\Volcengine\Ecs\Model\CapacityForDescribeDeploymentSetsOutput[]',
        'created_at' => 'string',
        'deployment_set_description' => 'string',
        'deployment_set_id' => 'string',
        'deployment_set_name' => 'string',
        'granularity' => 'string',
        'group_count' => 'int',
        'instance_amount' => 'int',
        'instance_ids' => 'string[]',
        'strategy' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'capacities' => null,
        'created_at' => null,
        'deployment_set_description' => null,
        'deployment_set_id' => null,
        'deployment_set_name' => null,
        'granularity' => null,
        'group_count' => 'int32',
        'instance_amount' => 'int32',
        'instance_ids' => null,
        'strategy' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'capacities' => 'Capacities',
        'created_at' => 'CreatedAt',
        'deployment_set_description' => 'DeploymentSetDescription',
        'deployment_set_id' => 'DeploymentSetId',
        'deployment_set_name' => 'DeploymentSetName',
        'granularity' => 'Granularity',
        'group_count' => 'GroupCount',
        'instance_amount' => 'InstanceAmount',
        'instance_ids' => 'InstanceIds',
        'strategy' => 'Strategy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'capacities' => 'setCapacities',
        'created_at' => 'setCreatedAt',
        'deployment_set_description' => 'setDeploymentSetDescription',
        'deployment_set_id' => 'setDeploymentSetId',
        'deployment_set_name' => 'setDeploymentSetName',
        'granularity' => 'setGranularity',
        'group_count' => 'setGroupCount',
        'instance_amount' => 'setInstanceAmount',
        'instance_ids' => 'setInstanceIds',
        'strategy' => 'setStrategy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'capacities' => 'getCapacities',
        'created_at' => 'getCreatedAt',
        'deployment_set_description' => 'getDeploymentSetDescription',
        'deployment_set_id' => 'getDeploymentSetId',
        'deployment_set_name' => 'getDeploymentSetName',
        'granularity' => 'getGranularity',
        'group_count' => 'getGroupCount',
        'instance_amount' => 'getInstanceAmount',
        'instance_ids' => 'getInstanceIds',
        'strategy' => 'getStrategy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['capacities'] = isset($data['capacities']) ? $data['capacities'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['deployment_set_description'] = isset($data['deployment_set_description']) ? $data['deployment_set_description'] : null;
        $this->container['deployment_set_id'] = isset($data['deployment_set_id']) ? $data['deployment_set_id'] : null;
        $this->container['deployment_set_name'] = isset($data['deployment_set_name']) ? $data['deployment_set_name'] : null;
        $this->container['granularity'] = isset($data['granularity']) ? $data['granularity'] : null;
        $this->container['group_count'] = isset($data['group_count']) ? $data['group_count'] : null;
        $this->container['instance_amount'] = isset($data['instance_amount']) ? $data['instance_amount'] : null;
        $this->container['instance_ids'] = isset($data['instance_ids']) ? $data['instance_ids'] : null;
        $this->container['strategy'] = isset($data['strategy']) ? $data['strategy'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets capacities
     *
     * @return \Volcengine\Ecs\Model\CapacityForDescribeDeploymentSetsOutput[]
     */
    public function getCapacities()
    {
        return $this->container['capacities'];
    }

    /**
     * Sets capacities
     *
     * @param \Volcengine\Ecs\Model\CapacityForDescribeDeploymentSetsOutput[] $capacities capacities
     *
     * @return $this
     */
    public function setCapacities($capacities)
    {
        $this->container['capacities'] = $capacities;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets deployment_set_description
     *
     * @return string
     */
    public function getDeploymentSetDescription()
    {
        return $this->container['deployment_set_description'];
    }

    /**
     * Sets deployment_set_description
     *
     * @param string $deployment_set_description deployment_set_description
     *
     * @return $this
     */
    public function setDeploymentSetDescription($deployment_set_description)
    {
        $this->container['deployment_set_description'] = $deployment_set_description;

        return $this;
    }

    /**
     * Gets deployment_set_id
     *
     * @return string
     */
    public function getDeploymentSetId()
    {
        return $this->container['deployment_set_id'];
    }

    /**
     * Sets deployment_set_id
     *
     * @param string $deployment_set_id deployment_set_id
     *
     * @return $this
     */
    public function setDeploymentSetId($deployment_set_id)
    {
        $this->container['deployment_set_id'] = $deployment_set_id;

        return $this;
    }

    /**
     * Gets deployment_set_name
     *
     * @return string
     */
    public function getDeploymentSetName()
    {
        return $this->container['deployment_set_name'];
    }

    /**
     * Sets deployment_set_name
     *
     * @param string $deployment_set_name deployment_set_name
     *
     * @return $this
     */
    public function setDeploymentSetName($deployment_set_name)
    {
        $this->container['deployment_set_name'] = $deployment_set_name;

        return $this;
    }

    /**
     * Gets granularity
     *
     * @return string
     */
    public function getGranularity()
    {
        return $this->container['granularity'];
    }

    /**
     * Sets granularity
     *
     * @param string $granularity granularity
     *
     * @return $this
     */
    public function setGranularity($granularity)
    {
        $this->container['granularity'] = $granularity;

        return $this;
    }

    /**
     * Gets group_count
     *
     * @return int
     */
    public function getGroupCount()
    {
        return $this->container['group_count'];
    }

    /**
     * Sets group_count
     *
     * @param int $group_count group_count
     *
     * @return $this
     */
    public function setGroupCount($group_count)
    {
        $this->container['group_count'] = $group_count;

        return $this;
    }

    /**
     * Gets instance_amount
     *
     * @return int
     */
    public function getInstanceAmount()
    {
        return $this->container['instance_amount'];
    }

    /**
     * Sets instance_amount
     *
     * @param int $instance_amount instance_amount
     *
     * @return $this
     */
    public function setInstanceAmount($instance_amount)
    {
        $this->container['instance_amount'] = $instance_amount;

        return $this;
    }

    /**
     * Gets instance_ids
     *
     * @return string[]
     */
    public function getInstanceIds()
    {
        return $this->container['instance_ids'];
    }

    /**
     * Sets instance_ids
     *
     * @param string[] $instance_ids instance_ids
     *
     * @return $this
     */
    public function setInstanceIds($instance_ids)
    {
        $this->container['instance_ids'] = $instance_ids;

        return $this;
    }

    /**
     * Gets strategy
     *
     * @return string
     */
    public function getStrategy()
    {
        return $this->container['strategy'];
    }

    /**
     * Sets strategy
     *
     * @param string $strategy strategy
     *
     * @return $this
     */
    public function setStrategy($strategy)
    {
        $this->container['strategy'] = $strategy;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

