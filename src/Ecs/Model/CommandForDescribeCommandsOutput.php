<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Ecs\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CommandForDescribeCommandsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CommandForDescribeCommandsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'command_content' => 'string',
        'command_id' => 'string',
        'created_at' => 'string',
        'description' => 'string',
        'enable_parameter' => 'bool',
        'invocation_times' => 'int',
        'name' => 'string',
        'parameter_definitions' => '\Volcengine\Ecs\Model\ParameterDefinitionForDescribeCommandsOutput[]',
        'project_name' => 'string',
        'provider' => 'string',
        'tags' => '\Volcengine\Ecs\Model\TagForDescribeCommandsOutput[]',
        'timeout' => 'int',
        'type' => 'string',
        'updated_at' => 'string',
        'username' => 'string',
        'working_dir' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'command_content' => null,
        'command_id' => null,
        'created_at' => null,
        'description' => null,
        'enable_parameter' => null,
        'invocation_times' => 'int32',
        'name' => null,
        'parameter_definitions' => null,
        'project_name' => null,
        'provider' => null,
        'tags' => null,
        'timeout' => 'int32',
        'type' => null,
        'updated_at' => null,
        'username' => null,
        'working_dir' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'command_content' => 'CommandContent',
        'command_id' => 'CommandId',
        'created_at' => 'CreatedAt',
        'description' => 'Description',
        'enable_parameter' => 'EnableParameter',
        'invocation_times' => 'InvocationTimes',
        'name' => 'Name',
        'parameter_definitions' => 'ParameterDefinitions',
        'project_name' => 'ProjectName',
        'provider' => 'Provider',
        'tags' => 'Tags',
        'timeout' => 'Timeout',
        'type' => 'Type',
        'updated_at' => 'UpdatedAt',
        'username' => 'Username',
        'working_dir' => 'WorkingDir'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'command_content' => 'setCommandContent',
        'command_id' => 'setCommandId',
        'created_at' => 'setCreatedAt',
        'description' => 'setDescription',
        'enable_parameter' => 'setEnableParameter',
        'invocation_times' => 'setInvocationTimes',
        'name' => 'setName',
        'parameter_definitions' => 'setParameterDefinitions',
        'project_name' => 'setProjectName',
        'provider' => 'setProvider',
        'tags' => 'setTags',
        'timeout' => 'setTimeout',
        'type' => 'setType',
        'updated_at' => 'setUpdatedAt',
        'username' => 'setUsername',
        'working_dir' => 'setWorkingDir'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'command_content' => 'getCommandContent',
        'command_id' => 'getCommandId',
        'created_at' => 'getCreatedAt',
        'description' => 'getDescription',
        'enable_parameter' => 'getEnableParameter',
        'invocation_times' => 'getInvocationTimes',
        'name' => 'getName',
        'parameter_definitions' => 'getParameterDefinitions',
        'project_name' => 'getProjectName',
        'provider' => 'getProvider',
        'tags' => 'getTags',
        'timeout' => 'getTimeout',
        'type' => 'getType',
        'updated_at' => 'getUpdatedAt',
        'username' => 'getUsername',
        'working_dir' => 'getWorkingDir'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['command_content'] = isset($data['command_content']) ? $data['command_content'] : null;
        $this->container['command_id'] = isset($data['command_id']) ? $data['command_id'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['enable_parameter'] = isset($data['enable_parameter']) ? $data['enable_parameter'] : null;
        $this->container['invocation_times'] = isset($data['invocation_times']) ? $data['invocation_times'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['parameter_definitions'] = isset($data['parameter_definitions']) ? $data['parameter_definitions'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['provider'] = isset($data['provider']) ? $data['provider'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['timeout'] = isset($data['timeout']) ? $data['timeout'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['working_dir'] = isset($data['working_dir']) ? $data['working_dir'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets command_content
     *
     * @return string
     */
    public function getCommandContent()
    {
        return $this->container['command_content'];
    }

    /**
     * Sets command_content
     *
     * @param string $command_content command_content
     *
     * @return $this
     */
    public function setCommandContent($command_content)
    {
        $this->container['command_content'] = $command_content;

        return $this;
    }

    /**
     * Gets command_id
     *
     * @return string
     */
    public function getCommandId()
    {
        return $this->container['command_id'];
    }

    /**
     * Sets command_id
     *
     * @param string $command_id command_id
     *
     * @return $this
     */
    public function setCommandId($command_id)
    {
        $this->container['command_id'] = $command_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets enable_parameter
     *
     * @return bool
     */
    public function getEnableParameter()
    {
        return $this->container['enable_parameter'];
    }

    /**
     * Sets enable_parameter
     *
     * @param bool $enable_parameter enable_parameter
     *
     * @return $this
     */
    public function setEnableParameter($enable_parameter)
    {
        $this->container['enable_parameter'] = $enable_parameter;

        return $this;
    }

    /**
     * Gets invocation_times
     *
     * @return int
     */
    public function getInvocationTimes()
    {
        return $this->container['invocation_times'];
    }

    /**
     * Sets invocation_times
     *
     * @param int $invocation_times invocation_times
     *
     * @return $this
     */
    public function setInvocationTimes($invocation_times)
    {
        $this->container['invocation_times'] = $invocation_times;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets parameter_definitions
     *
     * @return \Volcengine\Ecs\Model\ParameterDefinitionForDescribeCommandsOutput[]
     */
    public function getParameterDefinitions()
    {
        return $this->container['parameter_definitions'];
    }

    /**
     * Sets parameter_definitions
     *
     * @param \Volcengine\Ecs\Model\ParameterDefinitionForDescribeCommandsOutput[] $parameter_definitions parameter_definitions
     *
     * @return $this
     */
    public function setParameterDefinitions($parameter_definitions)
    {
        $this->container['parameter_definitions'] = $parameter_definitions;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets provider
     *
     * @return string
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     *
     * @param string $provider provider
     *
     * @return $this
     */
    public function setProvider($provider)
    {
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Ecs\Model\TagForDescribeCommandsOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Ecs\Model\TagForDescribeCommandsOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets timeout
     *
     * @return int
     */
    public function getTimeout()
    {
        return $this->container['timeout'];
    }

    /**
     * Sets timeout
     *
     * @param int $timeout timeout
     *
     * @return $this
     */
    public function setTimeout($timeout)
    {
        $this->container['timeout'] = $timeout;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets working_dir
     *
     * @return string
     */
    public function getWorkingDir()
    {
        return $this->container['working_dir'];
    }

    /**
     * Sets working_dir
     *
     * @param string $working_dir working_dir
     *
     * @return $this
     */
    public function setWorkingDir($working_dir)
    {
        $this->container['working_dir'] = $working_dir;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

