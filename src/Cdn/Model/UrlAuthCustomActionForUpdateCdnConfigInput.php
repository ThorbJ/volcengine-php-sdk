<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Cdn\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class UrlAuthCustomActionForUpdateCdnConfigInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UrlAuthCustomActionForUpdateCdnConfigInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'exp_time_cap_rule' => '\Volcengine\Cdn\Model\ExpTimeCapRuleForUpdateCdnConfigInput',
        'param_cal_rules' => 'string[]',
        'sign_cap_rule' => '\Volcengine\Cdn\Model\SignCapRuleForUpdateCdnConfigInput',
        'sign_join_symbol' => 'string',
        'sign_param' => '\Volcengine\Cdn\Model\SignParamForUpdateCdnConfigInput[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'exp_time_cap_rule' => null,
        'param_cal_rules' => null,
        'sign_cap_rule' => null,
        'sign_join_symbol' => null,
        'sign_param' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'exp_time_cap_rule' => 'ExpTimeCapRule',
        'param_cal_rules' => 'ParamCalRules',
        'sign_cap_rule' => 'SignCapRule',
        'sign_join_symbol' => 'SignJoinSymbol',
        'sign_param' => 'SignParam'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'exp_time_cap_rule' => 'setExpTimeCapRule',
        'param_cal_rules' => 'setParamCalRules',
        'sign_cap_rule' => 'setSignCapRule',
        'sign_join_symbol' => 'setSignJoinSymbol',
        'sign_param' => 'setSignParam'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'exp_time_cap_rule' => 'getExpTimeCapRule',
        'param_cal_rules' => 'getParamCalRules',
        'sign_cap_rule' => 'getSignCapRule',
        'sign_join_symbol' => 'getSignJoinSymbol',
        'sign_param' => 'getSignParam'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['exp_time_cap_rule'] = isset($data['exp_time_cap_rule']) ? $data['exp_time_cap_rule'] : null;
        $this->container['param_cal_rules'] = isset($data['param_cal_rules']) ? $data['param_cal_rules'] : null;
        $this->container['sign_cap_rule'] = isset($data['sign_cap_rule']) ? $data['sign_cap_rule'] : null;
        $this->container['sign_join_symbol'] = isset($data['sign_join_symbol']) ? $data['sign_join_symbol'] : null;
        $this->container['sign_param'] = isset($data['sign_param']) ? $data['sign_param'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets exp_time_cap_rule
     *
     * @return \Volcengine\Cdn\Model\ExpTimeCapRuleForUpdateCdnConfigInput
     */
    public function getExpTimeCapRule()
    {
        return $this->container['exp_time_cap_rule'];
    }

    /**
     * Sets exp_time_cap_rule
     *
     * @param \Volcengine\Cdn\Model\ExpTimeCapRuleForUpdateCdnConfigInput $exp_time_cap_rule exp_time_cap_rule
     *
     * @return $this
     */
    public function setExpTimeCapRule($exp_time_cap_rule)
    {
        $this->container['exp_time_cap_rule'] = $exp_time_cap_rule;

        return $this;
    }

    /**
     * Gets param_cal_rules
     *
     * @return string[]
     */
    public function getParamCalRules()
    {
        return $this->container['param_cal_rules'];
    }

    /**
     * Sets param_cal_rules
     *
     * @param string[] $param_cal_rules param_cal_rules
     *
     * @return $this
     */
    public function setParamCalRules($param_cal_rules)
    {
        $this->container['param_cal_rules'] = $param_cal_rules;

        return $this;
    }

    /**
     * Gets sign_cap_rule
     *
     * @return \Volcengine\Cdn\Model\SignCapRuleForUpdateCdnConfigInput
     */
    public function getSignCapRule()
    {
        return $this->container['sign_cap_rule'];
    }

    /**
     * Sets sign_cap_rule
     *
     * @param \Volcengine\Cdn\Model\SignCapRuleForUpdateCdnConfigInput $sign_cap_rule sign_cap_rule
     *
     * @return $this
     */
    public function setSignCapRule($sign_cap_rule)
    {
        $this->container['sign_cap_rule'] = $sign_cap_rule;

        return $this;
    }

    /**
     * Gets sign_join_symbol
     *
     * @return string
     */
    public function getSignJoinSymbol()
    {
        return $this->container['sign_join_symbol'];
    }

    /**
     * Sets sign_join_symbol
     *
     * @param string $sign_join_symbol sign_join_symbol
     *
     * @return $this
     */
    public function setSignJoinSymbol($sign_join_symbol)
    {
        $this->container['sign_join_symbol'] = $sign_join_symbol;

        return $this;
    }

    /**
     * Gets sign_param
     *
     * @return \Volcengine\Cdn\Model\SignParamForUpdateCdnConfigInput[]
     */
    public function getSignParam()
    {
        return $this->container['sign_param'];
    }

    /**
     * Sets sign_param
     *
     * @param \Volcengine\Cdn\Model\SignParamForUpdateCdnConfigInput[] $sign_param sign_param
     *
     * @return $this
     */
    public function setSignParam($sign_param)
    {
        $this->container['sign_param'] = $sign_param;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

