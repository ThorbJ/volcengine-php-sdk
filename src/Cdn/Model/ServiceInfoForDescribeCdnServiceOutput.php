<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Cdn\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ServiceInfoForDescribeCdnServiceOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ServiceInfoForDescribeCdnServiceOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'begin_time' => 'string',
        'billing_code' => 'string',
        'billing_cycle' => 'string',
        'billing_data' => 'string',
        'billing_desc' => 'string',
        'create_time' => 'string',
        'instance_category' => 'string',
        'instance_type' => 'string',
        'metric_type' => 'string',
        'service_region' => 'string',
        'start_time' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'begin_time' => null,
        'billing_code' => null,
        'billing_cycle' => null,
        'billing_data' => null,
        'billing_desc' => null,
        'create_time' => null,
        'instance_category' => null,
        'instance_type' => null,
        'metric_type' => null,
        'service_region' => null,
        'start_time' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'begin_time' => 'BeginTime',
        'billing_code' => 'BillingCode',
        'billing_cycle' => 'BillingCycle',
        'billing_data' => 'BillingData',
        'billing_desc' => 'BillingDesc',
        'create_time' => 'CreateTime',
        'instance_category' => 'InstanceCategory',
        'instance_type' => 'InstanceType',
        'metric_type' => 'MetricType',
        'service_region' => 'ServiceRegion',
        'start_time' => 'StartTime',
        'status' => 'Status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'begin_time' => 'setBeginTime',
        'billing_code' => 'setBillingCode',
        'billing_cycle' => 'setBillingCycle',
        'billing_data' => 'setBillingData',
        'billing_desc' => 'setBillingDesc',
        'create_time' => 'setCreateTime',
        'instance_category' => 'setInstanceCategory',
        'instance_type' => 'setInstanceType',
        'metric_type' => 'setMetricType',
        'service_region' => 'setServiceRegion',
        'start_time' => 'setStartTime',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'begin_time' => 'getBeginTime',
        'billing_code' => 'getBillingCode',
        'billing_cycle' => 'getBillingCycle',
        'billing_data' => 'getBillingData',
        'billing_desc' => 'getBillingDesc',
        'create_time' => 'getCreateTime',
        'instance_category' => 'getInstanceCategory',
        'instance_type' => 'getInstanceType',
        'metric_type' => 'getMetricType',
        'service_region' => 'getServiceRegion',
        'start_time' => 'getStartTime',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['begin_time'] = isset($data['begin_time']) ? $data['begin_time'] : null;
        $this->container['billing_code'] = isset($data['billing_code']) ? $data['billing_code'] : null;
        $this->container['billing_cycle'] = isset($data['billing_cycle']) ? $data['billing_cycle'] : null;
        $this->container['billing_data'] = isset($data['billing_data']) ? $data['billing_data'] : null;
        $this->container['billing_desc'] = isset($data['billing_desc']) ? $data['billing_desc'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['instance_category'] = isset($data['instance_category']) ? $data['instance_category'] : null;
        $this->container['instance_type'] = isset($data['instance_type']) ? $data['instance_type'] : null;
        $this->container['metric_type'] = isset($data['metric_type']) ? $data['metric_type'] : null;
        $this->container['service_region'] = isset($data['service_region']) ? $data['service_region'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets begin_time
     *
     * @return string
     */
    public function getBeginTime()
    {
        return $this->container['begin_time'];
    }

    /**
     * Sets begin_time
     *
     * @param string $begin_time begin_time
     *
     * @return $this
     */
    public function setBeginTime($begin_time)
    {
        $this->container['begin_time'] = $begin_time;

        return $this;
    }

    /**
     * Gets billing_code
     *
     * @return string
     */
    public function getBillingCode()
    {
        return $this->container['billing_code'];
    }

    /**
     * Sets billing_code
     *
     * @param string $billing_code billing_code
     *
     * @return $this
     */
    public function setBillingCode($billing_code)
    {
        $this->container['billing_code'] = $billing_code;

        return $this;
    }

    /**
     * Gets billing_cycle
     *
     * @return string
     */
    public function getBillingCycle()
    {
        return $this->container['billing_cycle'];
    }

    /**
     * Sets billing_cycle
     *
     * @param string $billing_cycle billing_cycle
     *
     * @return $this
     */
    public function setBillingCycle($billing_cycle)
    {
        $this->container['billing_cycle'] = $billing_cycle;

        return $this;
    }

    /**
     * Gets billing_data
     *
     * @return string
     */
    public function getBillingData()
    {
        return $this->container['billing_data'];
    }

    /**
     * Sets billing_data
     *
     * @param string $billing_data billing_data
     *
     * @return $this
     */
    public function setBillingData($billing_data)
    {
        $this->container['billing_data'] = $billing_data;

        return $this;
    }

    /**
     * Gets billing_desc
     *
     * @return string
     */
    public function getBillingDesc()
    {
        return $this->container['billing_desc'];
    }

    /**
     * Sets billing_desc
     *
     * @param string $billing_desc billing_desc
     *
     * @return $this
     */
    public function setBillingDesc($billing_desc)
    {
        $this->container['billing_desc'] = $billing_desc;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets instance_category
     *
     * @return string
     */
    public function getInstanceCategory()
    {
        return $this->container['instance_category'];
    }

    /**
     * Sets instance_category
     *
     * @param string $instance_category instance_category
     *
     * @return $this
     */
    public function setInstanceCategory($instance_category)
    {
        $this->container['instance_category'] = $instance_category;

        return $this;
    }

    /**
     * Gets instance_type
     *
     * @return string
     */
    public function getInstanceType()
    {
        return $this->container['instance_type'];
    }

    /**
     * Sets instance_type
     *
     * @param string $instance_type instance_type
     *
     * @return $this
     */
    public function setInstanceType($instance_type)
    {
        $this->container['instance_type'] = $instance_type;

        return $this;
    }

    /**
     * Gets metric_type
     *
     * @return string
     */
    public function getMetricType()
    {
        return $this->container['metric_type'];
    }

    /**
     * Sets metric_type
     *
     * @param string $metric_type metric_type
     *
     * @return $this
     */
    public function setMetricType($metric_type)
    {
        $this->container['metric_type'] = $metric_type;

        return $this;
    }

    /**
     * Gets service_region
     *
     * @return string
     */
    public function getServiceRegion()
    {
        return $this->container['service_region'];
    }

    /**
     * Sets service_region
     *
     * @param string $service_region service_region
     *
     * @return $this
     */
    public function setServiceRegion($service_region)
    {
        $this->container['service_region'] = $service_region;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return string
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param string $start_time start_time
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

