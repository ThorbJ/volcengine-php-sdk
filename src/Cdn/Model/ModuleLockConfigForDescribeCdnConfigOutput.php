<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Cdn\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ModuleLockConfigForDescribeCdnConfigOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ModuleLockConfigForDescribeCdnConfigOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'browser_cache_locked' => 'bool',
        'cache_key_locked' => 'bool',
        'cache_locked' => 'bool',
        'compression_locked' => 'bool',
        'customize_access_rule_locked' => 'bool',
        'download_speed_limit_locked' => 'bool',
        'error_page_locked' => 'bool',
        'ip_access_rule_locked' => 'bool',
        'negative_cache_locked' => 'bool',
        'origin_access_rule_locked' => 'bool',
        'origin_arg_locked' => 'bool',
        'origin_locked' => 'bool',
        'origin_response_header_locked' => 'bool',
        'origin_rewrite_locked' => 'bool',
        'quic_locked' => 'bool',
        'redirection_rewrite_locked' => 'bool',
        'referer_access_rule_locked' => 'bool',
        'remote_auth_locked' => 'bool',
        'request_block_rule_locked' => 'bool',
        'request_header_locked' => 'bool',
        'response_header_locked' => 'bool',
        'rule_engine_locked' => 'bool',
        'share_cache_locked' => 'bool',
        'sign_url_auth_locked' => 'bool',
        'ua_access_rule_locked' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'browser_cache_locked' => null,
        'cache_key_locked' => null,
        'cache_locked' => null,
        'compression_locked' => null,
        'customize_access_rule_locked' => null,
        'download_speed_limit_locked' => null,
        'error_page_locked' => null,
        'ip_access_rule_locked' => null,
        'negative_cache_locked' => null,
        'origin_access_rule_locked' => null,
        'origin_arg_locked' => null,
        'origin_locked' => null,
        'origin_response_header_locked' => null,
        'origin_rewrite_locked' => null,
        'quic_locked' => null,
        'redirection_rewrite_locked' => null,
        'referer_access_rule_locked' => null,
        'remote_auth_locked' => null,
        'request_block_rule_locked' => null,
        'request_header_locked' => null,
        'response_header_locked' => null,
        'rule_engine_locked' => null,
        'share_cache_locked' => null,
        'sign_url_auth_locked' => null,
        'ua_access_rule_locked' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'browser_cache_locked' => 'BrowserCacheLocked',
        'cache_key_locked' => 'CacheKeyLocked',
        'cache_locked' => 'CacheLocked',
        'compression_locked' => 'CompressionLocked',
        'customize_access_rule_locked' => 'CustomizeAccessRuleLocked',
        'download_speed_limit_locked' => 'DownloadSpeedLimitLocked',
        'error_page_locked' => 'ErrorPageLocked',
        'ip_access_rule_locked' => 'IpAccessRuleLocked',
        'negative_cache_locked' => 'NegativeCacheLocked',
        'origin_access_rule_locked' => 'OriginAccessRuleLocked',
        'origin_arg_locked' => 'OriginArgLocked',
        'origin_locked' => 'OriginLocked',
        'origin_response_header_locked' => 'OriginResponseHeaderLocked',
        'origin_rewrite_locked' => 'OriginRewriteLocked',
        'quic_locked' => 'QuicLocked',
        'redirection_rewrite_locked' => 'RedirectionRewriteLocked',
        'referer_access_rule_locked' => 'RefererAccessRuleLocked',
        'remote_auth_locked' => 'RemoteAuthLocked',
        'request_block_rule_locked' => 'RequestBlockRuleLocked',
        'request_header_locked' => 'RequestHeaderLocked',
        'response_header_locked' => 'ResponseHeaderLocked',
        'rule_engine_locked' => 'RuleEngineLocked',
        'share_cache_locked' => 'ShareCacheLocked',
        'sign_url_auth_locked' => 'SignUrlAuthLocked',
        'ua_access_rule_locked' => 'UAAccessRuleLocked'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'browser_cache_locked' => 'setBrowserCacheLocked',
        'cache_key_locked' => 'setCacheKeyLocked',
        'cache_locked' => 'setCacheLocked',
        'compression_locked' => 'setCompressionLocked',
        'customize_access_rule_locked' => 'setCustomizeAccessRuleLocked',
        'download_speed_limit_locked' => 'setDownloadSpeedLimitLocked',
        'error_page_locked' => 'setErrorPageLocked',
        'ip_access_rule_locked' => 'setIpAccessRuleLocked',
        'negative_cache_locked' => 'setNegativeCacheLocked',
        'origin_access_rule_locked' => 'setOriginAccessRuleLocked',
        'origin_arg_locked' => 'setOriginArgLocked',
        'origin_locked' => 'setOriginLocked',
        'origin_response_header_locked' => 'setOriginResponseHeaderLocked',
        'origin_rewrite_locked' => 'setOriginRewriteLocked',
        'quic_locked' => 'setQuicLocked',
        'redirection_rewrite_locked' => 'setRedirectionRewriteLocked',
        'referer_access_rule_locked' => 'setRefererAccessRuleLocked',
        'remote_auth_locked' => 'setRemoteAuthLocked',
        'request_block_rule_locked' => 'setRequestBlockRuleLocked',
        'request_header_locked' => 'setRequestHeaderLocked',
        'response_header_locked' => 'setResponseHeaderLocked',
        'rule_engine_locked' => 'setRuleEngineLocked',
        'share_cache_locked' => 'setShareCacheLocked',
        'sign_url_auth_locked' => 'setSignUrlAuthLocked',
        'ua_access_rule_locked' => 'setUaAccessRuleLocked'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'browser_cache_locked' => 'getBrowserCacheLocked',
        'cache_key_locked' => 'getCacheKeyLocked',
        'cache_locked' => 'getCacheLocked',
        'compression_locked' => 'getCompressionLocked',
        'customize_access_rule_locked' => 'getCustomizeAccessRuleLocked',
        'download_speed_limit_locked' => 'getDownloadSpeedLimitLocked',
        'error_page_locked' => 'getErrorPageLocked',
        'ip_access_rule_locked' => 'getIpAccessRuleLocked',
        'negative_cache_locked' => 'getNegativeCacheLocked',
        'origin_access_rule_locked' => 'getOriginAccessRuleLocked',
        'origin_arg_locked' => 'getOriginArgLocked',
        'origin_locked' => 'getOriginLocked',
        'origin_response_header_locked' => 'getOriginResponseHeaderLocked',
        'origin_rewrite_locked' => 'getOriginRewriteLocked',
        'quic_locked' => 'getQuicLocked',
        'redirection_rewrite_locked' => 'getRedirectionRewriteLocked',
        'referer_access_rule_locked' => 'getRefererAccessRuleLocked',
        'remote_auth_locked' => 'getRemoteAuthLocked',
        'request_block_rule_locked' => 'getRequestBlockRuleLocked',
        'request_header_locked' => 'getRequestHeaderLocked',
        'response_header_locked' => 'getResponseHeaderLocked',
        'rule_engine_locked' => 'getRuleEngineLocked',
        'share_cache_locked' => 'getShareCacheLocked',
        'sign_url_auth_locked' => 'getSignUrlAuthLocked',
        'ua_access_rule_locked' => 'getUaAccessRuleLocked'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['browser_cache_locked'] = isset($data['browser_cache_locked']) ? $data['browser_cache_locked'] : null;
        $this->container['cache_key_locked'] = isset($data['cache_key_locked']) ? $data['cache_key_locked'] : null;
        $this->container['cache_locked'] = isset($data['cache_locked']) ? $data['cache_locked'] : null;
        $this->container['compression_locked'] = isset($data['compression_locked']) ? $data['compression_locked'] : null;
        $this->container['customize_access_rule_locked'] = isset($data['customize_access_rule_locked']) ? $data['customize_access_rule_locked'] : null;
        $this->container['download_speed_limit_locked'] = isset($data['download_speed_limit_locked']) ? $data['download_speed_limit_locked'] : null;
        $this->container['error_page_locked'] = isset($data['error_page_locked']) ? $data['error_page_locked'] : null;
        $this->container['ip_access_rule_locked'] = isset($data['ip_access_rule_locked']) ? $data['ip_access_rule_locked'] : null;
        $this->container['negative_cache_locked'] = isset($data['negative_cache_locked']) ? $data['negative_cache_locked'] : null;
        $this->container['origin_access_rule_locked'] = isset($data['origin_access_rule_locked']) ? $data['origin_access_rule_locked'] : null;
        $this->container['origin_arg_locked'] = isset($data['origin_arg_locked']) ? $data['origin_arg_locked'] : null;
        $this->container['origin_locked'] = isset($data['origin_locked']) ? $data['origin_locked'] : null;
        $this->container['origin_response_header_locked'] = isset($data['origin_response_header_locked']) ? $data['origin_response_header_locked'] : null;
        $this->container['origin_rewrite_locked'] = isset($data['origin_rewrite_locked']) ? $data['origin_rewrite_locked'] : null;
        $this->container['quic_locked'] = isset($data['quic_locked']) ? $data['quic_locked'] : null;
        $this->container['redirection_rewrite_locked'] = isset($data['redirection_rewrite_locked']) ? $data['redirection_rewrite_locked'] : null;
        $this->container['referer_access_rule_locked'] = isset($data['referer_access_rule_locked']) ? $data['referer_access_rule_locked'] : null;
        $this->container['remote_auth_locked'] = isset($data['remote_auth_locked']) ? $data['remote_auth_locked'] : null;
        $this->container['request_block_rule_locked'] = isset($data['request_block_rule_locked']) ? $data['request_block_rule_locked'] : null;
        $this->container['request_header_locked'] = isset($data['request_header_locked']) ? $data['request_header_locked'] : null;
        $this->container['response_header_locked'] = isset($data['response_header_locked']) ? $data['response_header_locked'] : null;
        $this->container['rule_engine_locked'] = isset($data['rule_engine_locked']) ? $data['rule_engine_locked'] : null;
        $this->container['share_cache_locked'] = isset($data['share_cache_locked']) ? $data['share_cache_locked'] : null;
        $this->container['sign_url_auth_locked'] = isset($data['sign_url_auth_locked']) ? $data['sign_url_auth_locked'] : null;
        $this->container['ua_access_rule_locked'] = isset($data['ua_access_rule_locked']) ? $data['ua_access_rule_locked'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets browser_cache_locked
     *
     * @return bool
     */
    public function getBrowserCacheLocked()
    {
        return $this->container['browser_cache_locked'];
    }

    /**
     * Sets browser_cache_locked
     *
     * @param bool $browser_cache_locked browser_cache_locked
     *
     * @return $this
     */
    public function setBrowserCacheLocked($browser_cache_locked)
    {
        $this->container['browser_cache_locked'] = $browser_cache_locked;

        return $this;
    }

    /**
     * Gets cache_key_locked
     *
     * @return bool
     */
    public function getCacheKeyLocked()
    {
        return $this->container['cache_key_locked'];
    }

    /**
     * Sets cache_key_locked
     *
     * @param bool $cache_key_locked cache_key_locked
     *
     * @return $this
     */
    public function setCacheKeyLocked($cache_key_locked)
    {
        $this->container['cache_key_locked'] = $cache_key_locked;

        return $this;
    }

    /**
     * Gets cache_locked
     *
     * @return bool
     */
    public function getCacheLocked()
    {
        return $this->container['cache_locked'];
    }

    /**
     * Sets cache_locked
     *
     * @param bool $cache_locked cache_locked
     *
     * @return $this
     */
    public function setCacheLocked($cache_locked)
    {
        $this->container['cache_locked'] = $cache_locked;

        return $this;
    }

    /**
     * Gets compression_locked
     *
     * @return bool
     */
    public function getCompressionLocked()
    {
        return $this->container['compression_locked'];
    }

    /**
     * Sets compression_locked
     *
     * @param bool $compression_locked compression_locked
     *
     * @return $this
     */
    public function setCompressionLocked($compression_locked)
    {
        $this->container['compression_locked'] = $compression_locked;

        return $this;
    }

    /**
     * Gets customize_access_rule_locked
     *
     * @return bool
     */
    public function getCustomizeAccessRuleLocked()
    {
        return $this->container['customize_access_rule_locked'];
    }

    /**
     * Sets customize_access_rule_locked
     *
     * @param bool $customize_access_rule_locked customize_access_rule_locked
     *
     * @return $this
     */
    public function setCustomizeAccessRuleLocked($customize_access_rule_locked)
    {
        $this->container['customize_access_rule_locked'] = $customize_access_rule_locked;

        return $this;
    }

    /**
     * Gets download_speed_limit_locked
     *
     * @return bool
     */
    public function getDownloadSpeedLimitLocked()
    {
        return $this->container['download_speed_limit_locked'];
    }

    /**
     * Sets download_speed_limit_locked
     *
     * @param bool $download_speed_limit_locked download_speed_limit_locked
     *
     * @return $this
     */
    public function setDownloadSpeedLimitLocked($download_speed_limit_locked)
    {
        $this->container['download_speed_limit_locked'] = $download_speed_limit_locked;

        return $this;
    }

    /**
     * Gets error_page_locked
     *
     * @return bool
     */
    public function getErrorPageLocked()
    {
        return $this->container['error_page_locked'];
    }

    /**
     * Sets error_page_locked
     *
     * @param bool $error_page_locked error_page_locked
     *
     * @return $this
     */
    public function setErrorPageLocked($error_page_locked)
    {
        $this->container['error_page_locked'] = $error_page_locked;

        return $this;
    }

    /**
     * Gets ip_access_rule_locked
     *
     * @return bool
     */
    public function getIpAccessRuleLocked()
    {
        return $this->container['ip_access_rule_locked'];
    }

    /**
     * Sets ip_access_rule_locked
     *
     * @param bool $ip_access_rule_locked ip_access_rule_locked
     *
     * @return $this
     */
    public function setIpAccessRuleLocked($ip_access_rule_locked)
    {
        $this->container['ip_access_rule_locked'] = $ip_access_rule_locked;

        return $this;
    }

    /**
     * Gets negative_cache_locked
     *
     * @return bool
     */
    public function getNegativeCacheLocked()
    {
        return $this->container['negative_cache_locked'];
    }

    /**
     * Sets negative_cache_locked
     *
     * @param bool $negative_cache_locked negative_cache_locked
     *
     * @return $this
     */
    public function setNegativeCacheLocked($negative_cache_locked)
    {
        $this->container['negative_cache_locked'] = $negative_cache_locked;

        return $this;
    }

    /**
     * Gets origin_access_rule_locked
     *
     * @return bool
     */
    public function getOriginAccessRuleLocked()
    {
        return $this->container['origin_access_rule_locked'];
    }

    /**
     * Sets origin_access_rule_locked
     *
     * @param bool $origin_access_rule_locked origin_access_rule_locked
     *
     * @return $this
     */
    public function setOriginAccessRuleLocked($origin_access_rule_locked)
    {
        $this->container['origin_access_rule_locked'] = $origin_access_rule_locked;

        return $this;
    }

    /**
     * Gets origin_arg_locked
     *
     * @return bool
     */
    public function getOriginArgLocked()
    {
        return $this->container['origin_arg_locked'];
    }

    /**
     * Sets origin_arg_locked
     *
     * @param bool $origin_arg_locked origin_arg_locked
     *
     * @return $this
     */
    public function setOriginArgLocked($origin_arg_locked)
    {
        $this->container['origin_arg_locked'] = $origin_arg_locked;

        return $this;
    }

    /**
     * Gets origin_locked
     *
     * @return bool
     */
    public function getOriginLocked()
    {
        return $this->container['origin_locked'];
    }

    /**
     * Sets origin_locked
     *
     * @param bool $origin_locked origin_locked
     *
     * @return $this
     */
    public function setOriginLocked($origin_locked)
    {
        $this->container['origin_locked'] = $origin_locked;

        return $this;
    }

    /**
     * Gets origin_response_header_locked
     *
     * @return bool
     */
    public function getOriginResponseHeaderLocked()
    {
        return $this->container['origin_response_header_locked'];
    }

    /**
     * Sets origin_response_header_locked
     *
     * @param bool $origin_response_header_locked origin_response_header_locked
     *
     * @return $this
     */
    public function setOriginResponseHeaderLocked($origin_response_header_locked)
    {
        $this->container['origin_response_header_locked'] = $origin_response_header_locked;

        return $this;
    }

    /**
     * Gets origin_rewrite_locked
     *
     * @return bool
     */
    public function getOriginRewriteLocked()
    {
        return $this->container['origin_rewrite_locked'];
    }

    /**
     * Sets origin_rewrite_locked
     *
     * @param bool $origin_rewrite_locked origin_rewrite_locked
     *
     * @return $this
     */
    public function setOriginRewriteLocked($origin_rewrite_locked)
    {
        $this->container['origin_rewrite_locked'] = $origin_rewrite_locked;

        return $this;
    }

    /**
     * Gets quic_locked
     *
     * @return bool
     */
    public function getQuicLocked()
    {
        return $this->container['quic_locked'];
    }

    /**
     * Sets quic_locked
     *
     * @param bool $quic_locked quic_locked
     *
     * @return $this
     */
    public function setQuicLocked($quic_locked)
    {
        $this->container['quic_locked'] = $quic_locked;

        return $this;
    }

    /**
     * Gets redirection_rewrite_locked
     *
     * @return bool
     */
    public function getRedirectionRewriteLocked()
    {
        return $this->container['redirection_rewrite_locked'];
    }

    /**
     * Sets redirection_rewrite_locked
     *
     * @param bool $redirection_rewrite_locked redirection_rewrite_locked
     *
     * @return $this
     */
    public function setRedirectionRewriteLocked($redirection_rewrite_locked)
    {
        $this->container['redirection_rewrite_locked'] = $redirection_rewrite_locked;

        return $this;
    }

    /**
     * Gets referer_access_rule_locked
     *
     * @return bool
     */
    public function getRefererAccessRuleLocked()
    {
        return $this->container['referer_access_rule_locked'];
    }

    /**
     * Sets referer_access_rule_locked
     *
     * @param bool $referer_access_rule_locked referer_access_rule_locked
     *
     * @return $this
     */
    public function setRefererAccessRuleLocked($referer_access_rule_locked)
    {
        $this->container['referer_access_rule_locked'] = $referer_access_rule_locked;

        return $this;
    }

    /**
     * Gets remote_auth_locked
     *
     * @return bool
     */
    public function getRemoteAuthLocked()
    {
        return $this->container['remote_auth_locked'];
    }

    /**
     * Sets remote_auth_locked
     *
     * @param bool $remote_auth_locked remote_auth_locked
     *
     * @return $this
     */
    public function setRemoteAuthLocked($remote_auth_locked)
    {
        $this->container['remote_auth_locked'] = $remote_auth_locked;

        return $this;
    }

    /**
     * Gets request_block_rule_locked
     *
     * @return bool
     */
    public function getRequestBlockRuleLocked()
    {
        return $this->container['request_block_rule_locked'];
    }

    /**
     * Sets request_block_rule_locked
     *
     * @param bool $request_block_rule_locked request_block_rule_locked
     *
     * @return $this
     */
    public function setRequestBlockRuleLocked($request_block_rule_locked)
    {
        $this->container['request_block_rule_locked'] = $request_block_rule_locked;

        return $this;
    }

    /**
     * Gets request_header_locked
     *
     * @return bool
     */
    public function getRequestHeaderLocked()
    {
        return $this->container['request_header_locked'];
    }

    /**
     * Sets request_header_locked
     *
     * @param bool $request_header_locked request_header_locked
     *
     * @return $this
     */
    public function setRequestHeaderLocked($request_header_locked)
    {
        $this->container['request_header_locked'] = $request_header_locked;

        return $this;
    }

    /**
     * Gets response_header_locked
     *
     * @return bool
     */
    public function getResponseHeaderLocked()
    {
        return $this->container['response_header_locked'];
    }

    /**
     * Sets response_header_locked
     *
     * @param bool $response_header_locked response_header_locked
     *
     * @return $this
     */
    public function setResponseHeaderLocked($response_header_locked)
    {
        $this->container['response_header_locked'] = $response_header_locked;

        return $this;
    }

    /**
     * Gets rule_engine_locked
     *
     * @return bool
     */
    public function getRuleEngineLocked()
    {
        return $this->container['rule_engine_locked'];
    }

    /**
     * Sets rule_engine_locked
     *
     * @param bool $rule_engine_locked rule_engine_locked
     *
     * @return $this
     */
    public function setRuleEngineLocked($rule_engine_locked)
    {
        $this->container['rule_engine_locked'] = $rule_engine_locked;

        return $this;
    }

    /**
     * Gets share_cache_locked
     *
     * @return bool
     */
    public function getShareCacheLocked()
    {
        return $this->container['share_cache_locked'];
    }

    /**
     * Sets share_cache_locked
     *
     * @param bool $share_cache_locked share_cache_locked
     *
     * @return $this
     */
    public function setShareCacheLocked($share_cache_locked)
    {
        $this->container['share_cache_locked'] = $share_cache_locked;

        return $this;
    }

    /**
     * Gets sign_url_auth_locked
     *
     * @return bool
     */
    public function getSignUrlAuthLocked()
    {
        return $this->container['sign_url_auth_locked'];
    }

    /**
     * Sets sign_url_auth_locked
     *
     * @param bool $sign_url_auth_locked sign_url_auth_locked
     *
     * @return $this
     */
    public function setSignUrlAuthLocked($sign_url_auth_locked)
    {
        $this->container['sign_url_auth_locked'] = $sign_url_auth_locked;

        return $this;
    }

    /**
     * Gets ua_access_rule_locked
     *
     * @return bool
     */
    public function getUaAccessRuleLocked()
    {
        return $this->container['ua_access_rule_locked'];
    }

    /**
     * Sets ua_access_rule_locked
     *
     * @param bool $ua_access_rule_locked ua_access_rule_locked
     *
     * @return $this
     */
    public function setUaAccessRuleLocked($ua_access_rule_locked)
    {
        $this->container['ua_access_rule_locked'] = $ua_access_rule_locked;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

