<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Cdn\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class RedirectionActionForBatchUpdateCdnConfigInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RedirectionActionForBatchUpdateCdnConfigInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'redirect_code' => 'string',
        'source_path' => 'string',
        'target_host' => 'string',
        'target_path' => 'string',
        'target_protocol' => 'string',
        'target_query_components' => '\Volcengine\Cdn\Model\TargetQueryComponentsForBatchUpdateCdnConfigInput'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'redirect_code' => null,
        'source_path' => null,
        'target_host' => null,
        'target_path' => null,
        'target_protocol' => null,
        'target_query_components' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'redirect_code' => 'RedirectCode',
        'source_path' => 'SourcePath',
        'target_host' => 'TargetHost',
        'target_path' => 'TargetPath',
        'target_protocol' => 'TargetProtocol',
        'target_query_components' => 'TargetQueryComponents'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'redirect_code' => 'setRedirectCode',
        'source_path' => 'setSourcePath',
        'target_host' => 'setTargetHost',
        'target_path' => 'setTargetPath',
        'target_protocol' => 'setTargetProtocol',
        'target_query_components' => 'setTargetQueryComponents'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'redirect_code' => 'getRedirectCode',
        'source_path' => 'getSourcePath',
        'target_host' => 'getTargetHost',
        'target_path' => 'getTargetPath',
        'target_protocol' => 'getTargetProtocol',
        'target_query_components' => 'getTargetQueryComponents'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['redirect_code'] = isset($data['redirect_code']) ? $data['redirect_code'] : null;
        $this->container['source_path'] = isset($data['source_path']) ? $data['source_path'] : null;
        $this->container['target_host'] = isset($data['target_host']) ? $data['target_host'] : null;
        $this->container['target_path'] = isset($data['target_path']) ? $data['target_path'] : null;
        $this->container['target_protocol'] = isset($data['target_protocol']) ? $data['target_protocol'] : null;
        $this->container['target_query_components'] = isset($data['target_query_components']) ? $data['target_query_components'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets redirect_code
     *
     * @return string
     */
    public function getRedirectCode()
    {
        return $this->container['redirect_code'];
    }

    /**
     * Sets redirect_code
     *
     * @param string $redirect_code redirect_code
     *
     * @return $this
     */
    public function setRedirectCode($redirect_code)
    {
        $this->container['redirect_code'] = $redirect_code;

        return $this;
    }

    /**
     * Gets source_path
     *
     * @return string
     */
    public function getSourcePath()
    {
        return $this->container['source_path'];
    }

    /**
     * Sets source_path
     *
     * @param string $source_path source_path
     *
     * @return $this
     */
    public function setSourcePath($source_path)
    {
        $this->container['source_path'] = $source_path;

        return $this;
    }

    /**
     * Gets target_host
     *
     * @return string
     */
    public function getTargetHost()
    {
        return $this->container['target_host'];
    }

    /**
     * Sets target_host
     *
     * @param string $target_host target_host
     *
     * @return $this
     */
    public function setTargetHost($target_host)
    {
        $this->container['target_host'] = $target_host;

        return $this;
    }

    /**
     * Gets target_path
     *
     * @return string
     */
    public function getTargetPath()
    {
        return $this->container['target_path'];
    }

    /**
     * Sets target_path
     *
     * @param string $target_path target_path
     *
     * @return $this
     */
    public function setTargetPath($target_path)
    {
        $this->container['target_path'] = $target_path;

        return $this;
    }

    /**
     * Gets target_protocol
     *
     * @return string
     */
    public function getTargetProtocol()
    {
        return $this->container['target_protocol'];
    }

    /**
     * Sets target_protocol
     *
     * @param string $target_protocol target_protocol
     *
     * @return $this
     */
    public function setTargetProtocol($target_protocol)
    {
        $this->container['target_protocol'] = $target_protocol;

        return $this;
    }

    /**
     * Gets target_query_components
     *
     * @return \Volcengine\Cdn\Model\TargetQueryComponentsForBatchUpdateCdnConfigInput
     */
    public function getTargetQueryComponents()
    {
        return $this->container['target_query_components'];
    }

    /**
     * Sets target_query_components
     *
     * @param \Volcengine\Cdn\Model\TargetQueryComponentsForBatchUpdateCdnConfigInput $target_query_components target_query_components
     *
     * @return $this
     */
    public function setTargetQueryComponents($target_query_components)
    {
        $this->container['target_query_components'] = $target_query_components;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

