<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Cdn\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class CreateUsageReportRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateUsageReportRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'aggregate' => 'string',
        'billing_code' => 'string',
        'billing_region' => 'string',
        'calculation_method' => 'string',
        'domain' => 'string',
        'end_time' => 'int',
        'export_type' => 'string',
        'free_time_traffic_compute' => 'bool',
        'metric' => 'string',
        'start_time' => 'int',
        'task_name' => 'string',
        'time_zone' => 'string',
        'tls_topic' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'aggregate' => null,
        'billing_code' => null,
        'billing_region' => null,
        'calculation_method' => null,
        'domain' => null,
        'end_time' => 'int64',
        'export_type' => null,
        'free_time_traffic_compute' => null,
        'metric' => null,
        'start_time' => 'int64',
        'task_name' => null,
        'time_zone' => null,
        'tls_topic' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aggregate' => 'Aggregate',
        'billing_code' => 'BillingCode',
        'billing_region' => 'BillingRegion',
        'calculation_method' => 'CalculationMethod',
        'domain' => 'Domain',
        'end_time' => 'EndTime',
        'export_type' => 'ExportType',
        'free_time_traffic_compute' => 'FreeTimeTrafficCompute',
        'metric' => 'Metric',
        'start_time' => 'StartTime',
        'task_name' => 'TaskName',
        'time_zone' => 'TimeZone',
        'tls_topic' => 'TlsTopic'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aggregate' => 'setAggregate',
        'billing_code' => 'setBillingCode',
        'billing_region' => 'setBillingRegion',
        'calculation_method' => 'setCalculationMethod',
        'domain' => 'setDomain',
        'end_time' => 'setEndTime',
        'export_type' => 'setExportType',
        'free_time_traffic_compute' => 'setFreeTimeTrafficCompute',
        'metric' => 'setMetric',
        'start_time' => 'setStartTime',
        'task_name' => 'setTaskName',
        'time_zone' => 'setTimeZone',
        'tls_topic' => 'setTlsTopic'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aggregate' => 'getAggregate',
        'billing_code' => 'getBillingCode',
        'billing_region' => 'getBillingRegion',
        'calculation_method' => 'getCalculationMethod',
        'domain' => 'getDomain',
        'end_time' => 'getEndTime',
        'export_type' => 'getExportType',
        'free_time_traffic_compute' => 'getFreeTimeTrafficCompute',
        'metric' => 'getMetric',
        'start_time' => 'getStartTime',
        'task_name' => 'getTaskName',
        'time_zone' => 'getTimeZone',
        'tls_topic' => 'getTlsTopic'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['aggregate'] = isset($data['aggregate']) ? $data['aggregate'] : null;
        $this->container['billing_code'] = isset($data['billing_code']) ? $data['billing_code'] : null;
        $this->container['billing_region'] = isset($data['billing_region']) ? $data['billing_region'] : null;
        $this->container['calculation_method'] = isset($data['calculation_method']) ? $data['calculation_method'] : null;
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['end_time'] = isset($data['end_time']) ? $data['end_time'] : null;
        $this->container['export_type'] = isset($data['export_type']) ? $data['export_type'] : null;
        $this->container['free_time_traffic_compute'] = isset($data['free_time_traffic_compute']) ? $data['free_time_traffic_compute'] : null;
        $this->container['metric'] = isset($data['metric']) ? $data['metric'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['task_name'] = isset($data['task_name']) ? $data['task_name'] : null;
        $this->container['time_zone'] = isset($data['time_zone']) ? $data['time_zone'] : null;
        $this->container['tls_topic'] = isset($data['tls_topic']) ? $data['tls_topic'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['billing_region'] === null) {
            $invalidProperties[] = "'billing_region' can't be null";
        }
        if ($this->container['end_time'] === null) {
            $invalidProperties[] = "'end_time' can't be null";
        }
        if ($this->container['export_type'] === null) {
            $invalidProperties[] = "'export_type' can't be null";
        }
        if ($this->container['start_time'] === null) {
            $invalidProperties[] = "'start_time' can't be null";
        }
        if ($this->container['task_name'] === null) {
            $invalidProperties[] = "'task_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets aggregate
     *
     * @return string
     */
    public function getAggregate()
    {
        return $this->container['aggregate'];
    }

    /**
     * Sets aggregate
     *
     * @param string $aggregate aggregate
     *
     * @return $this
     */
    public function setAggregate($aggregate)
    {
        $this->container['aggregate'] = $aggregate;

        return $this;
    }

    /**
     * Gets billing_code
     *
     * @return string
     */
    public function getBillingCode()
    {
        return $this->container['billing_code'];
    }

    /**
     * Sets billing_code
     *
     * @param string $billing_code billing_code
     *
     * @return $this
     */
    public function setBillingCode($billing_code)
    {
        $this->container['billing_code'] = $billing_code;

        return $this;
    }

    /**
     * Gets billing_region
     *
     * @return string
     */
    public function getBillingRegion()
    {
        return $this->container['billing_region'];
    }

    /**
     * Sets billing_region
     *
     * @param string $billing_region billing_region
     *
     * @return $this
     */
    public function setBillingRegion($billing_region)
    {
        $this->container['billing_region'] = $billing_region;

        return $this;
    }

    /**
     * Gets calculation_method
     *
     * @return string
     */
    public function getCalculationMethod()
    {
        return $this->container['calculation_method'];
    }

    /**
     * Sets calculation_method
     *
     * @param string $calculation_method calculation_method
     *
     * @return $this
     */
    public function setCalculationMethod($calculation_method)
    {
        $this->container['calculation_method'] = $calculation_method;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain domain
     *
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return int
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param int $end_time end_time
     *
     * @return $this
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets export_type
     *
     * @return string
     */
    public function getExportType()
    {
        return $this->container['export_type'];
    }

    /**
     * Sets export_type
     *
     * @param string $export_type export_type
     *
     * @return $this
     */
    public function setExportType($export_type)
    {
        $this->container['export_type'] = $export_type;

        return $this;
    }

    /**
     * Gets free_time_traffic_compute
     *
     * @return bool
     */
    public function getFreeTimeTrafficCompute()
    {
        return $this->container['free_time_traffic_compute'];
    }

    /**
     * Sets free_time_traffic_compute
     *
     * @param bool $free_time_traffic_compute free_time_traffic_compute
     *
     * @return $this
     */
    public function setFreeTimeTrafficCompute($free_time_traffic_compute)
    {
        $this->container['free_time_traffic_compute'] = $free_time_traffic_compute;

        return $this;
    }

    /**
     * Gets metric
     *
     * @return string
     */
    public function getMetric()
    {
        return $this->container['metric'];
    }

    /**
     * Sets metric
     *
     * @param string $metric metric
     *
     * @return $this
     */
    public function setMetric($metric)
    {
        $this->container['metric'] = $metric;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return int
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param int $start_time start_time
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets task_name
     *
     * @return string
     */
    public function getTaskName()
    {
        return $this->container['task_name'];
    }

    /**
     * Sets task_name
     *
     * @param string $task_name task_name
     *
     * @return $this
     */
    public function setTaskName($task_name)
    {
        $this->container['task_name'] = $task_name;

        return $this;
    }

    /**
     * Gets time_zone
     *
     * @return string
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets time_zone
     *
     * @param string $time_zone time_zone
     *
     * @return $this
     */
    public function setTimeZone($time_zone)
    {
        $this->container['time_zone'] = $time_zone;

        return $this;
    }

    /**
     * Gets tls_topic
     *
     * @return string
     */
    public function getTlsTopic()
    {
        return $this->container['tls_topic'];
    }

    /**
     * Sets tls_topic
     *
     * @param string $tls_topic tls_topic
     *
     * @return $this
     */
    public function setTlsTopic($tls_topic)
    {
        $this->container['tls_topic'] = $tls_topic;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

