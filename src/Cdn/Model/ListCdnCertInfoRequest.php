<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Cdn\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ListCdnCertInfoRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListCdnCertInfoRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cert_id' => 'string',
        'cert_type' => 'string',
        'configured' => 'bool',
        'configured_domain' => 'string',
        'dns_name' => 'string',
        'encry_type' => 'string',
        'page_num' => 'int',
        'page_size' => 'int',
        'source' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cert_id' => null,
        'cert_type' => null,
        'configured' => null,
        'configured_domain' => null,
        'dns_name' => null,
        'encry_type' => null,
        'page_num' => 'int64',
        'page_size' => 'int64',
        'source' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cert_id' => 'CertId',
        'cert_type' => 'CertType',
        'configured' => 'Configured',
        'configured_domain' => 'ConfiguredDomain',
        'dns_name' => 'DnsName',
        'encry_type' => 'EncryType',
        'page_num' => 'PageNum',
        'page_size' => 'PageSize',
        'source' => 'Source',
        'status' => 'Status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cert_id' => 'setCertId',
        'cert_type' => 'setCertType',
        'configured' => 'setConfigured',
        'configured_domain' => 'setConfiguredDomain',
        'dns_name' => 'setDnsName',
        'encry_type' => 'setEncryType',
        'page_num' => 'setPageNum',
        'page_size' => 'setPageSize',
        'source' => 'setSource',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cert_id' => 'getCertId',
        'cert_type' => 'getCertType',
        'configured' => 'getConfigured',
        'configured_domain' => 'getConfiguredDomain',
        'dns_name' => 'getDnsName',
        'encry_type' => 'getEncryType',
        'page_num' => 'getPageNum',
        'page_size' => 'getPageSize',
        'source' => 'getSource',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cert_id'] = isset($data['cert_id']) ? $data['cert_id'] : null;
        $this->container['cert_type'] = isset($data['cert_type']) ? $data['cert_type'] : null;
        $this->container['configured'] = isset($data['configured']) ? $data['configured'] : null;
        $this->container['configured_domain'] = isset($data['configured_domain']) ? $data['configured_domain'] : null;
        $this->container['dns_name'] = isset($data['dns_name']) ? $data['dns_name'] : null;
        $this->container['encry_type'] = isset($data['encry_type']) ? $data['encry_type'] : null;
        $this->container['page_num'] = isset($data['page_num']) ? $data['page_num'] : null;
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cert_id
     *
     * @return string
     */
    public function getCertId()
    {
        return $this->container['cert_id'];
    }

    /**
     * Sets cert_id
     *
     * @param string $cert_id cert_id
     *
     * @return $this
     */
    public function setCertId($cert_id)
    {
        $this->container['cert_id'] = $cert_id;

        return $this;
    }

    /**
     * Gets cert_type
     *
     * @return string
     */
    public function getCertType()
    {
        return $this->container['cert_type'];
    }

    /**
     * Sets cert_type
     *
     * @param string $cert_type cert_type
     *
     * @return $this
     */
    public function setCertType($cert_type)
    {
        $this->container['cert_type'] = $cert_type;

        return $this;
    }

    /**
     * Gets configured
     *
     * @return bool
     */
    public function getConfigured()
    {
        return $this->container['configured'];
    }

    /**
     * Sets configured
     *
     * @param bool $configured configured
     *
     * @return $this
     */
    public function setConfigured($configured)
    {
        $this->container['configured'] = $configured;

        return $this;
    }

    /**
     * Gets configured_domain
     *
     * @return string
     */
    public function getConfiguredDomain()
    {
        return $this->container['configured_domain'];
    }

    /**
     * Sets configured_domain
     *
     * @param string $configured_domain configured_domain
     *
     * @return $this
     */
    public function setConfiguredDomain($configured_domain)
    {
        $this->container['configured_domain'] = $configured_domain;

        return $this;
    }

    /**
     * Gets dns_name
     *
     * @return string
     */
    public function getDnsName()
    {
        return $this->container['dns_name'];
    }

    /**
     * Sets dns_name
     *
     * @param string $dns_name dns_name
     *
     * @return $this
     */
    public function setDnsName($dns_name)
    {
        $this->container['dns_name'] = $dns_name;

        return $this;
    }

    /**
     * Gets encry_type
     *
     * @return string
     */
    public function getEncryType()
    {
        return $this->container['encry_type'];
    }

    /**
     * Sets encry_type
     *
     * @param string $encry_type encry_type
     *
     * @return $this
     */
    public function setEncryType($encry_type)
    {
        $this->container['encry_type'] = $encry_type;

        return $this;
    }

    /**
     * Gets page_num
     *
     * @return int
     */
    public function getPageNum()
    {
        return $this->container['page_num'];
    }

    /**
     * Sets page_num
     *
     * @param int $page_num page_num
     *
     * @return $this
     */
    public function setPageNum($page_num)
    {
        $this->container['page_num'] = $page_num;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int $page_size page_size
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

