<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Cdn\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class SignParamForBatchUpdateCdnConfigInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SignParamForBatchUpdateCdnConfigInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'param_type' => 'string',
        'request_header' => 'string',
        'sup_content' => 'string',
        'uri_param_sup' => '\Volcengine\Cdn\Model\UriParamSupForBatchUpdateCdnConfigInput',
        'url_param' => '\Volcengine\Cdn\Model\SignCapRuleForBatchUpdateCdnConfigInput'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'param_type' => null,
        'request_header' => null,
        'sup_content' => null,
        'uri_param_sup' => null,
        'url_param' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'param_type' => 'ParamType',
        'request_header' => 'RequestHeader',
        'sup_content' => 'SupContent',
        'uri_param_sup' => 'UriParamSup',
        'url_param' => 'UrlParam'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'param_type' => 'setParamType',
        'request_header' => 'setRequestHeader',
        'sup_content' => 'setSupContent',
        'uri_param_sup' => 'setUriParamSup',
        'url_param' => 'setUrlParam'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'param_type' => 'getParamType',
        'request_header' => 'getRequestHeader',
        'sup_content' => 'getSupContent',
        'uri_param_sup' => 'getUriParamSup',
        'url_param' => 'getUrlParam'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['param_type'] = isset($data['param_type']) ? $data['param_type'] : null;
        $this->container['request_header'] = isset($data['request_header']) ? $data['request_header'] : null;
        $this->container['sup_content'] = isset($data['sup_content']) ? $data['sup_content'] : null;
        $this->container['uri_param_sup'] = isset($data['uri_param_sup']) ? $data['uri_param_sup'] : null;
        $this->container['url_param'] = isset($data['url_param']) ? $data['url_param'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets param_type
     *
     * @return string
     */
    public function getParamType()
    {
        return $this->container['param_type'];
    }

    /**
     * Sets param_type
     *
     * @param string $param_type param_type
     *
     * @return $this
     */
    public function setParamType($param_type)
    {
        $this->container['param_type'] = $param_type;

        return $this;
    }

    /**
     * Gets request_header
     *
     * @return string
     */
    public function getRequestHeader()
    {
        return $this->container['request_header'];
    }

    /**
     * Sets request_header
     *
     * @param string $request_header request_header
     *
     * @return $this
     */
    public function setRequestHeader($request_header)
    {
        $this->container['request_header'] = $request_header;

        return $this;
    }

    /**
     * Gets sup_content
     *
     * @return string
     */
    public function getSupContent()
    {
        return $this->container['sup_content'];
    }

    /**
     * Sets sup_content
     *
     * @param string $sup_content sup_content
     *
     * @return $this
     */
    public function setSupContent($sup_content)
    {
        $this->container['sup_content'] = $sup_content;

        return $this;
    }

    /**
     * Gets uri_param_sup
     *
     * @return \Volcengine\Cdn\Model\UriParamSupForBatchUpdateCdnConfigInput
     */
    public function getUriParamSup()
    {
        return $this->container['uri_param_sup'];
    }

    /**
     * Sets uri_param_sup
     *
     * @param \Volcengine\Cdn\Model\UriParamSupForBatchUpdateCdnConfigInput $uri_param_sup uri_param_sup
     *
     * @return $this
     */
    public function setUriParamSup($uri_param_sup)
    {
        $this->container['uri_param_sup'] = $uri_param_sup;

        return $this;
    }

    /**
     * Gets url_param
     *
     * @return \Volcengine\Cdn\Model\SignCapRuleForBatchUpdateCdnConfigInput
     */
    public function getUrlParam()
    {
        return $this->container['url_param'];
    }

    /**
     * Sets url_param
     *
     * @param \Volcengine\Cdn\Model\SignCapRuleForBatchUpdateCdnConfigInput $url_param url_param
     *
     * @return $this
     */
    public function setUrlParam($url_param)
    {
        $this->container['url_param'] = $url_param;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

