<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Cdn\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class AuthModeConfigForDescribeCdnConfigOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuthModeConfigForDescribeCdnConfigOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'backup_remote_addr' => 'string',
        'master_remote_addr' => 'string',
        'path_type' => 'string',
        'path_value' => 'string',
        'request_method' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'backup_remote_addr' => null,
        'master_remote_addr' => null,
        'path_type' => null,
        'path_value' => null,
        'request_method' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'backup_remote_addr' => 'BackupRemoteAddr',
        'master_remote_addr' => 'MasterRemoteAddr',
        'path_type' => 'PathType',
        'path_value' => 'PathValue',
        'request_method' => 'RequestMethod'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'backup_remote_addr' => 'setBackupRemoteAddr',
        'master_remote_addr' => 'setMasterRemoteAddr',
        'path_type' => 'setPathType',
        'path_value' => 'setPathValue',
        'request_method' => 'setRequestMethod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'backup_remote_addr' => 'getBackupRemoteAddr',
        'master_remote_addr' => 'getMasterRemoteAddr',
        'path_type' => 'getPathType',
        'path_value' => 'getPathValue',
        'request_method' => 'getRequestMethod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['backup_remote_addr'] = isset($data['backup_remote_addr']) ? $data['backup_remote_addr'] : null;
        $this->container['master_remote_addr'] = isset($data['master_remote_addr']) ? $data['master_remote_addr'] : null;
        $this->container['path_type'] = isset($data['path_type']) ? $data['path_type'] : null;
        $this->container['path_value'] = isset($data['path_value']) ? $data['path_value'] : null;
        $this->container['request_method'] = isset($data['request_method']) ? $data['request_method'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets backup_remote_addr
     *
     * @return string
     */
    public function getBackupRemoteAddr()
    {
        return $this->container['backup_remote_addr'];
    }

    /**
     * Sets backup_remote_addr
     *
     * @param string $backup_remote_addr backup_remote_addr
     *
     * @return $this
     */
    public function setBackupRemoteAddr($backup_remote_addr)
    {
        $this->container['backup_remote_addr'] = $backup_remote_addr;

        return $this;
    }

    /**
     * Gets master_remote_addr
     *
     * @return string
     */
    public function getMasterRemoteAddr()
    {
        return $this->container['master_remote_addr'];
    }

    /**
     * Sets master_remote_addr
     *
     * @param string $master_remote_addr master_remote_addr
     *
     * @return $this
     */
    public function setMasterRemoteAddr($master_remote_addr)
    {
        $this->container['master_remote_addr'] = $master_remote_addr;

        return $this;
    }

    /**
     * Gets path_type
     *
     * @return string
     */
    public function getPathType()
    {
        return $this->container['path_type'];
    }

    /**
     * Sets path_type
     *
     * @param string $path_type path_type
     *
     * @return $this
     */
    public function setPathType($path_type)
    {
        $this->container['path_type'] = $path_type;

        return $this;
    }

    /**
     * Gets path_value
     *
     * @return string
     */
    public function getPathValue()
    {
        return $this->container['path_value'];
    }

    /**
     * Sets path_value
     *
     * @param string $path_value path_value
     *
     * @return $this
     */
    public function setPathValue($path_value)
    {
        $this->container['path_value'] = $path_value;

        return $this;
    }

    /**
     * Gets request_method
     *
     * @return string
     */
    public function getRequestMethod()
    {
        return $this->container['request_method'];
    }

    /**
     * Sets request_method
     *
     * @param string $request_method request_method
     *
     * @return $this
     */
    public function setRequestMethod($request_method)
    {
        $this->container['request_method'] = $request_method;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

