<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Cdn\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class UriParamSupForUpdateCdnConfigInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UriParamSupForUpdateCdnConfigInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'join_symbol' => 'string',
        'split_symbol' => 'string',
        'start_level' => 'int',
        'term_level' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'join_symbol' => null,
        'split_symbol' => null,
        'start_level' => 'int64',
        'term_level' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'join_symbol' => 'JoinSymbol',
        'split_symbol' => 'SplitSymbol',
        'start_level' => 'StartLevel',
        'term_level' => 'TermLevel'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'join_symbol' => 'setJoinSymbol',
        'split_symbol' => 'setSplitSymbol',
        'start_level' => 'setStartLevel',
        'term_level' => 'setTermLevel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'join_symbol' => 'getJoinSymbol',
        'split_symbol' => 'getSplitSymbol',
        'start_level' => 'getStartLevel',
        'term_level' => 'getTermLevel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['join_symbol'] = isset($data['join_symbol']) ? $data['join_symbol'] : null;
        $this->container['split_symbol'] = isset($data['split_symbol']) ? $data['split_symbol'] : null;
        $this->container['start_level'] = isset($data['start_level']) ? $data['start_level'] : null;
        $this->container['term_level'] = isset($data['term_level']) ? $data['term_level'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets join_symbol
     *
     * @return string
     */
    public function getJoinSymbol()
    {
        return $this->container['join_symbol'];
    }

    /**
     * Sets join_symbol
     *
     * @param string $join_symbol join_symbol
     *
     * @return $this
     */
    public function setJoinSymbol($join_symbol)
    {
        $this->container['join_symbol'] = $join_symbol;

        return $this;
    }

    /**
     * Gets split_symbol
     *
     * @return string
     */
    public function getSplitSymbol()
    {
        return $this->container['split_symbol'];
    }

    /**
     * Sets split_symbol
     *
     * @param string $split_symbol split_symbol
     *
     * @return $this
     */
    public function setSplitSymbol($split_symbol)
    {
        $this->container['split_symbol'] = $split_symbol;

        return $this;
    }

    /**
     * Gets start_level
     *
     * @return int
     */
    public function getStartLevel()
    {
        return $this->container['start_level'];
    }

    /**
     * Sets start_level
     *
     * @param int $start_level start_level
     *
     * @return $this
     */
    public function setStartLevel($start_level)
    {
        $this->container['start_level'] = $start_level;

        return $this;
    }

    /**
     * Gets term_level
     *
     * @return int
     */
    public function getTermLevel()
    {
        return $this->container['term_level'];
    }

    /**
     * Sets term_level
     *
     * @param int $term_level term_level
     *
     * @return $this
     */
    public function setTermLevel($term_level)
    {
        $this->container['term_level'] = $term_level;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

