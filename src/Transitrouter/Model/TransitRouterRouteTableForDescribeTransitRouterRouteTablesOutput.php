<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Transitrouter\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class TransitRouterRouteTableForDescribeTransitRouterRouteTablesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TransitRouterRouteTableForDescribeTransitRouterRouteTablesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'creation_time' => 'string',
        'description' => 'string',
        'in_route_policy_table_id' => 'string',
        'out_route_policy_table_id' => 'string',
        'status' => 'string',
        'tags' => '\Volcengine\Transitrouter\Model\TagForDescribeTransitRouterRouteTablesOutput[]',
        'transit_router_route_table_id' => 'string',
        'transit_router_route_table_name' => 'string',
        'transit_router_route_table_type' => 'string',
        'update_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'creation_time' => null,
        'description' => null,
        'in_route_policy_table_id' => null,
        'out_route_policy_table_id' => null,
        'status' => null,
        'tags' => null,
        'transit_router_route_table_id' => null,
        'transit_router_route_table_name' => null,
        'transit_router_route_table_type' => null,
        'update_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'creation_time' => 'CreationTime',
        'description' => 'Description',
        'in_route_policy_table_id' => 'InRoutePolicyTableId',
        'out_route_policy_table_id' => 'OutRoutePolicyTableId',
        'status' => 'Status',
        'tags' => 'Tags',
        'transit_router_route_table_id' => 'TransitRouterRouteTableId',
        'transit_router_route_table_name' => 'TransitRouterRouteTableName',
        'transit_router_route_table_type' => 'TransitRouterRouteTableType',
        'update_time' => 'UpdateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'creation_time' => 'setCreationTime',
        'description' => 'setDescription',
        'in_route_policy_table_id' => 'setInRoutePolicyTableId',
        'out_route_policy_table_id' => 'setOutRoutePolicyTableId',
        'status' => 'setStatus',
        'tags' => 'setTags',
        'transit_router_route_table_id' => 'setTransitRouterRouteTableId',
        'transit_router_route_table_name' => 'setTransitRouterRouteTableName',
        'transit_router_route_table_type' => 'setTransitRouterRouteTableType',
        'update_time' => 'setUpdateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'creation_time' => 'getCreationTime',
        'description' => 'getDescription',
        'in_route_policy_table_id' => 'getInRoutePolicyTableId',
        'out_route_policy_table_id' => 'getOutRoutePolicyTableId',
        'status' => 'getStatus',
        'tags' => 'getTags',
        'transit_router_route_table_id' => 'getTransitRouterRouteTableId',
        'transit_router_route_table_name' => 'getTransitRouterRouteTableName',
        'transit_router_route_table_type' => 'getTransitRouterRouteTableType',
        'update_time' => 'getUpdateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['creation_time'] = isset($data['creation_time']) ? $data['creation_time'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['in_route_policy_table_id'] = isset($data['in_route_policy_table_id']) ? $data['in_route_policy_table_id'] : null;
        $this->container['out_route_policy_table_id'] = isset($data['out_route_policy_table_id']) ? $data['out_route_policy_table_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['transit_router_route_table_id'] = isset($data['transit_router_route_table_id']) ? $data['transit_router_route_table_id'] : null;
        $this->container['transit_router_route_table_name'] = isset($data['transit_router_route_table_name']) ? $data['transit_router_route_table_name'] : null;
        $this->container['transit_router_route_table_type'] = isset($data['transit_router_route_table_type']) ? $data['transit_router_route_table_type'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets creation_time
     *
     * @return string
     */
    public function getCreationTime()
    {
        return $this->container['creation_time'];
    }

    /**
     * Sets creation_time
     *
     * @param string $creation_time creation_time
     *
     * @return $this
     */
    public function setCreationTime($creation_time)
    {
        $this->container['creation_time'] = $creation_time;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets in_route_policy_table_id
     *
     * @return string
     */
    public function getInRoutePolicyTableId()
    {
        return $this->container['in_route_policy_table_id'];
    }

    /**
     * Sets in_route_policy_table_id
     *
     * @param string $in_route_policy_table_id in_route_policy_table_id
     *
     * @return $this
     */
    public function setInRoutePolicyTableId($in_route_policy_table_id)
    {
        $this->container['in_route_policy_table_id'] = $in_route_policy_table_id;

        return $this;
    }

    /**
     * Gets out_route_policy_table_id
     *
     * @return string
     */
    public function getOutRoutePolicyTableId()
    {
        return $this->container['out_route_policy_table_id'];
    }

    /**
     * Sets out_route_policy_table_id
     *
     * @param string $out_route_policy_table_id out_route_policy_table_id
     *
     * @return $this
     */
    public function setOutRoutePolicyTableId($out_route_policy_table_id)
    {
        $this->container['out_route_policy_table_id'] = $out_route_policy_table_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Transitrouter\Model\TagForDescribeTransitRouterRouteTablesOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Transitrouter\Model\TagForDescribeTransitRouterRouteTablesOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets transit_router_route_table_id
     *
     * @return string
     */
    public function getTransitRouterRouteTableId()
    {
        return $this->container['transit_router_route_table_id'];
    }

    /**
     * Sets transit_router_route_table_id
     *
     * @param string $transit_router_route_table_id transit_router_route_table_id
     *
     * @return $this
     */
    public function setTransitRouterRouteTableId($transit_router_route_table_id)
    {
        $this->container['transit_router_route_table_id'] = $transit_router_route_table_id;

        return $this;
    }

    /**
     * Gets transit_router_route_table_name
     *
     * @return string
     */
    public function getTransitRouterRouteTableName()
    {
        return $this->container['transit_router_route_table_name'];
    }

    /**
     * Sets transit_router_route_table_name
     *
     * @param string $transit_router_route_table_name transit_router_route_table_name
     *
     * @return $this
     */
    public function setTransitRouterRouteTableName($transit_router_route_table_name)
    {
        $this->container['transit_router_route_table_name'] = $transit_router_route_table_name;

        return $this;
    }

    /**
     * Gets transit_router_route_table_type
     *
     * @return string
     */
    public function getTransitRouterRouteTableType()
    {
        return $this->container['transit_router_route_table_type'];
    }

    /**
     * Sets transit_router_route_table_type
     *
     * @param string $transit_router_route_table_type transit_router_route_table_type
     *
     * @return $this
     */
    public function setTransitRouterRouteTableType($transit_router_route_table_type)
    {
        $this->container['transit_router_route_table_type'] = $transit_router_route_table_type;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

