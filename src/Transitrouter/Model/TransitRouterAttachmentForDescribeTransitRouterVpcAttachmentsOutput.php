<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Transitrouter\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class TransitRouterAttachmentForDescribeTransitRouterVpcAttachmentsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TransitRouterAttachmentForDescribeTransitRouterVpcAttachmentsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'attach_points' => '\Volcengine\Transitrouter\Model\AttachPointForDescribeTransitRouterVpcAttachmentsOutput[]',
        'auto_publish_route_enabled' => 'bool',
        'creation_time' => 'string',
        'description' => 'string',
        'status' => 'string',
        'tags' => '\Volcengine\Transitrouter\Model\TagForDescribeTransitRouterVpcAttachmentsOutput[]',
        'transit_router_attachment_id' => 'string',
        'transit_router_attachment_name' => 'string',
        'transit_router_id' => 'string',
        'update_time' => 'string',
        'vpc_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'attach_points' => null,
        'auto_publish_route_enabled' => null,
        'creation_time' => null,
        'description' => null,
        'status' => null,
        'tags' => null,
        'transit_router_attachment_id' => null,
        'transit_router_attachment_name' => null,
        'transit_router_id' => null,
        'update_time' => null,
        'vpc_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attach_points' => 'AttachPoints',
        'auto_publish_route_enabled' => 'AutoPublishRouteEnabled',
        'creation_time' => 'CreationTime',
        'description' => 'Description',
        'status' => 'Status',
        'tags' => 'Tags',
        'transit_router_attachment_id' => 'TransitRouterAttachmentId',
        'transit_router_attachment_name' => 'TransitRouterAttachmentName',
        'transit_router_id' => 'TransitRouterId',
        'update_time' => 'UpdateTime',
        'vpc_id' => 'VpcId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attach_points' => 'setAttachPoints',
        'auto_publish_route_enabled' => 'setAutoPublishRouteEnabled',
        'creation_time' => 'setCreationTime',
        'description' => 'setDescription',
        'status' => 'setStatus',
        'tags' => 'setTags',
        'transit_router_attachment_id' => 'setTransitRouterAttachmentId',
        'transit_router_attachment_name' => 'setTransitRouterAttachmentName',
        'transit_router_id' => 'setTransitRouterId',
        'update_time' => 'setUpdateTime',
        'vpc_id' => 'setVpcId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attach_points' => 'getAttachPoints',
        'auto_publish_route_enabled' => 'getAutoPublishRouteEnabled',
        'creation_time' => 'getCreationTime',
        'description' => 'getDescription',
        'status' => 'getStatus',
        'tags' => 'getTags',
        'transit_router_attachment_id' => 'getTransitRouterAttachmentId',
        'transit_router_attachment_name' => 'getTransitRouterAttachmentName',
        'transit_router_id' => 'getTransitRouterId',
        'update_time' => 'getUpdateTime',
        'vpc_id' => 'getVpcId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['attach_points'] = isset($data['attach_points']) ? $data['attach_points'] : null;
        $this->container['auto_publish_route_enabled'] = isset($data['auto_publish_route_enabled']) ? $data['auto_publish_route_enabled'] : null;
        $this->container['creation_time'] = isset($data['creation_time']) ? $data['creation_time'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['transit_router_attachment_id'] = isset($data['transit_router_attachment_id']) ? $data['transit_router_attachment_id'] : null;
        $this->container['transit_router_attachment_name'] = isset($data['transit_router_attachment_name']) ? $data['transit_router_attachment_name'] : null;
        $this->container['transit_router_id'] = isset($data['transit_router_id']) ? $data['transit_router_id'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
        $this->container['vpc_id'] = isset($data['vpc_id']) ? $data['vpc_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets attach_points
     *
     * @return \Volcengine\Transitrouter\Model\AttachPointForDescribeTransitRouterVpcAttachmentsOutput[]
     */
    public function getAttachPoints()
    {
        return $this->container['attach_points'];
    }

    /**
     * Sets attach_points
     *
     * @param \Volcengine\Transitrouter\Model\AttachPointForDescribeTransitRouterVpcAttachmentsOutput[] $attach_points attach_points
     *
     * @return $this
     */
    public function setAttachPoints($attach_points)
    {
        $this->container['attach_points'] = $attach_points;

        return $this;
    }

    /**
     * Gets auto_publish_route_enabled
     *
     * @return bool
     */
    public function getAutoPublishRouteEnabled()
    {
        return $this->container['auto_publish_route_enabled'];
    }

    /**
     * Sets auto_publish_route_enabled
     *
     * @param bool $auto_publish_route_enabled auto_publish_route_enabled
     *
     * @return $this
     */
    public function setAutoPublishRouteEnabled($auto_publish_route_enabled)
    {
        $this->container['auto_publish_route_enabled'] = $auto_publish_route_enabled;

        return $this;
    }

    /**
     * Gets creation_time
     *
     * @return string
     */
    public function getCreationTime()
    {
        return $this->container['creation_time'];
    }

    /**
     * Sets creation_time
     *
     * @param string $creation_time creation_time
     *
     * @return $this
     */
    public function setCreationTime($creation_time)
    {
        $this->container['creation_time'] = $creation_time;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Transitrouter\Model\TagForDescribeTransitRouterVpcAttachmentsOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Transitrouter\Model\TagForDescribeTransitRouterVpcAttachmentsOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets transit_router_attachment_id
     *
     * @return string
     */
    public function getTransitRouterAttachmentId()
    {
        return $this->container['transit_router_attachment_id'];
    }

    /**
     * Sets transit_router_attachment_id
     *
     * @param string $transit_router_attachment_id transit_router_attachment_id
     *
     * @return $this
     */
    public function setTransitRouterAttachmentId($transit_router_attachment_id)
    {
        $this->container['transit_router_attachment_id'] = $transit_router_attachment_id;

        return $this;
    }

    /**
     * Gets transit_router_attachment_name
     *
     * @return string
     */
    public function getTransitRouterAttachmentName()
    {
        return $this->container['transit_router_attachment_name'];
    }

    /**
     * Sets transit_router_attachment_name
     *
     * @param string $transit_router_attachment_name transit_router_attachment_name
     *
     * @return $this
     */
    public function setTransitRouterAttachmentName($transit_router_attachment_name)
    {
        $this->container['transit_router_attachment_name'] = $transit_router_attachment_name;

        return $this;
    }

    /**
     * Gets transit_router_id
     *
     * @return string
     */
    public function getTransitRouterId()
    {
        return $this->container['transit_router_id'];
    }

    /**
     * Sets transit_router_id
     *
     * @param string $transit_router_id transit_router_id
     *
     * @return $this
     */
    public function setTransitRouterId($transit_router_id)
    {
        $this->container['transit_router_id'] = $transit_router_id;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }

    /**
     * Gets vpc_id
     *
     * @return string
     */
    public function getVpcId()
    {
        return $this->container['vpc_id'];
    }

    /**
     * Sets vpc_id
     *
     * @param string $vpc_id vpc_id
     *
     * @return $this
     */
    public function setVpcId($vpc_id)
    {
        $this->container['vpc_id'] = $vpc_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

