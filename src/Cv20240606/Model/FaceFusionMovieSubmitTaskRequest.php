<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Cv20240606\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class FaceFusionMovieSubmitTaskRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FaceFusionMovieSubmitTaskRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'dermabrasion' => 'float',
        'enable_face_beautify' => 'bool',
        'gpen' => 'float',
        'image_url' => 'string',
        'logo_info' => '\Volcengine\Cv20240606\Model\LogoInfoForFaceFusionMovieSubmitTaskInput',
        'ref_img_url' => 'string',
        'req_key' => 'string',
        'sharpening' => 'float',
        'source_similarity' => 'string',
        'video_url' => 'string',
        'whitening' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'dermabrasion' => 'float',
        'enable_face_beautify' => null,
        'gpen' => 'float',
        'image_url' => null,
        'logo_info' => null,
        'ref_img_url' => null,
        'req_key' => null,
        'sharpening' => 'float',
        'source_similarity' => null,
        'video_url' => null,
        'whitening' => 'float'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dermabrasion' => 'dermabrasion',
        'enable_face_beautify' => 'enable_face_beautify',
        'gpen' => 'gpen',
        'image_url' => 'image_url',
        'logo_info' => 'logo_info',
        'ref_img_url' => 'ref_img_url',
        'req_key' => 'req_key',
        'sharpening' => 'sharpening',
        'source_similarity' => 'source_similarity',
        'video_url' => 'video_url',
        'whitening' => 'whitening'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dermabrasion' => 'setDermabrasion',
        'enable_face_beautify' => 'setEnableFaceBeautify',
        'gpen' => 'setGpen',
        'image_url' => 'setImageUrl',
        'logo_info' => 'setLogoInfo',
        'ref_img_url' => 'setRefImgUrl',
        'req_key' => 'setReqKey',
        'sharpening' => 'setSharpening',
        'source_similarity' => 'setSourceSimilarity',
        'video_url' => 'setVideoUrl',
        'whitening' => 'setWhitening'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dermabrasion' => 'getDermabrasion',
        'enable_face_beautify' => 'getEnableFaceBeautify',
        'gpen' => 'getGpen',
        'image_url' => 'getImageUrl',
        'logo_info' => 'getLogoInfo',
        'ref_img_url' => 'getRefImgUrl',
        'req_key' => 'getReqKey',
        'sharpening' => 'getSharpening',
        'source_similarity' => 'getSourceSimilarity',
        'video_url' => 'getVideoUrl',
        'whitening' => 'getWhitening'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dermabrasion'] = isset($data['dermabrasion']) ? $data['dermabrasion'] : null;
        $this->container['enable_face_beautify'] = isset($data['enable_face_beautify']) ? $data['enable_face_beautify'] : null;
        $this->container['gpen'] = isset($data['gpen']) ? $data['gpen'] : null;
        $this->container['image_url'] = isset($data['image_url']) ? $data['image_url'] : null;
        $this->container['logo_info'] = isset($data['logo_info']) ? $data['logo_info'] : null;
        $this->container['ref_img_url'] = isset($data['ref_img_url']) ? $data['ref_img_url'] : null;
        $this->container['req_key'] = isset($data['req_key']) ? $data['req_key'] : null;
        $this->container['sharpening'] = isset($data['sharpening']) ? $data['sharpening'] : null;
        $this->container['source_similarity'] = isset($data['source_similarity']) ? $data['source_similarity'] : null;
        $this->container['video_url'] = isset($data['video_url']) ? $data['video_url'] : null;
        $this->container['whitening'] = isset($data['whitening']) ? $data['whitening'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['image_url'] === null) {
            $invalidProperties[] = "'image_url' can't be null";
        }
        if ($this->container['req_key'] === null) {
            $invalidProperties[] = "'req_key' can't be null";
        }
        if ($this->container['video_url'] === null) {
            $invalidProperties[] = "'video_url' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dermabrasion
     *
     * @return float
     */
    public function getDermabrasion()
    {
        return $this->container['dermabrasion'];
    }

    /**
     * Sets dermabrasion
     *
     * @param float $dermabrasion dermabrasion
     *
     * @return $this
     */
    public function setDermabrasion($dermabrasion)
    {
        $this->container['dermabrasion'] = $dermabrasion;

        return $this;
    }

    /**
     * Gets enable_face_beautify
     *
     * @return bool
     */
    public function getEnableFaceBeautify()
    {
        return $this->container['enable_face_beautify'];
    }

    /**
     * Sets enable_face_beautify
     *
     * @param bool $enable_face_beautify enable_face_beautify
     *
     * @return $this
     */
    public function setEnableFaceBeautify($enable_face_beautify)
    {
        $this->container['enable_face_beautify'] = $enable_face_beautify;

        return $this;
    }

    /**
     * Gets gpen
     *
     * @return float
     */
    public function getGpen()
    {
        return $this->container['gpen'];
    }

    /**
     * Sets gpen
     *
     * @param float $gpen gpen
     *
     * @return $this
     */
    public function setGpen($gpen)
    {
        $this->container['gpen'] = $gpen;

        return $this;
    }

    /**
     * Gets image_url
     *
     * @return string
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string $image_url image_url
     *
     * @return $this
     */
    public function setImageUrl($image_url)
    {
        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets logo_info
     *
     * @return \Volcengine\Cv20240606\Model\LogoInfoForFaceFusionMovieSubmitTaskInput
     */
    public function getLogoInfo()
    {
        return $this->container['logo_info'];
    }

    /**
     * Sets logo_info
     *
     * @param \Volcengine\Cv20240606\Model\LogoInfoForFaceFusionMovieSubmitTaskInput $logo_info logo_info
     *
     * @return $this
     */
    public function setLogoInfo($logo_info)
    {
        $this->container['logo_info'] = $logo_info;

        return $this;
    }

    /**
     * Gets ref_img_url
     *
     * @return string
     */
    public function getRefImgUrl()
    {
        return $this->container['ref_img_url'];
    }

    /**
     * Sets ref_img_url
     *
     * @param string $ref_img_url ref_img_url
     *
     * @return $this
     */
    public function setRefImgUrl($ref_img_url)
    {
        $this->container['ref_img_url'] = $ref_img_url;

        return $this;
    }

    /**
     * Gets req_key
     *
     * @return string
     */
    public function getReqKey()
    {
        return $this->container['req_key'];
    }

    /**
     * Sets req_key
     *
     * @param string $req_key req_key
     *
     * @return $this
     */
    public function setReqKey($req_key)
    {
        $this->container['req_key'] = $req_key;

        return $this;
    }

    /**
     * Gets sharpening
     *
     * @return float
     */
    public function getSharpening()
    {
        return $this->container['sharpening'];
    }

    /**
     * Sets sharpening
     *
     * @param float $sharpening sharpening
     *
     * @return $this
     */
    public function setSharpening($sharpening)
    {
        $this->container['sharpening'] = $sharpening;

        return $this;
    }

    /**
     * Gets source_similarity
     *
     * @return string
     */
    public function getSourceSimilarity()
    {
        return $this->container['source_similarity'];
    }

    /**
     * Sets source_similarity
     *
     * @param string $source_similarity source_similarity
     *
     * @return $this
     */
    public function setSourceSimilarity($source_similarity)
    {
        $this->container['source_similarity'] = $source_similarity;

        return $this;
    }

    /**
     * Gets video_url
     *
     * @return string
     */
    public function getVideoUrl()
    {
        return $this->container['video_url'];
    }

    /**
     * Sets video_url
     *
     * @param string $video_url video_url
     *
     * @return $this
     */
    public function setVideoUrl($video_url)
    {
        $this->container['video_url'] = $video_url;

        return $this;
    }

    /**
     * Gets whitening
     *
     * @return float
     */
    public function getWhitening()
    {
        return $this->container['whitening'];
    }

    /**
     * Sets whitening
     *
     * @param float $whitening whitening
     *
     * @return $this
     */
    public function setWhitening($whitening)
    {
        $this->container['whitening'] = $whitening;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

