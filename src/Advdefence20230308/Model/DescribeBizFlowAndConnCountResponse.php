<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Advdefence20230308\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DescribeBizFlowAndConnCountResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DescribeBizFlowAndConnCountResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'biz_in_kbps_flow' => '\Volcengine\Advdefence20230308\Model\BizInKbpsFlowForDescribeBizFlowAndConnCountOutput',
        'biz_in_pps_flow' => '\Volcengine\Advdefence20230308\Model\BizInPpsFlowForDescribeBizFlowAndConnCountOutput',
        'biz_out_kbps_flow' => '\Volcengine\Advdefence20230308\Model\BizOutKbpsFlowForDescribeBizFlowAndConnCountOutput',
        'biz_out_pps_flow' => '\Volcengine\Advdefence20230308\Model\BizOutPpsFlowForDescribeBizFlowAndConnCountOutput',
        'concurr_conn_flow' => '\Volcengine\Advdefence20230308\Model\ConcurrConnFlowForDescribeBizFlowAndConnCountOutput',
        'new_conn_flow' => '\Volcengine\Advdefence20230308\Model\NewConnFlowForDescribeBizFlowAndConnCountOutput'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'biz_in_kbps_flow' => null,
        'biz_in_pps_flow' => null,
        'biz_out_kbps_flow' => null,
        'biz_out_pps_flow' => null,
        'concurr_conn_flow' => null,
        'new_conn_flow' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'biz_in_kbps_flow' => 'BizInKbpsFlow',
        'biz_in_pps_flow' => 'BizInPpsFlow',
        'biz_out_kbps_flow' => 'BizOutKbpsFlow',
        'biz_out_pps_flow' => 'BizOutPpsFlow',
        'concurr_conn_flow' => 'ConcurrConnFlow',
        'new_conn_flow' => 'NewConnFlow'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'biz_in_kbps_flow' => 'setBizInKbpsFlow',
        'biz_in_pps_flow' => 'setBizInPpsFlow',
        'biz_out_kbps_flow' => 'setBizOutKbpsFlow',
        'biz_out_pps_flow' => 'setBizOutPpsFlow',
        'concurr_conn_flow' => 'setConcurrConnFlow',
        'new_conn_flow' => 'setNewConnFlow'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'biz_in_kbps_flow' => 'getBizInKbpsFlow',
        'biz_in_pps_flow' => 'getBizInPpsFlow',
        'biz_out_kbps_flow' => 'getBizOutKbpsFlow',
        'biz_out_pps_flow' => 'getBizOutPpsFlow',
        'concurr_conn_flow' => 'getConcurrConnFlow',
        'new_conn_flow' => 'getNewConnFlow'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['biz_in_kbps_flow'] = isset($data['biz_in_kbps_flow']) ? $data['biz_in_kbps_flow'] : null;
        $this->container['biz_in_pps_flow'] = isset($data['biz_in_pps_flow']) ? $data['biz_in_pps_flow'] : null;
        $this->container['biz_out_kbps_flow'] = isset($data['biz_out_kbps_flow']) ? $data['biz_out_kbps_flow'] : null;
        $this->container['biz_out_pps_flow'] = isset($data['biz_out_pps_flow']) ? $data['biz_out_pps_flow'] : null;
        $this->container['concurr_conn_flow'] = isset($data['concurr_conn_flow']) ? $data['concurr_conn_flow'] : null;
        $this->container['new_conn_flow'] = isset($data['new_conn_flow']) ? $data['new_conn_flow'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets biz_in_kbps_flow
     *
     * @return \Volcengine\Advdefence20230308\Model\BizInKbpsFlowForDescribeBizFlowAndConnCountOutput
     */
    public function getBizInKbpsFlow()
    {
        return $this->container['biz_in_kbps_flow'];
    }

    /**
     * Sets biz_in_kbps_flow
     *
     * @param \Volcengine\Advdefence20230308\Model\BizInKbpsFlowForDescribeBizFlowAndConnCountOutput $biz_in_kbps_flow biz_in_kbps_flow
     *
     * @return $this
     */
    public function setBizInKbpsFlow($biz_in_kbps_flow)
    {
        $this->container['biz_in_kbps_flow'] = $biz_in_kbps_flow;

        return $this;
    }

    /**
     * Gets biz_in_pps_flow
     *
     * @return \Volcengine\Advdefence20230308\Model\BizInPpsFlowForDescribeBizFlowAndConnCountOutput
     */
    public function getBizInPpsFlow()
    {
        return $this->container['biz_in_pps_flow'];
    }

    /**
     * Sets biz_in_pps_flow
     *
     * @param \Volcengine\Advdefence20230308\Model\BizInPpsFlowForDescribeBizFlowAndConnCountOutput $biz_in_pps_flow biz_in_pps_flow
     *
     * @return $this
     */
    public function setBizInPpsFlow($biz_in_pps_flow)
    {
        $this->container['biz_in_pps_flow'] = $biz_in_pps_flow;

        return $this;
    }

    /**
     * Gets biz_out_kbps_flow
     *
     * @return \Volcengine\Advdefence20230308\Model\BizOutKbpsFlowForDescribeBizFlowAndConnCountOutput
     */
    public function getBizOutKbpsFlow()
    {
        return $this->container['biz_out_kbps_flow'];
    }

    /**
     * Sets biz_out_kbps_flow
     *
     * @param \Volcengine\Advdefence20230308\Model\BizOutKbpsFlowForDescribeBizFlowAndConnCountOutput $biz_out_kbps_flow biz_out_kbps_flow
     *
     * @return $this
     */
    public function setBizOutKbpsFlow($biz_out_kbps_flow)
    {
        $this->container['biz_out_kbps_flow'] = $biz_out_kbps_flow;

        return $this;
    }

    /**
     * Gets biz_out_pps_flow
     *
     * @return \Volcengine\Advdefence20230308\Model\BizOutPpsFlowForDescribeBizFlowAndConnCountOutput
     */
    public function getBizOutPpsFlow()
    {
        return $this->container['biz_out_pps_flow'];
    }

    /**
     * Sets biz_out_pps_flow
     *
     * @param \Volcengine\Advdefence20230308\Model\BizOutPpsFlowForDescribeBizFlowAndConnCountOutput $biz_out_pps_flow biz_out_pps_flow
     *
     * @return $this
     */
    public function setBizOutPpsFlow($biz_out_pps_flow)
    {
        $this->container['biz_out_pps_flow'] = $biz_out_pps_flow;

        return $this;
    }

    /**
     * Gets concurr_conn_flow
     *
     * @return \Volcengine\Advdefence20230308\Model\ConcurrConnFlowForDescribeBizFlowAndConnCountOutput
     */
    public function getConcurrConnFlow()
    {
        return $this->container['concurr_conn_flow'];
    }

    /**
     * Sets concurr_conn_flow
     *
     * @param \Volcengine\Advdefence20230308\Model\ConcurrConnFlowForDescribeBizFlowAndConnCountOutput $concurr_conn_flow concurr_conn_flow
     *
     * @return $this
     */
    public function setConcurrConnFlow($concurr_conn_flow)
    {
        $this->container['concurr_conn_flow'] = $concurr_conn_flow;

        return $this;
    }

    /**
     * Gets new_conn_flow
     *
     * @return \Volcengine\Advdefence20230308\Model\NewConnFlowForDescribeBizFlowAndConnCountOutput
     */
    public function getNewConnFlow()
    {
        return $this->container['new_conn_flow'];
    }

    /**
     * Sets new_conn_flow
     *
     * @param \Volcengine\Advdefence20230308\Model\NewConnFlowForDescribeBizFlowAndConnCountOutput $new_conn_flow new_conn_flow
     *
     * @return $this
     */
    public function setNewConnFlow($new_conn_flow)
    {
        $this->container['new_conn_flow'] = $new_conn_flow;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

